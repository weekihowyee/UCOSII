L 1 "..\..\..\..\..\uC-LIB\lib_mem.c"
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     STANDARD MEMORY OPERATIONS
N*
N* Filename      : lib_mem.c
N* Version       : V1.25
N* Programmer(s) : ITJ
N*                 FGK
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*********************************************************************************************************
N*/
N
N#define    LIB_MEM_MODULE
N#include  <lib_mem.h>
L 1 "..\..\..\..\..\uC-LIB\lib_mem.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     STANDARD MEMORY OPERATIONS
N*
N* Filename      : lib_mem.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_MODULE_PRESENT
N#define  LIB_MEM_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as
N*               additional include path directories.
N*
N*           (3) NO compiler-supplied standard library functions SHOULD be used.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
L 1 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                            CPU PORT FILE
N*
N*                                            ARM-Cortex-M3
N*                                      RealView Development Suite
N*                            RealView Microcontroller Development Kit (MDK)
N*                                       ARM Developer Suite (ADS)
N*                                            Keil uVision
N*
N* Filename      : cpu.h
N* Version       : V1.19
N* Programmer(s) : JJL
N*                 BAN
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  CPU_CFG_MODULE_PRESENT
N#define  CPU_CFG_MODULE_PRESENT
N
N
N/*
N*********************************************************************************************************
N*                                          CPU INCLUDE FILES
N*
N* Note(s) : (1) The following CPU files are located in the following directories :
N*
N*               (a) \<CPU-Compiler Directory>\cpu_def.h
N*
N*               (b) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<CPU-Compiler Directory>\' directory & the
N*               specific CPU-compiler directory as additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu_def.h>
L 1 "..\..\..\..\..\uC-CPU\cpu_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/CPU
N*                                    CPU CONFIGURATION & PORT LAYER
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/CPU is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/CPU in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/CPU.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      CPU CONFIGURATION DEFINES
N*
N* Filename      : cpu_def.h
N* Version       : V1.19
N* Programmer(s) : ITJ
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE in 'cpu.h' with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*               (b) Ideally, CPU_WORD_SIZE #define's would be calculated at compile-time through use of
N*                   the sizeof() operator.  However, some compilers do NOT allow pre-processor directives
N*                   to include run-time macro's -- e.g. 'sizeof()'.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE in 'cpu.h' with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                        /* ----------------------- CPU WORD SIZE ---------------------- */
N#define  CPU_WORD_SIZE_08                          1    /*  8-bit word size = sizeof(CPU_INT08x).                       */
N#define  CPU_WORD_SIZE_16                          2    /* 16-bit word size = sizeof(CPU_INT16x).                       */
N#define  CPU_WORD_SIZE_32                          4    /* 32-bit word size = sizeof(CPU_INT32x).                       */
N#define  CPU_WORD_SIZE_64                          8    /* 64-bit word size = sizeof(CPU_INT64x) [see Note #1a].        */
N
N
N                                                        /* ------------------- CPU WORD-ENDIAN ORDER ------------------ */
N#define  CPU_ENDIAN_TYPE_NONE                      0    /*                                                              */
N#define  CPU_ENDIAN_TYPE_BIG                       1    /* Big-   endian word order (CPU words' most  significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N#define  CPU_ENDIAN_TYPE_LITTLE                    2    /* Little-endian word order (CPU words' least significant ...   */
N                                                        /*                           ... octet @ lowest mem addr).      */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type in 'cpu.h' with the appropriate-sized CPU data type large enough to
N*               completely store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
N                                                        /* --------------- CPU CRITICAL SECTION METHODS --------------- */
N#define  CPU_CRITICAL_METHOD_NONE                  0    /*                                                              */
N#define  CPU_CRITICAL_METHOD_INT_DIS_EN            1    /* DIS/EN       ints.                                           */
N#define  CPU_CRITICAL_METHOD_STATUS_STK            2    /* Push/Pop     int status onto stk.                            */
N#define  CPU_CRITICAL_METHOD_STATUS_LOCAL          3    /* Save/Restore int status to local var.                        */
N
L 74 "..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView\cpu.h" 2
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                    CONFIGURE STANDARD DATA TYPES
N*
N* Note(s) : (1) Configure standard data types according to CPU-/compiler-specifications.
N*
N*           (2) (a) (1) 'CPU_FNCT_VOID' data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has no arguments.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_VOID  FnctName;
N*
N*                           FnctName();
N*
N*               (b) (1) 'CPU_FNCT_PTR'  data type defined to replace the commonly-used function pointer
N*                       data type of a pointer to a function which returns void & has a single void
N*                       pointer argument.
N*
N*                   (2) Example function pointer usage :
N*
N*                           CPU_FNCT_PTR   FnctName;
N*                           void          *pobj
N*
N*                           FnctName(pobj);
N*********************************************************************************************************
N*/
N
Ntypedef            void       CPU_VOID;
Ntypedef  unsigned  char       CPU_CHAR;                         /*  8-bit character                                     */
Ntypedef  unsigned  char       CPU_BOOLEAN;                      /*  8-bit boolean or logical                            */
Ntypedef  unsigned  char       CPU_INT08U;                       /*  8-bit unsigned integer                              */
Ntypedef    signed  char       CPU_INT08S;                       /*  8-bit   signed integer                              */
Ntypedef  unsigned  short      CPU_INT16U;                       /* 16-bit unsigned integer                              */
Ntypedef    signed  short      CPU_INT16S;                       /* 16-bit   signed integer                              */
Ntypedef  unsigned  int        CPU_INT32U;                       /* 32-bit unsigned integer                              */
Ntypedef    signed  int        CPU_INT32S;                       /* 32-bit   signed integer                              */
Ntypedef  unsigned  long long  CPU_INT64U;                       /* 64-bit unsigned integer                              */
Ntypedef    signed  long long  CPU_INT64S;                       /* 64-bit   signed integer                              */
N
Ntypedef            float      CPU_FP32;                         /* 32-bit floating point                                */
Ntypedef            double     CPU_FP64;                         /* 64-bit floating point                                */
N
N
Ntypedef            void     (*CPU_FNCT_VOID)(void);             /* See Note #2a.                                        */
Ntypedef            void     (*CPU_FNCT_PTR )(void *);           /* See Note #2b.                                        */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       CPU WORD CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_ADDR_SIZE & CPU_CFG_DATA_SIZE with CPU's word sizes :
N*
N*                   CPU_WORD_SIZE_08             8-bit word size
N*                   CPU_WORD_SIZE_16            16-bit word size
N*                   CPU_WORD_SIZE_32            32-bit word size
N*                   CPU_WORD_SIZE_64            64-bit word size            See Note #1a
N*
N*               (a) 64-bit word size NOT currently supported.
N*
N*           (2) Configure CPU_CFG_ENDIAN_TYPE with CPU's data-word-memory order :
N*
N*                   CPU_ENDIAN_TYPE_BIG         Big-   endian word order (CPU words' most  significant
N*                                                                         octet @ lowest memory address)
N*                   CPU_ENDIAN_TYPE_LITTLE      Little-endian word order (CPU words' least significant
N*                                                                         octet @ lowest memory address)
N*********************************************************************************************************
N*/
N
N                                                                /* Define  CPU         word sizes (see Note #1) :       */
N#define  CPU_CFG_ADDR_SIZE              CPU_WORD_SIZE_32        /* Defines CPU address word size.                       */
N
N#define  CPU_CFG_DATA_SIZE              CPU_WORD_SIZE_32        /* Defines CPU data    word size.                       */
N#define  CPU_CFG_ENDIAN_TYPE            CPU_ENDIAN_TYPE_LITTLE  /* Defines CPU data    word-memory order.               */
N
N
N/*
N*********************************************************************************************************
N*                                 CONFIGURE CPU ADDRESS & DATA TYPES
N*********************************************************************************************************
N*/
N
N                                                                /* CPU address type based on address bus size.          */
N#if     (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_ADDR;
N#elif   (CPU_CFG_ADDR_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_ADDR;
S#else
Stypedef  CPU_INT08U  CPU_ADDR;
N#endif
N
N                                                                /* CPU data    type based on data    bus size.          */
N#if     (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
X#if     (4 == 4)
Ntypedef  CPU_INT32U  CPU_DATA;
N#elif   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
Stypedef  CPU_INT16U  CPU_DATA;
S#else
Stypedef  CPU_INT08U  CPU_DATA;
N#endif
N
N
Ntypedef  CPU_DATA    CPU_ALIGN;                                 /* Defines CPU data-word-alignment size.                */
Ntypedef  CPU_DATA    CPU_SIZE_T;                                /* Defines CPU standard 'size_t'   size.                */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                   CRITICAL SECTION CONFIGURATION
N*
N* Note(s) : (1) Configure CPU_CFG_CRITICAL_METHOD with CPU's/compiler's critical section method :
N*
N*                                                       Enter/Exit critical sections by ...
N*
N*                   CPU_CRITICAL_METHOD_INT_DIS_EN      Disable/Enable interrupts
N*                   CPU_CRITICAL_METHOD_STATUS_STK      Push/Pop       interrupt status onto stack
N*                   CPU_CRITICAL_METHOD_STATUS_LOCAL    Save/Restore   interrupt status to local variable
N*
N*               (a) CPU_CRITICAL_METHOD_INT_DIS_EN  is NOT a preferred method since it does NOT support
N*                   multiple levels of interrupts.  However, with some CPUs/compilers, this is the only
N*                   available method.
N*
N*               (b) CPU_CRITICAL_METHOD_STATUS_STK    is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler allows in-line
N*                   assembly AND will correctly modify the local stack pointer when interrupt status is
N*                   pushed/popped onto the stack.
N*
N*               (c) CPU_CRITICAL_METHOD_STATUS_LOCAL  is one preferred method since it DOES support multiple
N*                   levels of interrupts.  However, this method assumes that the compiler provides C-level
N*                   &/or assembly-level functionality for the following :
N*
N*                     ENTER CRITICAL SECTION :
N*                       (a) Save    interrupt status into a local variable
N*                       (b) Disable interrupts
N*
N*                     EXIT  CRITICAL SECTION :
N*                       (c) Restore interrupt status from a local variable
N*
N*           (2) Critical section macro's most likely require inline assembly.  If the compiler does NOT
N*               allow inline assembly in C source files, critical section macro's MUST call an assembly
N*               subroutine defined in a 'cpu_a.asm' file located in the following software directory :
N*
N*                   \<CPU-Compiler Directory>\<cpu>\<compiler>\
N*
X
N*                       where
N*                               <CPU-Compiler Directory>    directory path for common   CPU-compiler software
N*                               <cpu>                       directory name for specific CPU
N*                               <compiler>                  directory name for specific compiler
N*
N*           (3) To save/restore interrupt status, a local variable 'cpu_sr' of type 'CPU_SR' MAY need to
N*               be declared (e.g. if 'CPU_CRITICAL_METHOD_STATUS_LOCAL' method is configured).  Configure
N*               'CPU_SR' data type with the appropriate-sized CPU data type large enough to completely
N*               store the CPU's/compiler's status word.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  CPU_SR;                                    /* Defines   CPU status register size (see Note #3).    */
N
N                                                                /* Configure CPU critical method      (see Note #1) :   */
N#define  CPU_CFG_CRITICAL_METHOD        CPU_CRITICAL_METHOD_STATUS_LOCAL
N
N#define  CPU_CRITICAL_ENTER()           { cpu_sr = CPU_SR_Save(); }
N#define  CPU_CRITICAL_EXIT()            { CPU_SR_Restore(cpu_sr); }
N
N
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid        CPU_IntDis       (void);
Nvoid        CPU_IntEn        (void);
N
Nvoid        CPU_IntSrcDis    (CPU_INT08U  pos);
Nvoid        CPU_IntSrcEn     (CPU_INT08U  pos);
NCPU_INT16S  CPU_IntSrcPrioGet(CPU_INT08U  pos);
Nvoid        CPU_IntSrcPrioSet(CPU_INT08U  pos,
N                              CPU_INT08U  prio);
N
NCPU_SR      CPU_SR_Save      (void);
Nvoid        CPU_SR_Restore   (CPU_SR      cpu_sr);
N
NCPU_INT32U  CPU_CntLeadZeros (CPU_INT32U  val);
NCPU_INT32U  CPU_RevBits      (CPU_INT32U  val);
N
Nvoid        CPU_WaitForInt   (void);
Nvoid        CPU_WaitForExcept(void);
N
Nvoid        CPU_BitBandClr   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
Nvoid        CPU_BitBandSet   (CPU_ADDR    addr,
N                              CPU_INT08U  bit_nbr);
N
N/*
N*********************************************************************************************************
N*                                           INTERRUPT SOURCES
N*********************************************************************************************************
N*/
N
N#define  CPU_INT_STK_PTR                                   0
N#define  CPU_INT_RESET                                     1
N#define  CPU_INT_NMI                                       2
N#define  CPU_INT_HFAULT                                    3
N#define  CPU_INT_MEM                                       4
N#define  CPU_INT_BUSFAULT                                  5
N#define  CPU_INT_USAGEFAULT                                6
N#define  CPU_INT_RSVD_07                                   7
N#define  CPU_INT_RSVD_08                                   8
N#define  CPU_INT_RSVD_09                                   9
N#define  CPU_INT_RSVD_10                                  10
N#define  CPU_INT_SVCALL                                   11
N#define  CPU_INT_DBGMON                                   12
N#define  CPU_INT_RSVD_13                                  13
N#define  CPU_INT_PENDSV                                   14
N#define  CPU_INT_SYSTICK                                  15
N
N
N/*
N*********************************************************************************************************
N*                                             CPU REGISTERS
N*********************************************************************************************************
N*/
N
N#define  CPU_REG_NVIC_NVIC              (*((volatile CPU_INT32U *)(0xE000E004))) /* Int Ctrl'er Type Reg.               */
N#define  CPU_REG_NVIC_ST_CTRL           (*((volatile CPU_INT32U *)(0xE000E010))) /* SysTick Ctrl & Status Reg.          */
N#define  CPU_REG_NVIC_ST_RELOAD         (*((volatile CPU_INT32U *)(0xE000E014))) /* SysTick Reload      Value Reg.      */
N#define  CPU_REG_NVIC_ST_CURRENT        (*((volatile CPU_INT32U *)(0xE000E018))) /* SysTick Current     Value Reg.      */
N#define  CPU_REG_NVIC_ST_CAL            (*((volatile CPU_INT32U *)(0xE000E01C))) /* SysTick Calibration Value Reg.      */
N                                                                                 /* IRQ Set En Reg.                     */
N#define  CPU_REG_NVIC_SETEN(n)          (*((volatile CPU_INT32U *)(0xE000E100 + (n) * 4)))
N                                                                                 /* IRQ Clr En Reg.                     */
N#define  CPU_REG_NVIC_CLREN(n)          (*((volatile CPU_INT32U *)(0xE000E180 + (n) * 4)))
N                                                                                 /* IRQ Set Pending Reg.                */
N#define  CPU_REG_NVIC_SETPEND(n)        (*((volatile CPU_INT32U *)(0xE000E200 + (n) * 4)))
N                                                                                 /* IRQ Clr Pending Reg.                */
N#define  CPU_REG_NVIC_CLRPEND(n)        (*((volatile CPU_INT32U *)(0xE000E280 + (n) * 4)))
N                                                                                 /* IRQ Active Reg.                     */
N#define  CPU_REG_NVIC_ACTIVE(n)         (*((volatile CPU_INT32U *)(0xE000E300 + (n) * 4)))
N                                                                                 /* IRQ Prio Reg.                       */
N#define  CPU_REG_NVIC_PRIO(n)           (*((volatile CPU_INT32U *)(0xE000E400 + (n) * 4)))
N
N#define  CPU_REG_NVIC_CPUID             (*((volatile CPU_INT32U *)(0xE000ED00))) /* CPUID Base Reg.                     */
N#define  CPU_REG_NVIC_ICSR              (*((volatile CPU_INT32U *)(0xE000ED04))) /* Int Ctrl State  Reg.                */
N#define  CPU_REG_NVIC_VTOR              (*((volatile CPU_INT32U *)(0xE000ED08))) /* Vect Tbl Offset Reg.                */
N#define  CPU_REG_NVIC_AIRCR             (*((volatile CPU_INT32U *)(0xE000ED0C))) /* App Int/Reset Ctrl Reg.             */
N#define  CPU_REG_NVIC_SCR               (*((volatile CPU_INT32U *)(0xE000ED10))) /* System Ctrl Reg.                    */
N#define  CPU_REG_NVIC_CCR               (*((volatile CPU_INT32U *)(0xE000ED14))) /* Cfg    Ctrl Reg.                    */
N#define  CPU_REG_NVIC_SHPRI1            (*((volatile CPU_INT32U *)(0xE000ED18))) /* System Handlers  4 to  7 Prio.      */
N#define  CPU_REG_NVIC_SHPRI2            (*((volatile CPU_INT32U *)(0xE000ED1C))) /* System Handlers  8 to 11 Prio.      */
N#define  CPU_REG_NVIC_SHPRI3            (*((volatile CPU_INT32U *)(0xE000ED20))) /* System Handlers 12 to 15 Prio.      */
N#define  CPU_REG_NVIC_SHCSR             (*((volatile CPU_INT32U *)(0xE000ED24))) /* System Handler Ctrl & State Reg.    */
N#define  CPU_REG_NVIC_CFSR              (*((volatile CPU_INT32U *)(0xE000ED28))) /* Configurable Fault Status Reg.      */
N#define  CPU_REG_NVIC_HFSR              (*((volatile CPU_INT32U *)(0xE000ED2C))) /* Hard  Fault Status Reg.             */
N#define  CPU_REG_NVIC_DFSR              (*((volatile CPU_INT32U *)(0xE000ED30))) /* Debug Fault Status Reg.             */
N#define  CPU_REG_NVIC_MMFAR             (*((volatile CPU_INT32U *)(0xE000ED34))) /* Mem Manage Addr Reg.                */
N#define  CPU_REG_NVIC_BFAR              (*((volatile CPU_INT32U *)(0xE000ED38))) /* Bus Fault  Addr Reg.                */
N#define  CPU_REG_NVIC_AFSR              (*((volatile CPU_INT32U *)(0xE000ED3C))) /* Aux Fault Status Reg.               */
N
N#define  CPU_REG_NVIC_PFR0              (*((volatile CPU_INT32U *)(0xE000ED40))) /* Processor Feature Reg 0.            */
N#define  CPU_REG_NVIC_PFR1              (*((volatile CPU_INT32U *)(0xE000ED44))) /* Processor Feature Reg 1.            */
N#define  CPU_REG_NVIC_DFR0              (*((volatile CPU_INT32U *)(0xE000ED48))) /* Debug     Feature Reg 0.            */
N#define  CPU_REG_NVIC_AFR0              (*((volatile CPU_INT32U *)(0xE000ED4C))) /* Aux       Feature Reg 0.            */
N#define  CPU_REG_NVIC_MMFR0             (*((volatile CPU_INT32U *)(0xE000ED50))) /* Memory Model Feature Reg 0.         */
N#define  CPU_REG_NVIC_MMFR1             (*((volatile CPU_INT32U *)(0xE000ED54))) /* Memory Model Feature Reg 1.         */
N#define  CPU_REG_NVIC_MMFR2             (*((volatile CPU_INT32U *)(0xE000ED58))) /* Memory Model Feature Reg 2.         */
N#define  CPU_REG_NVIC_MMFR3             (*((volatile CPU_INT32U *)(0xE000ED5C))) /* Memory Model Feature Reg 3.         */
N#define  CPU_REG_NVIC_ISAFR0            (*((volatile CPU_INT32U *)(0xE000ED60))) /* ISA Feature Reg 0.                  */
N#define  CPU_REG_NVIC_ISAFR1            (*((volatile CPU_INT32U *)(0xE000ED64))) /* ISA Feature Reg 1.                  */
N#define  CPU_REG_NVIC_ISAFR2            (*((volatile CPU_INT32U *)(0xE000ED68))) /* ISA Feature Reg 2.                  */
N#define  CPU_REG_NVIC_ISAFR3            (*((volatile CPU_INT32U *)(0xE000ED6C))) /* ISA Feature Reg 3.                  */
N#define  CPU_REG_NVIC_ISAFR4            (*((volatile CPU_INT32U *)(0xE000ED70))) /* ISA Feature Reg 4.                  */
N#define  CPU_REG_NVIC_SW_TRIG           (*((volatile CPU_INT32U *)(0xE000EF00))) /* Software Trigger Int Reg.           */
N
N#define  CPU_REG_MPU_TYPE               (*((volatile CPU_INT32U *)(0xE000ED90))) /* MPU Type Reg.                       */
N#define  CPU_REG_MPU_CTRL               (*((volatile CPU_INT32U *)(0xE000ED94))) /* MPU Ctrl Reg.                       */
N#define  CPU_REG_MPU_REG_NBR            (*((volatile CPU_INT32U *)(0xE000ED98))) /* MPU Region Nbr Reg.                 */
N#define  CPU_REG_MPU_REG_BASE           (*((volatile CPU_INT32U *)(0xE000ED9C))) /* MPU Region Base Addr Reg.           */
N#define  CPU_REG_MPU_REG_ATTR           (*((volatile CPU_INT32U *)(0xE000EDA0))) /* MPU Region Attrib & Size Reg.       */
N
N#define  CPU_REG_DBG_CTRL               (*((volatile CPU_INT32U *)(0xE000EDF0))) /* Debug Halting Ctrl & Status Reg.    */
N#define  CPU_REG_DBG_SELECT             (*((volatile CPU_INT32U *)(0xE000EDF4))) /* Debug Core Reg Selector Reg.        */
N#define  CPU_REG_DBG_DATA               (*((volatile CPU_INT32U *)(0xE000EDF8))) /* Debug Core Reg Data     Reg.        */
N#define  CPU_REG_DBG_INT                (*((volatile CPU_INT32U *)(0xE000EDFC))) /* Debug Except & Monitor Ctrl Reg.    */
N
N/*
N*********************************************************************************************************
N*                                          CPU REGISTER BITS
N*********************************************************************************************************
N*/
N
N                                                                /* ---------- SYSTICK CTRL & STATUS REG BITS ---------- */
N#define  CPU_REG_NVIC_ST_CTRL_COUNTFLAG         DEF_BIT_16
N#define  CPU_REG_NVIC_ST_CTRL_CLKSOURCE         DEF_BIT_02
N#define  CPU_REG_NVIC_ST_CTRL_TICKINT           DEF_BIT_01
N#define  CPU_REG_NVIC_ST_CTRL_ENABLE            DEF_BIT_00
N
N
N                                                                /* -------- SYSTICK CALIBRATION VALUE REG BITS -------- */
N#define  CPU_REG_NVIC_ST_CAL_NOREF              DEF_BIT_31
N#define  CPU_REG_NVIC_ST_CAL_SKEW               DEF_BIT_30
N
N                                                                /* -------------- INT CTRL STATE REG BITS ------------- */
N#define  CPU_REG_NVIC_ICSR_NMIPENDSET           DEF_BIT_31
N#define  CPU_REG_NVIC_ICSR_PENDSVSET            DEF_BIT_28
N#define  CPU_REG_NVIC_ICSR_PENDSVCLR            DEF_BIT_27
N#define  CPU_REG_NVIC_ICSR_PENDSTSET            DEF_BIT_26
N#define  CPU_REG_NVIC_ICSR_PENDSTCLR            DEF_BIT_25
N#define  CPU_REG_NVIC_ICSR_ISRPREEMPT           DEF_BIT_23
N#define  CPU_REG_NVIC_ICSR_ISRPENDING           DEF_BIT_22
N#define  CPU_REG_NVIC_ICSR_RETTOBASE            DEF_BIT_11
N
N                                                                /* ------------- VECT TBL OFFSET REG BITS ------------- */
N#define  CPU_REG_NVIC_VTOR_TBLBASE              DEF_BIT_29
N
N                                                                /* ------------ APP INT/RESET CTRL REG BITS ----------- */
N#define  CPU_REG_NVIC_AIRCR_ENDIANNESS          DEF_BIT_15
N#define  CPU_REG_NVIC_AIRCR_SYSRESETREQ         DEF_BIT_02
N#define  CPU_REG_NVIC_AIRCR_VECTCLRACTIVE       DEF_BIT_01
N#define  CPU_REG_NVIC_AIRCR_VECTRESET           DEF_BIT_00
N
N                                                                /* --------------- SYSTEM CTRL REG BITS --------------- */
N#define  CPU_REG_NVIC_SCR_SEVONPEND             DEF_BIT_04
N#define  CPU_REG_NVIC_SCR_SLEEPDEEP             DEF_BIT_02
N#define  CPU_REG_NVIC_SCR_SLEEPONEXIT           DEF_BIT_01
N
N                                                                /* ----------------- CFG CTRL REG BITS ---------------- */
N#define  CPU_REG_NVIC_CCR_STKALIGN              DEF_BIT_09
N#define  CPU_REG_NVIC_CCR_BFHFNMIGN             DEF_BIT_08
N#define  CPU_REG_NVIC_CCR_DIV_0_TRP             DEF_BIT_04
N#define  CPU_REG_NVIC_CCR_UNALIGN_TRP           DEF_BIT_03
N#define  CPU_REG_NVIC_CCR_USERSETMPEND          DEF_BIT_01
N#define  CPU_REG_NVIC_CCR_NONBASETHRDENA        DEF_BIT_00
N
N                                                                /* ------- SYSTEM HANDLER CTRL & STATE REG BITS ------- */
N#define  CPU_REG_NVIC_SHCSR_USGFAULTENA         DEF_BIT_18
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTENA         DEF_BIT_17
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTENA         DEF_BIT_16
N#define  CPU_REG_NVIC_SHCSR_SVCALLPENDED        DEF_BIT_15
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTPENDED      DEF_BIT_14
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTPENDED      DEF_BIT_13
N#define  CPU_REG_NVIC_SHCSR_USGFAULTPENDED      DEF_BIT_12
N#define  CPU_REG_NVIC_SHCSR_SYSTICKACT          DEF_BIT_11
N#define  CPU_REG_NVIC_SHCSR_PENDSVACT           DEF_BIT_10
N#define  CPU_REG_NVIC_SHCSR_MONITORACT          DEF_BIT_08
N#define  CPU_REG_NVIC_SHCSR_SVCALLACT           DEF_BIT_07
N#define  CPU_REG_NVIC_SHCSR_USGFAULTACT         DEF_BIT_03
N#define  CPU_REG_NVIC_SHCSR_BUSFAULTACT         DEF_BIT_01
N#define  CPU_REG_NVIC_SHCSR_MEMFAULTACT         DEF_BIT_00
N
N                                                                /* -------- CONFIGURABLE FAULT STATUS REG BITS -------- */
N#define  CPU_REG_NVIC_CFSR_DIVBYZERO            DEF_BIT_25
N#define  CPU_REG_NVIC_CFSR_UNALIGNED            DEF_BIT_24
N#define  CPU_REG_NVIC_CFSR_NOCP                 DEF_BIT_19
N#define  CPU_REG_NVIC_CFSR_INVPC                DEF_BIT_18
N#define  CPU_REG_NVIC_CFSR_INVSTATE             DEF_BIT_17
N#define  CPU_REG_NVIC_CFSR_UNDEFINSTR           DEF_BIT_16
N#define  CPU_REG_NVIC_CFSR_BFARVALID            DEF_BIT_15
N#define  CPU_REG_NVIC_CFSR_STKERR               DEF_BIT_12
N#define  CPU_REG_NVIC_CFSR_UNSTKERR             DEF_BIT_11
N#define  CPU_REG_NVIC_CFSR_IMPRECISERR          DEF_BIT_10
N#define  CPU_REG_NVIC_CFSR_PRECISERR            DEF_BIT_09
N#define  CPU_REG_NVIC_CFSR_IBUSERR              DEF_BIT_08
N#define  CPU_REG_NVIC_CFSR_MMARVALID            DEF_BIT_07
N#define  CPU_REG_NVIC_CFSR_MSTKERR              DEF_BIT_04
N#define  CPU_REG_NVIC_CFSR_MUNSTKERR            DEF_BIT_03
N#define  CPU_REG_NVIC_CFSR_DACCVIOL             DEF_BIT_01
N#define  CPU_REG_NVIC_CFSR_IACCVIOL             DEF_BIT_00
N
N                                                                /* ------------ HARD FAULT STATUS REG BITS ------------ */
N#define  CPU_REG_NVIC_HFSR_DEBUGEVT             DEF_BIT_31
N#define  CPU_REG_NVIC_HFSR_FORCED               DEF_BIT_30
N#define  CPU_REG_NVIC_HFSR_VECTTBL              DEF_BIT_01
N
N                                                                /* ------------ DEBUG FAULT STATUS REG BITS ----------- */
N#define  CPU_REG_NVIC_DFSR_EXTERNAL             DEF_BIT_04
N#define  CPU_REG_NVIC_DFSR_VCATCH               DEF_BIT_03
N#define  CPU_REG_NVIC_DFSR_DWTTRAP              DEF_BIT_02
N#define  CPU_REG_NVIC_DFSR_BKPT                 DEF_BIT_01
N#define  CPU_REG_NVIC_DFSR_HALTED               DEF_BIT_00
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef   CPU_CFG_ADDR_SIZE
S#error   "CPU_CFG_ADDR_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_ADDR_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_ADDR_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N#ifndef   CPU_CFG_DATA_SIZE
S#error   "CPU_CFG_DATA_SIZE              not #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
S
S#elif   ((CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_08) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_16) && \
S         (CPU_CFG_DATA_SIZE != CPU_WORD_SIZE_32))
X#elif   ((4 != 1) &&          (4 != 2) &&          (4 != 4))
S#error   "CPU_CFG_DATA_SIZE        illegally #define'd in 'cpu.h'               "
S#error   "                         [MUST be  CPU_WORD_SIZE_08   8-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_16  16-bit alignment]"
S#error   "                         [     ||  CPU_WORD_SIZE_32  32-bit alignment]"
N#endif
N
N
N
N#ifndef   CPU_CFG_ENDIAN_TYPE
S#error   "CPU_CFG_ENDIAN_TYPE            not #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
S
S#elif   ((CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_BIG   ) && \
S         (CPU_CFG_ENDIAN_TYPE != CPU_ENDIAN_TYPE_LITTLE))
X#elif   ((2 != 1   ) &&          (2 != 2))
S#error   "CPU_CFG_ENDIAN_TYPE      illegally #define'd in 'cpu.h'   "
S#error   "                         [MUST be  CPU_ENDIAN_TYPE_BIG   ]"
S#error   "                         [     ||  CPU_ENDIAN_TYPE_LITTLE]"
N#endif
N
N
N
N
N#ifndef   CPU_CFG_CRITICAL_METHOD
S#error   "CPU_CFG_CRITICAL_METHOD        not #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
S
S#elif   ((CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_INT_DIS_EN  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_STK  ) && \
S         (CPU_CFG_CRITICAL_METHOD != CPU_CRITICAL_METHOD_STATUS_LOCAL))
X#elif   ((3 != 1  ) &&          (3 != 2  ) &&          (3 != 3))
S#error   "CPU_CFG_CRITICAL_METHOD  illegally #define'd in 'cpu.h'             "
S#error   "                         [MUST be  CPU_CRITICAL_METHOD_INT_DIS_EN  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_STK  ]"
S#error   "                         [     ||  CPU_CRITICAL_METHOD_STATUS_LOCAL]"
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of CPU cfg module inclusion.                     */
L 89 "..\..\..\..\..\uC-LIB\lib_mem.h" 2
N#include  <lib_def.h>
L 1 "..\..\..\..\..\uC-LIB\lib_def.h" 1
N/*
N*********************************************************************************************************
N*                                               uC/LIB
N*                                       CUSTOM LIBRARY MODULES
N*
N*                          (c) Copyright 2004-2008; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*
N*               uC/LIB is provided in source form for FREE evaluation, for educational
N*               use or peaceful research.  If you plan on using uC/LIB in a commercial
N*               product you need to contact Micrium to properly license its use in your
N*               product.  We provide ALL the source code for your convenience and to
N*               help you experience uC/LIB.  The fact that the source code is provided
N*               does NOT mean that you can use it without paying a licensing fee.
N*
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                     CORE CUSTOM LIBRARY MODULE
N*
N* Filename      : lib_def.h
N* Version       : V1.25
N* Programmer(s) : ITJ
N*********************************************************************************************************
N* Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
N*
N*                     (a) ALL standard library functions are implemented in the custom library modules :
N*
N*                         (1) \<Custom Library Directory>\lib*.*
N*
N*                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
N*
N*                               where
N*                                       <Custom Library Directory>      directory path for custom library software
N*                                       <cpu>                           directory name for specific processor (CPU)
N*                                       <compiler>                      directory name for specific compiler
N*
N*                     (b) Product-specific library functions are implemented in individual products.
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                               MODULE
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_DEF_MODULE_PRESENT
N#define  LIB_DEF_MODULE_PRESENT
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                CUSTOM LIBRARY MODULE VERSION NUMBER
N*
N* Note(s) : (1) (a) The custom library module software version is denoted as follows :
N*
N*                       Vx.yy
N*
N*                           where
N*                                   V               denotes 'Version' label
N*                                   x               denotes major software version revision number
N*                                   yy              denotes minor software version revision number
N*
N*               (b) The software version label #define is formatted as follows :
N*
N*                       ver = x.yy * 100
N*
N*                           where
N*                                   ver             denotes software version number scaled as an integer value
N*                                   x.yy            denotes software version number
N*********************************************************************************************************
N*/
N
N#define  LIB_VERSION                                     124u   /* See Note #1.                                         */
N
N
N/*
N*********************************************************************************************************
N*                                            INCLUDE FILES
N*
N* Note(s) : (1) The following common software files are located in the following directories :
N*
N*               (a) \<Custom Library Directory>\lib*.*
N*
N*               (b) (1) \<CPU-Compiler Directory>\cpu_def.h
N*
N*                   (2) \<CPU-Compiler Directory>\<cpu>\<compiler>\cpu*.*
N*
N*                           where
N*                                   <Custom Library Directory>      directory path for custom   library      software
N*                                   <CPU-Compiler Directory>        directory path for common   CPU-compiler software
N*                                   <cpu>                           directory name for specific processor (CPU)
N*                                   <compiler>                      directory name for specific compiler
N*
N*           (2) Compiler MUST be configured to include the '\<Custom Library Directory>\uC-LIB\',
N*               '\<CPU-Compiler Directory>\' directory, & the specific CPU-compiler directory as 
N*               additional include path directories.
N*********************************************************************************************************
N*/
N
N#include  <cpu.h>
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          STANDARD DEFINES
N*********************************************************************************************************
N*/
N
N
N#define  DEF_DISABLED                                      0
N#define  DEF_ENABLED                                       1
N
N#define  DEF_FALSE                                         0
N#define  DEF_TRUE                                          1
N
N#define  DEF_NO                                            0
N#define  DEF_YES                                           1
N
N#define  DEF_OFF                                           0
N#define  DEF_ON                                            1
N
N#define  DEF_CLR                                           0
N#define  DEF_SET                                           1
N
N#define  DEF_ACTIVE                                        0
N#define  DEF_INACTIVE                                      1
N
N#define  DEF_FAIL                                          0
N#define  DEF_OK                                            1
N
N
N                                                                /* -------------------- BIT DEFINES ------------------- */
N#define  DEF_BIT_NONE                                   0x00
N
N#define  DEF_BIT_00                                     0x01
N#define  DEF_BIT_01                                     0x02
N#define  DEF_BIT_02                                     0x04
N#define  DEF_BIT_03                                     0x08
N#define  DEF_BIT_04                                     0x10
N#define  DEF_BIT_05                                     0x20
N#define  DEF_BIT_06                                     0x40
N#define  DEF_BIT_07                                     0x80
N
N#define  DEF_BIT_08                                   0x0100
N#define  DEF_BIT_09                                   0x0200
N#define  DEF_BIT_10                                   0x0400
N#define  DEF_BIT_11                                   0x0800
N#define  DEF_BIT_12                                   0x1000
N#define  DEF_BIT_13                                   0x2000
N#define  DEF_BIT_14                                   0x4000
N#define  DEF_BIT_15                                   0x8000
N
N#define  DEF_BIT_16                               0x00010000
N#define  DEF_BIT_17                               0x00020000
N#define  DEF_BIT_18                               0x00040000
N#define  DEF_BIT_19                               0x00080000
N#define  DEF_BIT_20                               0x00100000
N#define  DEF_BIT_21                               0x00200000
N#define  DEF_BIT_22                               0x00400000
N#define  DEF_BIT_23                               0x00800000
N
N#define  DEF_BIT_24                               0x01000000
N#define  DEF_BIT_25                               0x02000000
N#define  DEF_BIT_26                               0x04000000
N#define  DEF_BIT_27                               0x08000000
N#define  DEF_BIT_28                               0x10000000
N#define  DEF_BIT_29                               0x20000000
N#define  DEF_BIT_30                               0x40000000
N#define  DEF_BIT_31                               0x80000000
N
N                                                                /* ------------------- OCTET DEFINES ------------------ */
N#define  DEF_OCTET_NBR_BITS                                8
N#define  DEF_OCTET_MASK                                 0xFF
N
N#define  DEF_NIBBLE_NBR_BITS                               4
N#define  DEF_NIBBLE_MASK                                0x0F
N
N
N/*$PAGE*/
N                                                                /* ------------------ INTEGER DEFINES ----------------- */
N#define  DEF_INT_08_NBR_BITS                               8
N#define  DEF_INT_08_MASK                                0xFF
N                                                            
N#define  DEF_INT_08U_MIN_VAL                               0u
N#define  DEF_INT_08U_MAX_VAL                             255u
N
N#define  DEF_INT_08S_MIN_VAL                            -128
N#define  DEF_INT_08S_MAX_VAL                             127
N
N#define  DEF_INT_08S_MIN_VAL_ONES_CPL                   -127
N#define  DEF_INT_08S_MAX_VAL_ONES_CPL                    127
N
N
N#define  DEF_INT_16_NBR_BITS                              16
N#define  DEF_INT_16_MASK                              0xFFFF
N                                                            
N#define  DEF_INT_16U_MIN_VAL                               0u
N#define  DEF_INT_16U_MAX_VAL                           65535u
N
N#define  DEF_INT_16S_MIN_VAL                          -32768
N#define  DEF_INT_16S_MAX_VAL                           32767
N
N#define  DEF_INT_16S_MIN_VAL_ONES_CPL                 -32767
N#define  DEF_INT_16S_MAX_VAL_ONES_CPL                  32767
N
N
N#define  DEF_INT_32_NBR_BITS                              32
N#define  DEF_INT_32_MASK                          0xFFFFFFFF
N                                                            
N#define  DEF_INT_32U_MIN_VAL                               0u
N#define  DEF_INT_32U_MAX_VAL                      4294967295u
N
N#define  DEF_INT_32S_MIN_VAL                     -2147483648
N#define  DEF_INT_32S_MAX_VAL                      2147483647
N
N#define  DEF_INT_32S_MIN_VAL_ONES_CPL            -2147483647
N#define  DEF_INT_32S_MAX_VAL_ONES_CPL             2147483647
N
N
N#define  DEF_INT_64_NBR_BITS                              64
N#define  DEF_INT_64_MASK                  0xFFFFFFFFFFFFFFFF
N                                                            
N#define  DEF_INT_64U_MIN_VAL                               0u
N#define  DEF_INT_64U_MAX_VAL            18446744073709551615u
N
N#define  DEF_INT_64S_MIN_VAL            -9223372036854775808
N#define  DEF_INT_64S_MAX_VAL             9223372036854775807
N
N#define  DEF_INT_64S_MIN_VAL_ONES_CPL   -9223372036854775807
N#define  DEF_INT_64S_MAX_VAL_ONES_CPL    9223372036854775807
N
N
N/*$PAGE*/
N                                                                /* ---------------- CPU INTEGER DEFINES --------------- */
N#define  DEF_INT_CPU_NBR_BITS                           (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS)
N
N
N#if     (DEF_INT_CPU_NBR_BITS == DEF_INT_08_NBR_BITS)
X#if     ((4 * 8) == 8)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_08_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_08U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_08U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_08S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_08S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_08S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_08S_MAX_VAL_ONES_CPL
S
S
S#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_16_NBR_BITS)
X#elif   ((4 * 8) == 16)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_16_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_16U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_16U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_16S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_16S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_16S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_16S_MAX_VAL_ONES_CPL
S
S
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_32_NBR_BITS)
X#elif   ((4 * 8) == 32)
N
N#define  DEF_INT_CPU_MASK                                DEF_INT_32_MASK
N                                                    
N#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_32U_MIN_VAL
N#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_32U_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_32S_MIN_VAL
N#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_32S_MAX_VAL
N
N#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_32S_MIN_VAL_ONES_CPL
N#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_32S_MAX_VAL_ONES_CPL
N
N
N#elif   (DEF_INT_CPU_NBR_BITS == DEF_INT_64_NBR_BITS)
S
S#define  DEF_INT_CPU_MASK                                DEF_INT_64_MASK
S                                                                   
S#define  DEF_INT_CPU_U_MIN_VAL                           DEF_INT_64U_MIN_VAL
S#define  DEF_INT_CPU_U_MAX_VAL                           DEF_INT_64U_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL                           DEF_INT_64S_MIN_VAL
S#define  DEF_INT_CPU_S_MAX_VAL                           DEF_INT_64S_MAX_VAL
S
S#define  DEF_INT_CPU_S_MIN_VAL_ONES_CPL                  DEF_INT_64S_MIN_VAL_ONES_CPL
S#define  DEF_INT_CPU_S_MAX_VAL_ONES_CPL                  DEF_INT_64S_MAX_VAL_ONES_CPL
S                                                      
S
S#else
S
S#error  "CPU_CFG_DATA_SIZE  illegally #defined in 'cpu.h'      "
S#error  "                   [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N                                                                /* ------------------- TIME DEFINES ------------------- */
N#define  DEF_TIME_NBR_HR_PER_DAY                          24uL
N
N#define  DEF_TIME_NBR_MIN_PER_HR                          60uL
N#define  DEF_TIME_NBR_MIN_PER_DAY                       (DEF_TIME_NBR_MIN_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_SEC_PER_MIN                         60uL
N#define  DEF_TIME_NBR_SEC_PER_HR                        (DEF_TIME_NBR_SEC_PER_MIN * DEF_TIME_NBR_MIN_PER_HR)
N#define  DEF_TIME_NBR_SEC_PER_DAY                       (DEF_TIME_NBR_SEC_PER_HR  * DEF_TIME_NBR_HR_PER_DAY)
N
N#define  DEF_TIME_NBR_mS_PER_SEC                        1000uL
N#define  DEF_TIME_NBR_uS_PER_SEC                     1000000uL
N#define  DEF_TIME_NBR_nS_PER_SEC                  1000000000uL
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             ERROR CODES
N*
N* Note(s) : (1) All generic library error codes are #define'd in 'lib_def.h';
N*               Any module-specific error codes are #define'd in library module header files.
N*********************************************************************************************************
N*/
N
N#define  LIB_ERR_NONE                                      0
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U  LIB_ERR;
N
N
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             BIT MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_BIT()
N*
N* Description : Create bit mask with single, specified bit set.
N*
N* Argument(s) : bit         Bit number of bit to set.
N*
N* Return(s)   : Bit mask with single, specified bit set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT(bit)                            (1u << (bit))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_MASK()
N*
N* Description : Shift a bit mask.
N*
N* Argument(s) : bit_mask    Bit mask to shift.
N*
N*               bit_shift   Number of bit positions to left-shift bit mask.
N*
N* Return(s)   : Shifted bit mask.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_shift' values that overflow the target CPU &/or compiler environment (e.g. negative
N*                   or greater-than-CPU-data-size values) MAY generate compiler warnings &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_MASK(bit_mask, bit_shift)             ((bit_mask)       << (bit_shift))
N
N
N/*
N*********************************************************************************************************
N*                                           DEF_BIT_FIELD()
N*
N* Description : Create & shift a contiguous bit field.
N*
N* Argument(s) : bit_field   Number of contiguous bits to set in the bit field.
N*
N*               bit_shift   Number of bit positions   to left-shift bit field.
N*
N* Return(s)   : Shifted bit field.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) 'bit_field'/'bit_shift' values that overflow the target CPU &/or compiler environment 
N*                   (e.g. negative or greater-than-CPU-data-size values) MAY generate compiler warnings
N*                   &/or errors.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)   \
N                                                                                             : (DEF_BIT(bit_field) - 1)) \
N                                                                                                    << (bit_shift))
X#define  DEF_BIT_FIELD(bit_field, bit_shift)         ((((bit_field) >= DEF_INT_CPU_NBR_BITS) ? (DEF_INT_CPU_U_MAX_VAL)                                                                                                : (DEF_BIT(bit_field) - 1))                                                                                                     << (bit_shift))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_SET()
N*
N* Description : Set specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by setting specified bit(s).
N*
N*               mask        Mask of bits to set.
N*
N* Return(s)   : Modified value with specified bit(s) set.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_SET(val, mask)                       { (val) |=  (mask); }
N
N
N/*
N*********************************************************************************************************
N*                                            DEF_BIT_CLR()
N*
N* Description : Clear specified bit(s) in a value.
N*
N* Argument(s) : val         Value to modify by clearing specified bit(s).
N*
N*               mask        Mask of bits to clear.
N*
N* Return(s)   : Modified value with specified bit(s) clear.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_CLR(val, mask)                       { (val) &= ~(mask); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_SET()
N*
N* Description : Determine if specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET(val, mask)                   ((((val) & (mask)) == (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                          DEF_BIT_IS_CLR()
N*
N* Description : Determine if specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ALL specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR(val, mask)                    (((val) & (mask))            ? (DEF_NO ) : (DEF_YES))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_SET_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are set.
N*
N* Argument(s) : val         Value to check for specified bit(s) set.
N*
N*               mask        Mask of bits to check if set.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     set in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT set in value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_SET_ANY(val, mask)                (((val) & (mask))            ? (DEF_YES) : (DEF_NO ))
N
N
N/*
N*********************************************************************************************************
N*                                        DEF_BIT_IS_CLR_ANY()
N*
N* Description : Determine if any specified bit(s) in a value are clear.
N*
N* Argument(s) : val         Value to check for specified bit(s) clear.
N*
N*               mask        Mask of bits to check if clear.
N*
N* Return(s)   : DEF_YES, if ANY specified bit(s) are     clear in value.
N*     
N*               DEF_NO,	 if ALL specified bit(s) are NOT clear in value.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_BIT_IS_CLR_ANY(val, mask)               ((((val) & (mask)) != (mask)) ? (DEF_YES) : (DEF_NO ))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            MATH MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                              DEF_MIN()
N*
N* Description : Determine the minimum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Minimum of the two values.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MIN(a, b)                                  (((a) < (b)) ? (a) : (b))
N
N
N/*
N*********************************************************************************************************
N*                                              DEF_MAX()
N*
N* Description : Determine the maximum of two values.
N*
N* Argument(s) : a           First  value.
N*
N*               b           Second value.
N*
N* Return(s)   : Maximum of the two values.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_MAX(a, b)                                  (((a) > (b)) ? (a) : (b))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              DEF_ABS()
N*
N* Description : Determine the absolute value of a value.
N*
N* Argument(s) : a           Value to calculate absolute value.
N*
N* Return(s)   : Absolute value of the value.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#define  DEF_ABS(a)                                     (((a) < 0) ? (-(a)) : (a))
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib def module include.                       */
N
L 90 "..\..\..\..\..\uC-LIB\lib_mem.h" 2
N#include  <app_cfg.h>
L 1 ".\app_cfg.h" 1
N/*
N*********************************************************************************************************
N*                                              EXAMPLE CODE
N*
N*                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
N*
N*               All rights reserved.  Protected by international copyright laws.
N*               Knowledge of the source code may NOT be used to develop a similar product.
N*               Please help us continue to provide the Embedded community with the finest
N*               software available.  Your honesty is greatly appreciated.
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*
N*                                      APPLICATION CONFIGURATION
N*
N*                                     ST Microelectronics STM32
N*                                              with the
N*                                   STM3210B-LK1 Evaluation Board
N*
N* Filename      : app_cfg.h
N* Version       : V1.10
N* Programmer(s) : BH3NVN
N*********************************************************************************************************
N*/
N
N#ifndef  __APP_CFG_H__
N#define  __APP_CFG_H__
N
N/*
N*********************************************************************************************************
N*                                       MODULE ENABLE / DISABLE
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                              TASKS NAMES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            TASK PRIORITIES
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_PRIO                               2
N#define  APP_TASK_UART_PRIO                                7
N#define  APP_TASK_KBD_PRIO                                 4
N#define  APP_TASK_KEY_PRIO                                 5
N#define  APP_TASK_LED_PRIO                                 6
N
N
N
N/*
N*********************************************************************************************************
N*                                            TASK STACK SIZES
N*                             Size of the task stacks (# of OS_STK entries)
N*********************************************************************************************************
N*/
N
N#define  APP_TASK_START_STK_SIZE                         128
N#define  APP_TASK_KBD_STK_SIZE                           128
N#define  APP_TASK_KEY_STK_SIZE                           128
N#define  APP_TASK_LED_STK_SIZE                           128
N#define  APP_TASK_UART_STK_SIZE                         128
N
N/*
N*********************************************************************************************************
N*                                                  LIB
N*********************************************************************************************************
N*/
N
N#define  uC_CFG_OPTIMIZE_ASM_EN                 DEF_ENABLED
N#define  LIB_STR_CFG_FP_EN                      DEF_DISABLED
N
N#endif
L 91 "..\..\..\..\..\uC-LIB\lib_mem.h" 2
N
N
N/*
N*********************************************************************************************************
N*                                               EXTERNS
N*********************************************************************************************************
N*/
N
N#ifdef   LIB_MEM_MODULE
N#define  LIB_MEM_EXT
N#else
S#define  LIB_MEM_EXT  extern
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        DEFAULT CONFIGURATION
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                             MEMORY LIBRARY ARGUMENT CHECK CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_ARG_CHK_EXT_EN to enable/disable the memory libray suite external
N*               argument check feature :
N*
N*               (a) When ENABLED,      arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*
N*               (b) When DISABLED, NO  arguments received from any port interface provided by the developer
N*                   or application are checked/validated.
N*********************************************************************************************************
N*/
N                                                        /* Configure external argument check feature (see Note #1) :    */
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
N#define  LIB_MEM_CFG_ARG_CHK_EXT_EN     DEF_DISABLED
N                                                        /*   DEF_DISABLED     Argument check DISABLED                   */
N                                                        /*   DEF_ENABLED      Argument check ENABLED                    */
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL CONFIGURATION
N*
N* Note(s) : (1) Configure LIB_MEM_CFG_POOL_EN to enable/disable memory pool functions.
N*********************************************************************************************************
N*/
N                                                        /* Configure memory pool feature (see Note #1) :                */
N#ifndef  LIB_MEM_CFG_POOL_EN
N#define  LIB_MEM_CFG_POOL_EN            DEF_DISABLED
N                                                        /*   DEF_DISABLED     Memory pool(s) DISABLED                   */
N                                                        /*   DEF_ENABLED      Memory pool(s) ENABLED                    */
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                               DEFINES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      LIBRARY MEMORY ERROR CODES
N*********************************************************************************************************
N*/
N
N#define  LIB_MEM_ERR_NONE                              10000
N#define  LIB_MEM_ERR_NULL_PTR                          10001    /* Ptr arg(s) passed NULL ptr(s).                       */
N#define  LIB_MEM_ERR_NONE_AVAIL                        10010    /* NO avail mem rsrc's.                                 */
N
N#define  LIB_MEM_ERR_INVALID_SEG_SIZE                  10100    /* Invalid mem seg size.                                */
N#define  LIB_MEM_ERR_INVALID_SEG_OVERLAP               10101    /* Invalid mem seg overlaps other mem seg(s).           */
N#define  LIB_MEM_ERR_INVALID_POOL                      10102    /* Invalid mem pool.                                    */
N#define  LIB_MEM_ERR_INVALID_ADDR                      10103    /* Invalid mem pool addr.                               */
N#define  LIB_MEM_ERR_INVALID_BLK_NBR                   10104    /* Invalid mem pool blk nbr.                            */
N#define  LIB_MEM_ERR_INVALID_BLK_SIZE                  10105    /* Invalid mem pool blk size.                           */
N#define  LIB_MEM_ERR_INVALID_BLK_IX                    10106    /* Invalid mem pool ix.                                 */
N
N#define  LIB_MEM_ERR_SEG_EMPTY                         10110    /* Mem seg  empty; i.e. NO avail mem for mem pools.     */
N#define  LIB_MEM_ERR_POOL_FULL                         10111    /* Mem pool full;  i.e. All mem blks avail in mem pool. */
N
N#define  LIB_MEM_ERR_HEAP_NOT_FOUND                    10115    /* Heap seg NOT found.                                  */
N#define  LIB_MEM_ERR_HEAP_EMPTY                        10116    /* Heap seg empty; i.e. NO avail mem in heap.           */
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                     MEMORY LIBRARY TYPE DEFINES
N*
N* Note(s) : (1) LIB_MEM_TYPE_??? #define values specifically chosen as ASCII representations of the memory
N*               library types.  Memory displays of memory library objects will display the library TYPEs
N*               with their chosen ASCII names.
N**********************************************************************************************************/
N
N                                                                /* ------------------- LIB_MEM TYPES ------------------ */
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#else
N
N#if     (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_32)
X#if     (4   == 4)
N#define  LIB_MEM_TYPE_NONE                        0x454E4F4E    /* "NONE" in ASCII.                                     */
N#define  LIB_MEM_TYPE_HEAP                        0x50414548    /* "HEAP" in ASCII.                                     */
N#define  LIB_MEM_TYPE_POOL                        0x4C4F4F50    /* "POOL" in ASCII.                                     */
N
N#elif   (CPU_CFG_DATA_SIZE   == CPU_WORD_SIZE_16)
S#define  LIB_MEM_TYPE_NONE                        0x4F4E454E    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x45485041    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x4F504C4F    /* "POOL" in ASCII.                                     */
S
S#else                                                           /* Dflt CPU_WORD_SIZE_08.                               */
S#define  LIB_MEM_TYPE_NONE                        0x4E4F4E45    /* "NONE" in ASCII.                                     */
S#define  LIB_MEM_TYPE_HEAP                        0x48454150    /* "HEAP" in ASCII.                                     */
S#define  LIB_MEM_TYPE_POOL                        0x504F4F4C    /* "POOL" in ASCII.                                     */
S
N#endif
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             DATA TYPES
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                            LIB MEM TYPE
N*
N* Note(s) : (1) 'LIB_MEM_TYPE' declared as 'CPU_INT32U' & all 'LIB_MEM_TYPE's #define'd with large, non-trivial
N*               values to trap & discard invalid/corrupted library memory objects based on 'LIB_MEM_TYPE'.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT32U  LIB_MEM_TYPE;
N
N
N/*
N*********************************************************************************************************
N*                                      MEMORY POOL TABLE IX TYPE
N*
N* Note(s) : (1) MEM_POOL_IX_NONE  SHOULD be #define'd based on 'MEM_POOL_IX' data type declared.
N*********************************************************************************************************
N*/
N
Ntypedef  CPU_INT16U   MEM_POOL_IX;
N
N#define  MEM_POOL_IX_NONE                DEF_INT_16U_MAX_VAL    /* Define as max unsigned val (see Note #1).            */
N#define  MEM_POOL_IX_MIN                                   1
N#define  MEM_POOL_IX_MAX               (MEM_POOL_IX_NONE - 1)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        MEMORY POOL DATA TYPES
N*
N*                                                                      MEMORY SEGMENT
N*                                                                     ----------------
N*                                            MEMORY POOL'S            |              | <----
N*                                             POINTERS TO             |    MEMORY    |     |
N*                    MEM_POOL                MEMORY BLOCKS            |    BLOCKS    |     |
N*               |----------------|            |---------|             |   --------   |     |
N*               |        O------------------> |    O--------------------> |      |   |     |
N*               |----------------|            |---------|             |   |      |   |     |
N*               | Pool Addr Ptrs |            |    O-------------     |   --------   |     |
N*               | Pool Size      |            |---------|       |     |              |     |
N*               |----------------|            |         |       |     |   --------   |     |
N*               |    Blk Size    |            |         |       --------> |      |   |     |
N*               |    Blk Nbr     |            |         |             |   |      |   |     |
N*               |    Blk Ix      |            |    .    |             |   --------   |     |
N*               |----------------|            |    .    |             |              |     |
N*               |----------------|            |    .    |             |      .       |     |
N*               |        O-----------------   |         |             |      .       |     |
N*               |----------------|        |   |         |             |      .       |     |
N*               |        O------------    |   |         |             |              |     |
N*               |----------------|   |    |   |---------|             |   --------   |     |
N*               |  Seg Size Tot  |   |    |   |    O--------------------> |      |   |     |
N*               |  Seg Size Rem  |   |    |   |---------|             |   |      |   |     |
N*               |----------------|   |    |   |         |             |   --------   |     |
N*               | Seg List Ptrs  |   |    |   |---------|             |              |     |
N*               |----------------|   |    |                           | ------------ |     |
N*                                    |    |                           |              | <--------
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           |              |     |   |
N*                                    |    |                           ----------------     |   |
N*                                    |    |                                                |   |
N*                                    |    --------------------------------------------------   |
N*                                    |                                                         |
N*                                    -----------------------------------------------------------
N*
N*********************************************************************************************************
N*/
N
Ntypedef  struct  mem_pool  MEM_POOL;
N
N                                                                /* --------------------- MEM POOL --------------------- */
Nstruct  mem_pool {
N    LIB_MEM_TYPE    Type;                                       /* Pool type : LIB_TYPE_POOL or LIB_TYPE_HEAP.          */
N
N    MEM_POOL       *SegPrevPtr;                                 /* Ptr to PREV mem seg.                                 */
N    MEM_POOL       *SegNextPtr;                                 /* Ptr to NEXT mem seg.                                 */
N    MEM_POOL       *PoolPrevPtr;                                /* Ptr to PREV mem pool.                                */
N    MEM_POOL       *PoolNextPtr;                                /* Ptr to NEXT mem pool.                                */
N
N    void           *PoolAddrStart;                              /* Ptr   to start of mem seg for mem pool blks.         */
N    void           *PoolAddrEnd;                                /* Ptr   to end   of mem seg for mem pool blks.         */
N    void          **PoolPtrs;                                   /* Ptr   to mem pool's array of blk ptrs.               */
N    MEM_POOL_IX     BlkIx;                                      /* Ix  into mem pool's array of blk ptrs.               */
N    CPU_SIZE_T      PoolSize;                                   /* Size  of mem pool        (in octets).                */
N    CPU_SIZE_T      BlkNbr;                                     /* Nbr   of mem pool   blks.                            */
N    CPU_SIZE_T      BlkSize;                                    /* Size  of mem pool   blks (in octets).                */
N    CPU_SIZE_T      BlkAlign;                                   /* Align of mem pool   blks (in octets).                */
N
N                                                                /* --------------------- MEM SEG ---------------------- */
N    void           *SegAddr;                                    /* Ptr      to mem seg's base/start addr.               */
N    void           *SegAddrNextAvail;                           /* Ptr      to mem seg's next avail addr.               */
N    CPU_SIZE_T      SegSizeTot;                                 /* Tot size of mem seg (in octets).                     */
N    CPU_SIZE_T      SegSizeRem;                                 /* Rem size of mem seg (in octets).                     */
N};
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              MACRO'S
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      MEMORY DATA VALUE MACRO'S
N*
N* Note(s) : (1) (a) Some variables & variable buffers to pass & receive data values MUST start on appropriate
N*                   CPU word-aligned addresses.  This is required because most word-aligned processors are more
N*                   efficient & may even REQUIRE that multi-octet words start on CPU word-aligned addresses.
N*
N*                   (1) For 16-bit word-aligned processors, this means that
N*
N*                           all 16- & 32-bit words MUST start on addresses that are multiples of 2 octets
N*
N*                   (2) For 32-bit word-aligned processors, this means that
N*
N*                           all 16-bit       words MUST start on addresses that are multiples of 2 octets
N*                           all 32-bit       words MUST start on addresses that are multiples of 4 octets
N*
N*               (b) However, some data values macro's appropriately access data values from any CPU addresses,
N*                   word-aligned or not.  Thus for processors that require data word alignment, data words can
N*                   be accessed to/from any CPU address, word-aligned or not, without generating data-word-
N*                   alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_GET_xxx()
N*
N* Description : Decode data values from any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address of data value to decode (see Notes #2 & #3a).
N*
N* Return(s)   : Decoded data value from CPU memory address (see Notes #1 & #3b).
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Decode data values based on the values' data-word order in CPU memory :
N*
N*                       MEM_VAL_GET_xxx_BIG()           Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx_LITTLE()        Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_GET_xxx()               Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_GET_xxx() macro's decode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be decoded from any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, any variable to receive the returned data value MUST start on an appropriate CPU
N*                       word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_GET_INT08U_BIG(addr)             (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_BIG(addr)            ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (0 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_BIG(addr)            ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (3 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (0 * DEF_OCTET_NBR_BITS)))
N
N
N
N#define  MEM_VAL_GET_INT08U_LITTLE(addr)          (((CPU_INT08U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS))
N
N#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT16U_LITTLE(addr)         ((((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT16U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)))
N
N#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) + \
N                                                  (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
X#define  MEM_VAL_GET_INT32U_LITTLE(addr)         ((((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 0))) << (0 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 1))) << (1 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 2))) << (2 * DEF_OCTET_NBR_BITS)) +                                                   (((CPU_INT32U)(*(((CPU_INT08U *)(addr)) + 3))) << (3 * DEF_OCTET_NBR_BITS)))
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_BIG(addr)
S#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_BIG(addr)
S#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_BIG(addr)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_GET_INT08U(addr)                               MEM_VAL_GET_INT08U_LITTLE(addr)
N#define  MEM_VAL_GET_INT16U(addr)                               MEM_VAL_GET_INT16U_LITTLE(addr)
N#define  MEM_VAL_GET_INT32U(addr)                               MEM_VAL_GET_INT32U_LITTLE(addr)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          MEM_VAL_SET_xxx()
N*
N* Description : Encode data values to any CPU memory address.
N*
N* Argument(s) : addr        Lowest CPU memory address to encode data value (see Notes #2 & #3a).
N*
N*               val         Data value to encode (see Notes #1 & #3b).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Encode data values into CPU memory based on the values' data-word order :
N*
N*                       MEM_VAL_SET_xxx_BIG()           Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx_LITTLE()        Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_SET_xxx()               Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) (a) MEM_VAL_SET_xxx() macro's encode data values without regard to CPU word-aligned addresses.
N*                       Thus for processors that require data word alignment, data words can be encoded to any
N*                       CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*
N*                   (b) However, 'val' data value to encode MUST start on an appropriate CPU word-aligned address.
N*
N*                   See also 'MEMORY DATA VALUE MACRO'S  Note #1'.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #4'.
N*
N*               (5) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_SET_INT08U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_BIG(addr, val)                    { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#define  MEM_VAL_SET_INT08U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT08U)(val)) &       0xFF) >> (0 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT16U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0x00FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT16U)(val)) &     0xFF00) >> (1 * DEF_OCTET_NBR_BITS))); }
N
N#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS))); \
N                                                                (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
X#define  MEM_VAL_SET_INT32U_LITTLE(addr, val)                 { (*(((CPU_INT08U *)(addr)) + 0)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x000000FF) >> (0 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 1)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x0000FF00) >> (1 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 2)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0x00FF0000) >> (2 * DEF_OCTET_NBR_BITS)));                                                                 (*(((CPU_INT08U *)(addr)) + 3)) = ((CPU_INT08U)((((CPU_INT32U)(val)) & 0xFF000000) >> (3 * DEF_OCTET_NBR_BITS))); }
N
N
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_BIG(addr, val)
S#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_BIG(addr, val)
S#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_BIG(addr, val)
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N#define  MEM_VAL_SET_INT08U(addr, val)                          MEM_VAL_SET_INT08U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT16U(addr, val)                          MEM_VAL_SET_INT16U_LITTLE(addr, val)
N#define  MEM_VAL_SET_INT32U(addr, val)                          MEM_VAL_SET_INT32U_LITTLE(addr, val)
N
N#else                                                                           /* See Note #5.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_GET_xxx()
N*
N* Description : Copy & decode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/decode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/decode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/decode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_GET_xxx_BIG()      Decode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx_LITTLE()   Decode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_GET_xxx()          Decode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_GET_xxx() macro's copy/decode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   decoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_GET_xxx() macro's are more efficient than MEM_VAL_GET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_GET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets are
N*                   inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_SET_xxx()  Note #5'.
N*
N*               (6) The 'CPU_CFG_ENDIAN_TYPE' pre-processor 'else'-conditional code SHOULD never be compiled/
N*                   linked since each 'cpu.h' SHOULD ensure that the CPU data-word-memory order configuration
N*                   constant (CPU_CFG_ENDIAN_TYPE) is configured with an appropriate data-word-memory order
N*                   value (see 'cpu.h  CPU WORD CONFIGURATION  Note #2').  The 'else'-conditional code is
N*                   included as an extra precaution in case 'cpu.h' is incorrectly configured.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N
N#if     (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_BIG)
X#if     (2 == 1)
S
S
S#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
S                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
S
S
S
S#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
S#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
S
S
S
S
N#elif   (CPU_CFG_ENDIAN_TYPE == CPU_ENDIAN_TYPE_LITTLE)
X#elif   (2 == 2)
N
N
N#define  MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
X#define  MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)     { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 3));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)  { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N
N#define  MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N
N
N#else                                                                           /* See Note #6.                         */
S
S#error  "CPU_CFG_ENDIAN_TYPE  illegally #defined in 'cpu.h'      "
S#error  "                     [See 'cpu.h  CONFIGURATION ERRORS']"
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                       MEM_VAL_COPY_SET_xxx()
N*
N* Description : Copy & encode data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy/encode source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy/encode
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Copy/encode data values based on the values' data-word order :
N*
N*                       MEM_VAL_COPY_SET_xxx_BIG()      Encode big-   endian data values -- data words' most
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx_LITTLE()   Encode little-endian data values -- data words' least
N*                                                           significant octet @ lowest memory address
N*                       MEM_VAL_COPY_SET_xxx()          Encode data values using CPU's native or configured
N*                                                           data-word order
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_SET_xxx() macro's copy/encode data values without regard to CPU word-aligned
N*                   addresses.  Thus for processors that require data word alignment, data words can be copied/
N*                   encoded to/from any CPU address, word-aligned or not, without generating data-word-alignment
N*                   exceptions/faults.
N*
N*               (4) MEM_VAL_COPY_SET_xxx() macro's are more efficient than MEM_VAL_SET_xxx() macro's & are
N*                   also independent of CPU data-word-alignment & SHOULD be used whenever possible.
N*
N*                   See also 'MEM_VAL_SET_xxx()  Note #4'.
N*
N*               (5) Since octet-order copy/conversion are inverse operations, memory data value gets/sets
N*                   are inverse operations.
N*
N*                   See also 'MEM_VAL_COPY_GET_xxx()  Note #5'.
N*********************************************************************************************************
N*/
N
N                                                                                /* See Note #5.                         */
N#define  MEM_VAL_COPY_SET_INT08U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT08U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT16U_BIG(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_BIG(addr_dest, addr_src)       MEM_VAL_COPY_GET_INT32U_BIG(addr_dest, addr_src)
N
N#define  MEM_VAL_COPY_SET_INT08U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT08U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT16U_LITTLE(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U_LITTLE(addr_dest, addr_src)    MEM_VAL_COPY_GET_INT32U_LITTLE(addr_dest, addr_src)
N
N
N#define  MEM_VAL_COPY_SET_INT08U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT08U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT16U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT16U(addr_dest, addr_src)
N#define  MEM_VAL_COPY_SET_INT32U(addr_dest, addr_src)           MEM_VAL_COPY_GET_INT32U(addr_dest, addr_src)
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         MEM_VAL_COPY_xxx()
N*
N* Description : Copy data values from any CPU memory address to any CPU memory address.
N*
N* Argument(s) : addr_dest       Lowest CPU memory address to copy source address's data value
N*                                   (see Notes #2 & #3).
N*
N*               addr_src        Lowest CPU memory address of data value to copy
N*                                   (see Notes #2 & #3).
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) MEM_VAL_COPY_xxx() macro's copy data values based on CPU's native data-word order.
N*
N*                   See also 'cpu.h  CPU WORD CONFIGURATION  Note #2'.
N*
N*               (2) CPU memory addresses/pointers NOT checked for NULL.
N*
N*               (3) MEM_VAL_COPY_xxx() macro's copy data values without regard to CPU word-aligned addresses.
N*                   Thus for processors that require data word alignment, data words can be copied to/from any
N*                   CPU address, word-aligned or not, without generating data-word-alignment exceptions/faults.
N*********************************************************************************************************
N*/
N
N#define  MEM_VAL_COPY_08(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); }
N
N#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
X#define  MEM_VAL_COPY_16(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); }
N
N#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2)); \
N                                                                (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
X#define  MEM_VAL_COPY_32(addr_dest, addr_src)                 { (*(((CPU_INT08U *)(addr_dest)) + 0)) = (*(((CPU_INT08U *)(addr_src)) + 0));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 1)) = (*(((CPU_INT08U *)(addr_src)) + 1));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 2)) = (*(((CPU_INT08U *)(addr_src)) + 2));                                                                 (*(((CPU_INT08U *)(addr_dest)) + 3)) = (*(((CPU_INT08U *)(addr_src)) + 3)); }
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
Nvoid          Mem_Init       (void);
N
N                                                                        /* -------------- MEM API  FNCTS -------------- */
Nvoid          Mem_Clr        (void        *pmem,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Set        (void        *pmem,
N                              CPU_INT08U   data_val,
N                              CPU_SIZE_T   size);
N
Nvoid          Mem_Copy       (void        *pdest,
N                              void        *psrc,
N                              CPU_SIZE_T   size);
N
NCPU_BOOLEAN   Mem_Cmp        (void        *p1_mem,
N                              void        *p2_mem,
N                              CPU_SIZE_T   size);
N
N
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)                                /* -------------- MEM POOL FNCTS -------------- */
X#if (0 == 1)                                 
S
Svoid          Mem_PoolCreate (MEM_POOL    *pmem_pool,
S                              void        *pmem_base_addr,
S                              CPU_SIZE_T   mem_size,
S                              CPU_SIZE_T   blk_nbr,
S                              CPU_SIZE_T   blk_size,
S                              CPU_SIZE_T   blk_align,
S                              CPU_SIZE_T  *poctets_reqd,
S                              LIB_ERR     *perr);
S
Svoid         *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
S                              CPU_SIZE_T   size,
S                              LIB_ERR     *perr);
S
Svoid          Mem_PoolBlkFree(MEM_POOL    *pmem_pool,
S                              void        *pmem_blk,
S                              LIB_ERR     *perr);
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                        CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N#ifndef  LIB_MEM_CFG_ARG_CHK_EXT_EN
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN        not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_ARG_CHK_EXT_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_ARG_CHK_EXT_EN  illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
N#endif
N
N
N
N#ifndef  LIB_MEM_CFG_POOL_EN
S#error  "LIB_MEM_CFG_POOL_EN               not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S#elif  ((LIB_MEM_CFG_POOL_EN != DEF_DISABLED) && \
S        (LIB_MEM_CFG_POOL_EN != DEF_ENABLED ))
X#elif  ((0 != 0) &&         (0 != 1 ))
S#error  "LIB_MEM_CFG_POOL_EN         illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  DEF_DISABLED]           "
S#error  "                            [     ||  DEF_ENABLED ]           "
S
S
S#elif   (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#elif   (0 == 1)
S
S#ifndef  LIB_MEM_CFG_HEAP_SIZE
S#error  "LIB_MEM_CFG_HEAP_SIZE             not #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S
S#elif   (LIB_MEM_CFG_HEAP_SIZE < 1)
S
S#error  "LIB_MEM_CFG_HEAP_SIZE       illegally #define'd in 'app_cfg.h'"
S#error  "                            [MUST be  > 0]                    "
S#endif
S
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             MODULE END
N*********************************************************************************************************
N*/
N
N#endif                                                          /* End of lib mem module include.                       */
N
L 60 "..\..\..\..\..\uC-LIB\lib_mem.c" 2
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                            LOCAL DEFINES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                           LOCAL CONSTANTS
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                          LOCAL DATA TYPES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                            LOCAL TABLES
N*********************************************************************************************************
N*/
N
N
N/*
N*********************************************************************************************************
N*                                       LOCAL GLOBAL VARIABLES
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
SMEM_POOL    *Mem_PoolTbl;                                               /* Mem      pool/seg tbl.                       */
SMEM_POOL     Mem_PoolHeap;                                              /* Mem heap pool/seg.                           */
SCPU_INT08U   Mem_Heap[LIB_MEM_CFG_HEAP_SIZE];                           /* Mem heap.                                    */
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                      LOCAL FUNCTION PROTOTYPES
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)                                /* -------------- MEM POOL FNCTS -------------- */
X#if (0 == 1)                                 
S
Sstatic  CPU_SIZE_T    Mem_PoolSegCalcTotSize(void        *pmem_addr,
S                                             CPU_SIZE_T   blk_nbr,
S                                             CPU_SIZE_T   blk_size,
S                                             CPU_SIZE_T   blk_align);
S
Sstatic  void         *Mem_PoolSegAlloc      (MEM_POOL    *pmem_pool,
S                                             CPU_SIZE_T   size,
S                                             CPU_SIZE_T   align);
S
S#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
Sstatic  CPU_BOOLEAN   Mem_PoolBlkIsValidAddr(MEM_POOL    *pmem_pool,
S                                             void        *pmem_blk);
S#endif
S
N#endif
N
N
N/*
N*********************************************************************************************************
N*                                     LOCAL CONFIGURATION ERRORS
N*********************************************************************************************************
N*/
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                           Mem_Init()
N*
N* Description : (1) Initialize Memory Management Module :
N*
N*                   (a) Initialize heap memory pool
N*                   (b) Initialize      memory pool table
N*
N*
N* Argument(s) : none.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
Nvoid  Mem_Init (void)
N{
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
S    MEM_POOL  *pmem_pool;
S
S                                                                        /* --------- INIT MEM HEAP SEG / POOL --------- */
S    pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
S    pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
S    pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
S    pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
S    pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
S    pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
S    pmem_pool->PoolAddrStart    = (void       *) 0;
S    pmem_pool->PoolAddrEnd      = (void       *) 0;
S    pmem_pool->PoolPtrs         = (void      **) 0;
S    pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0;
S    pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0;
S    pmem_pool->BlkIx            = (MEM_POOL_IX ) 0;
S    pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
S    pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
S    pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
S    pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
S
S                                                                        /* ------------ INIT MEM POOL TBL ------------- */
S    Mem_PoolTbl = &Mem_PoolHeap;
N#endif
N}
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              Mem_Clr()
N*
N* Description : Clear data buffer (see Note #2).
N*
N* Argument(s) : pmem        Pointer to memory buffer to clear.
N*
N*               size        Number of data buffer octets to clear.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Null clears allowed (i.e. 0-octet size).
N*
N*                   See also 'Mem_Set()  Note #1'.
N*
N*               (2) Clear data by setting each data octet to 0.
N*********************************************************************************************************
N*/
N
Nvoid  Mem_Clr (void        *pmem,
N               CPU_SIZE_T   size)
N{
N    Mem_Set((void     *)pmem,
N            (CPU_INT08U)0,                                      /* See Note #2.                                         */
N            (CPU_SIZE_T)size);
N}
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              Mem_Set()
N*
N* Description : Fill data buffer with specified data octet.
N*
N* Argument(s) : pmem        Pointer to memory buffer to fill with specified data octet.
N*
N*               data_val    Data fill octet value.
N*
N*               size        Number of data buffer octets to fill.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Null sets allowed (i.e. 0-octet size).
N*
N*               (2) For best CPU performance, optimized to fill data buffer using 'CPU_ALIGN'-sized data
N*                   words.
N*
N*                   (a) Since many word-aligned processors REQUIRE that multi-octet words be accessed on
N*                       word-aligned addresses, 'CPU_ALIGN'-sized words MUST be accessed on 'CPU_ALIGN'd
N*                       addresses.
N*
N*               (3) Modulo arithmetic is used to determine whether a memory buffer starts on a 'CPU_ALIGN'
N*                   address boundary.
N*
N*                   Modulo arithmetic in ANSI-C REQUIREs operations performed on integer values.  Thus,
N*                   address values MUST be cast to an appropriately-sized integer value PRIOR to any
N*                   mem_align_modulo arithmetic operation.
N*********************************************************************************************************
N*/
N
Nvoid  Mem_Set (void        *pmem,
N               CPU_INT08U   data_val,
N               CPU_SIZE_T   size)
N{
N    CPU_SIZE_T   size_rem;
N    CPU_ALIGN    data_align;
N    CPU_ALIGN   *pmem_align;
N    CPU_INT08U  *pmem_08;
N    CPU_INT08U   mem_align_modulo;
N    CPU_INT08U   i;
N
N
N    if (size < 1) {                                             /* See Note #1.                                         */
N        return;
N    }
N    if (pmem == (void *)0) {
N        return;
N    }
N
N
N    data_align = 0;
N    for (i = 0; i < sizeof(CPU_ALIGN); i++) {                   /* Fill each data_align octet with data val.            */
N        data_align <<=  DEF_OCTET_NBR_BITS;
X        data_align <<=  8;
N        data_align  |= (CPU_ALIGN)data_val;
N    }
N
N    size_rem         = (CPU_SIZE_T)size;
N    mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */
N
N    pmem_08 = (CPU_INT08U *)pmem;
N    if (mem_align_modulo != 0) {                                /* If leading octets avail,                   ...       */
N        i = mem_align_modulo;
N        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
N               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
N           *pmem_08++ = data_val;
N            size_rem -= sizeof(CPU_INT08U);
N            i++;
N        }
N    }
N
N    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
N    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
N       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
N        size_rem    -= sizeof(CPU_ALIGN);
N    }
N
N    pmem_08 = (CPU_INT08U *)pmem_align;
N    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
N       *pmem_08++   = data_val;
N        size_rem   -= sizeof(CPU_INT08U);
N    }
N}
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                             Mem_Copy()
N*
N* Description : Copy data octets from one memory buffer to another memory buffer.
N*
N* Argument(s) : pdest       Pointer to destination memory buffer.
N*
N*               psrc        Pointer to source      memory buffer.
N*
N*               size        Number of data buffer octets to copy.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Null copies allowed (i.e. 0-octet size).
N*
N*               (2) Memory buffers NOT checked for overlapping.
N*
N*               (3) For best CPU performance, optimized to copy data buffer using 'CPU_ALIGN'-sized data
N*                   words.
N*
N*                   (a) Since many word-aligned processors REQUIRE that multi-octet words be accessed on
N*                       word-aligned addresses, 'CPU_ALIGN'-sized words MUST be accessed on 'CPU_ALIGN'd
N*                       addresses.
N*
N*               (4) Modulo arithmetic is used to determine whether a memory buffer starts on a 'CPU_ALIGN'
N*                   address boundary.
N*
N*                   Modulo arithmetic in ANSI-C REQUIREs operations performed on integer values.  Thus,
N*                   address values MUST be cast to an appropriately-sized integer value PRIOR to any
N*                   mem_align_modulo arithmetic operation.
N*********************************************************************************************************
N*/
N/*$PAGE*/
N#if ((!defined(uC_CFG_OPTIMIZE_ASM_EN)) || \
N     ((defined(uC_CFG_OPTIMIZE_ASM_EN)) && \
N              (uC_CFG_OPTIMIZE_ASM_EN   != DEF_ENABLED)))
X#if ((!1L) ||      ((1L) &&               (1   != 1)))
Svoid  Mem_Copy (void        *pdest,
S                void        *psrc,
S                CPU_SIZE_T   size)
S{
S    CPU_SIZE_T    size_rem;
S    CPU_ALIGN    *pmem_align_dest;
S    CPU_ALIGN    *pmem_align_src;
S    CPU_INT08U   *pmem_08_dest;
S    CPU_INT08U   *pmem_08_src;
S    CPU_INT08U    i;
S    CPU_INT08U    mem_align_modulo_dest;
S    CPU_INT08U    mem_align_modulo_src;
S    CPU_BOOLEAN   mem_aligned;
S
S
S    if (size < 1) {                                             /* See Note #1.                                         */
S        return;
S    }
S    if (pdest == (void *)0) {
S        return;
S    }
S    if (psrc  == (void *)0) {
S        return;
S    }
S
S
S    size_rem              = (CPU_SIZE_T  )size;
S
S    pmem_08_dest          = (CPU_INT08U *)pdest;
S    pmem_08_src           = (CPU_INT08U *)psrc;
S                                                                /* See Note #4.                                         */
S    mem_align_modulo_dest = (CPU_INT08U  )((CPU_ADDR)pmem_08_dest % sizeof(CPU_ALIGN));
S    mem_align_modulo_src  = (CPU_INT08U  )((CPU_ADDR)pmem_08_src  % sizeof(CPU_ALIGN));
S
S    mem_aligned           = (mem_align_modulo_dest == mem_align_modulo_src) ? DEF_YES : DEF_NO;
S
S    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
S                                                                /* ... optimize copy for mem buf alignment.             */
S        if (mem_align_modulo_dest != 0) {                       /* If leading octets avail,                   ...       */
S            i = mem_align_modulo_dest;
S            while ((size_rem   >  0) &&                         /* ... start mem buf copy with leading octets ...       */
S                   (i          <  sizeof(CPU_ALIGN ))) {        /* ... until next CPU_ALIGN word boundary.              */
S               *pmem_08_dest++ = *pmem_08_src++;
S                size_rem      -=  sizeof(CPU_INT08U);
S                i++;
S            }
S        }
S
S        pmem_align_dest = (CPU_ALIGN *)pmem_08_dest;            /* See Note #3a.                                        */
S        pmem_align_src  = (CPU_ALIGN *)pmem_08_src;
S        while (size_rem      >=  sizeof(CPU_ALIGN)) {           /* While mem bufs aligned on CPU_ALIGN word boundaries, */
S           *pmem_align_dest++ = *pmem_align_src++;              /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
S            size_rem         -=  sizeof(CPU_ALIGN);
S        }
S
S        pmem_08_dest = (CPU_INT08U *)pmem_align_dest;
S        pmem_08_src  = (CPU_INT08U *)pmem_align_src;
S    }
S
S    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
S       *pmem_08_dest++ = *pmem_08_src++;                        /* ... copy psrc to pdest by octets.                    */
S        size_rem      -=  sizeof(CPU_INT08U);
S    }
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                              Mem_Cmp()
N*
N* Description : Verify that ALL data octets in two memory buffers are identical in sequence.
N*
N* Argument(s) : p1_mem      Pointer to first  memory buffer.
N*
N*               p2_mem      Pointer to second memory buffer.
N*
N*               size        Number of data buffer octets to compare.
N*
N* Return(s)   : DEF_YES, if 'size' number of data octets are identical in both memory buffers.
N*
N*               DEF_NO,  otherwise.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (1) Null compares allowed (i.e. 0-octet size); 'DEF_YES' returned to indicate identical
N*                   null compare.
N*
N*               (2) Many memory buffer comparisons vary ONLY in the least significant octets -- e.g.
N*                   network address buffers.  Consequently, memory buffer comparison is more efficient
N*                   if the comparison starts from the end of the memory buffers which will abort sooner
N*                   on dissimilar memory buffers that vary only in the least significant octets.
N*
N*               (3) For best CPU performance, optimized to compare data buffers using 'CPU_ALIGN'-sized
N*                   data words.
N*
N*                   (a) Since many word-aligned processors REQUIRE that multi-octet words be accessed on
N*                       word-aligned addresses, 'CPU_ALIGN'-sized words MUST be accessed on 'CPU_ALIGN'd
N*                       addresses.
N*
N*               (4) Modulo arithmetic is used to determine whether a memory buffer starts on a 'CPU_ALIGN'
N*                   address boundary.
N*
N*                   Modulo arithmetic in ANSI-C REQUIREs operations performed on integer values.  Thus,
N*                   address values MUST be cast to an appropriately-sized integer value PRIOR to any
N*                   mem_align_modulo arithmetic operation.
N********************************************************************************************************
N*/
N/*$PAGE*/
NCPU_BOOLEAN  Mem_Cmp (void        *p1_mem,
N                      void        *p2_mem,
N                      CPU_SIZE_T   size)
N{
N    CPU_SIZE_T    size_rem;
N    CPU_ALIGN    *p1_mem_align;
N    CPU_ALIGN    *p2_mem_align;
N    CPU_INT08U   *p1_mem_08;
N    CPU_INT08U   *p2_mem_08;
N    CPU_INT08U    i;
N    CPU_INT08U    mem_align_modulo_1;
N    CPU_INT08U    mem_align_modulo_2;
N    CPU_BOOLEAN   mem_aligned;
N    CPU_BOOLEAN   mem_cmp;
N
N
N    if (size < 1) {                                             /* See Note #1.                                         */
N        return (DEF_YES);
X        return (1);
N    }
N    if (p1_mem == (void *)0) {
N        return (DEF_NO);
X        return (0);
N    }
N    if (p2_mem == (void *)0) {
N        return (DEF_NO);
X        return (0);
N    }
N
N
N    mem_cmp            =  DEF_YES;                              /* Assume mem bufs are identical until cmp fails.       */
X    mem_cmp            =  1;                               
N    size_rem           =  size;
N                                                                /* Start @ end of mem bufs (see Note #2).               */
N    p1_mem_08          = (CPU_INT08U *)p1_mem + size;
N    p2_mem_08          = (CPU_INT08U *)p2_mem + size;
N                                                                /* See Note #4.                                         */
N    mem_align_modulo_1 = (CPU_INT08U  )((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
N    mem_align_modulo_2 = (CPU_INT08U  )((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
N
N    mem_aligned        = (mem_align_modulo_1 == mem_align_modulo_2) ? DEF_YES : DEF_NO;
X    mem_aligned        = (mem_align_modulo_1 == mem_align_modulo_2) ? 1 : 0;
N
N    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
X    if (mem_aligned == 1) {                                
N                                                                /* ... optimize cmp for mem buf alignment.              */
N        if (mem_align_modulo_1 != 0) {                          /* If trailing octets avail,                  ...       */
N            i = mem_align_modulo_1;
N            while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
X            while ((mem_cmp == 1) &&                       
N                   (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
N                   (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
N                p1_mem_08--;
N                p2_mem_08--;
N                if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
N                     mem_cmp = DEF_NO;
X                     mem_cmp = 0;
N                }
N                size_rem -= sizeof(CPU_INT08U);
N                i--;
N            }
N        }
N
N        if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
X        if (mem_cmp == 1) {                                
N            p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
N            p2_mem_align = (CPU_ALIGN *)p2_mem_08;
N
N            while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
X            while ((mem_cmp  == 1) &&                      
N                   (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
N                p1_mem_align--;
N                p2_mem_align--;
N                if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
N                     mem_cmp = DEF_NO;
X                     mem_cmp = 0;
N                }
N                size_rem -= sizeof(CPU_ALIGN);
N            }
N
N            p1_mem_08 = (CPU_INT08U *)p1_mem_align;
N            p2_mem_08 = (CPU_INT08U *)p2_mem_align;
N        }
N    }
N
N    while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
X    while ((mem_cmp == 1) &&                               
N           (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
N        p1_mem_08--;
N        p2_mem_08--;
N        if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
N             mem_cmp = DEF_NO;
X             mem_cmp = 0;
N        }
N        size_rem -= sizeof(CPU_INT08U);
N    }
N
N    return (mem_cmp);
N}
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          Mem_PoolCreate()
N*
N* Description : (1) Create a memory pool :
N*
N*                   (a) Create    memory pool from heap or dedicated memory
N*                   (b) Allocate  memory pool memory blocks
N*                   (c) Update    memory pool table
N*                   (d) Configure memory pool
N*
N*
N*               (2) Memory pools are indexed by the Memory Segments they use.
N*
N*                   (a) The memory pool table is composed by a two-dimensional list :
N*
N*                       (1) Memory segments manage the following memory segment/pool information :
N*
N*                           (A) Memory segment base           address
N*                           (B) Memory segment next available address
N*                           (C) Memory segment total     size
N*                           (D) Memory segment remaining size
N*
N*                       (2) Memory pools share memory from memory segments but do NOT manage any memory
N*                           segment information.  To access the memory segment information, the head
N*                           memory segment must be accessed.
N*
N*                   (b) In the diagram below, memory pools in vertical columns represent they share the same
N*                       memory segment for the memory blocks they have.  The heads of the memory pool are
N*                       linked horizontally to form a memory pool table.
N*
N*                       (1) 'Mem_PoolTbl' points to the head of the Memory Pool table.
N*
N*                       (2) Memory Pools' 'SegPrevPtr'  & 'SegNextPtr'  doubly-link each memory segment to
N*                           form the list of memory segments.
N*
N*                       (3) Memory Pools' 'PoolPrevPtr' & 'PoolNextPtr' doubly-link the  memory pools of
N*                           each memory segment.
N*
N*                   (c) New memory pools, which do not share a memory segment, are inserted in the Memory
N*                       Segments Primary List.  The point of insertion is such to keep ascended order by
N*                       memory segment base address.
N*
N*                   (d) Memory pool pointers to memory blocks 'PoolPtrs' must be allocated for each created
N*                       memory pool.  These pointers are stored in the memory pool heap segment 'Mem_PoolHeap'.
N*
N*                       (1) A memory pool can also have its memory blocks allocated from the memory pool heap.
N*                           'pmem_base_addr' must be set to NULL & 'mem_size' must be set to (0) to create the
N*                           memory pool.
N*
N*
N*                                        |                                                                 |
N*                                        |<----------------------- Memory Segments ----------------------->|
N*                                        |                         (see Note #2a1)                         |
N*
N*                                 Lowest Memory Segment                                      Highest Memory Segment
N*                                     Base Address                                                Base Address
N*                                    (see Note #2c)                                              (see Note #2c)
N*
N*                                           |             SegNextPtr             Heap Memory Pool       |
N*                                           |          (see Note #2b2)            (see Note #2d)        |
N*                                           |                     |                                     |
N*                                           v                     |                      |              v
N*                                                                 |                      v
N*        ---          Head of Memory     -------        -------   v    -------        -------        -------
N*         ^             Pool Table   --->|     |------->|     |------->|     |------->|     |------->|     |
N*         |          (see Note #2b1)     |     |        |     |        |     |        |  H  |        |     |
N*         |                              |     |<-------|     |<-------|     |<-------|  E  |<-------|     |
N*         |                              |     |        |     |   ^    |     |        |  A  |        |     |
N*         |                              |     |        |     |   |    |     |        |  P  |        |     |
N*         |                              |     |        |     |   |    |     |        |     |        |     |
N*         |                              -------        -------   |    -------        -------        -------
N*         |                                | ^                    |      | ^
N*         |                                | |            SegPrevPtr     | |
N*         |                                v |         (see Note #2b2)   v |
N*         |                              -------                       -------
N*                                        |     |                       |     |
N*    Memory Pools                        |     |                       |     |
N*  (see Note #2a2)                       |     |                       |     |
N*                                        |     |                       |     |
N*         |                              |     |                       |     |
N*         |                              -------                       -------
N*         |                                | ^
N*         |               PoolNextPtr ---> | | <--- PoolPrevPtr
N*         |             (see Note #2b3)    v |    (see Note #2b3)
N*         |                              -------
N*         |                              |     |
N*         |                              |     |
N*         |                              |     |
N*         |                              |     |
N*         v                              |     |
N*        ---                             -------
N*
N*$PAGE*
N* Argument(s) : pmem_pool           Pointer to a memory pool structure to create (see Note #3).
N*
N*               pmem_base_addr      Memory pool base address :
N*
N*                                       (a)     Null address    Memory pool allocated from general-purpose heap.
N*                                       (b) Non-null address    Memory pool allocated from dedicated memory
N*                                                                   specified by its base address.
N*
N*               mem_size            Size      of memory pool segment              (in octets).
N*
N*               blk_nbr             Number    of memory pool blocks to initialize.
N*
N*               blk_size            Size      of memory pool blocks to initialize (in octets).
N*
N*               blk_align           Alignment of memory pool blocks to initialize (in octets).
N*
N*               poctets_reqd        Pointer to a variable to ... :
N*
N*                                       (a) Return the number of octets required to successfully
N*                                               allocate the memory pool, if any errors;
N*                                       (b) Return 0, otherwise.
N*
N*               perr        Pointer to variable that will receive the return error code from this function :
N*
N*                               LIB_MEM_ERR_NONE                    Memory pool successfully created.
N*                               LIB_MEM_ERR_NULL_PTR                Argument 'pmem_pool' passed a NULL
N*                                                                       pointer.
N*
N*                               LIB_MEM_ERR_HEAP_NOT_FOUND          Heap   segment NOT found.
N*                               LIB_MEM_ERR_HEAP_EMPTY              Heap   segment empty; NO available memory
N*                                                                       from heap.
N*                               LIB_MEM_ERR_SEG_EMPTY               Memory segment empty; NO available memory
N*                                                                       from segment for memory pools.
N*
N*                               LIB_MEM_ERR_INVALID_SEG_SIZE        Invalid memory segment size.
N*                               LIB_MEM_ERR_INVALID_SEG_OVERLAP     Memory segment overlaps other memory
N*                                                                       segment(s) in memory pool table.
N*                               LIB_MEM_ERR_INVALID_BLK_NBR         Invalid memory pool number of blocks.
N*                               LIB_MEM_ERR_INVALID_BLK_SIZE        Invalid memory pool block size.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : (3) 'pmem_pool' MUST be passed a pointer to the address of a declared 'MEM_POOL' variable.
N*
N*               (4) Pointers to variables that return values MUST be initialized to return PRIOR to all
N*                   other validation or function handling in case of any error(s).
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
Svoid  Mem_PoolCreate (MEM_POOL    *pmem_pool,
S                      void        *pmem_base_addr,
S                      CPU_SIZE_T   mem_size,
S                      CPU_SIZE_T   blk_nbr,
S                      CPU_SIZE_T   blk_size,
S                      CPU_SIZE_T   blk_align,
S                      CPU_SIZE_T  *poctets_reqd,
S                      LIB_ERR     *perr)
S{
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR        cpu_sr;
S#endif
S    MEM_POOL     *pmem_pool_heap;
S    MEM_POOL     *pmem_pool_prev;
S    MEM_POOL     *pmem_pool_next;
S    MEM_POOL     *pmem_pool_blk;
S    void        **ppool_ptr;
S    void         *pmem_blk;
S    CPU_INT08U   *pmem_addr_ptrs;
S    CPU_INT08U   *pmem_addr_pool;
S    CPU_INT08U   *pmem_base_addr_start;
S    CPU_INT08U   *pmem_base_addr_end;
S    CPU_INT08U   *pmem_seg_addr_start;
S    CPU_INT08U   *pmem_seg_addr_end;
S    CPU_SIZE_T    size_tot;
S    CPU_SIZE_T    size_tot_ptrs;
S    CPU_SIZE_T    size_tot_pool;
S    CPU_SIZE_T    size_rem;
S    CPU_SIZE_T    size_pool_ptrs;
S    CPU_SIZE_T    i;
S
S
S/*$PAGE*/
S                                                                    /* Init octets req'd for err (see Note #4).         */
S    if (poctets_reqd != (CPU_SIZE_T *)0) {
S       *poctets_reqd  = (CPU_SIZE_T  )0;
S    }
S
S
S                                                                    /* -------------- VALIDATE MEM POOL --------------- */
S    if (pmem_pool != (MEM_POOL *)0) {
S                                                                    /* Init mem pool     for err (see Note #4).         */
S        pmem_pool->Type             = (LIB_MEM_TYPE)LIB_MEM_TYPE_NONE;
S        pmem_pool->SegPrevPtr       = (MEM_POOL   *)0;
S        pmem_pool->SegNextPtr       = (MEM_POOL   *)0;
S        pmem_pool->PoolPrevPtr      = (MEM_POOL   *)0;
S        pmem_pool->PoolNextPtr      = (MEM_POOL   *)0;
S        pmem_pool->PoolAddrStart    = (void       *)0;
S        pmem_pool->PoolAddrEnd      = (void       *)0;
S        pmem_pool->PoolPtrs         = (void      **)0;
S        pmem_pool->PoolSize         = (CPU_SIZE_T  )0;
S        pmem_pool->BlkAlign         = (CPU_SIZE_T  )0;
S        pmem_pool->BlkSize          = (CPU_SIZE_T  )0;
S        pmem_pool->BlkNbr           = (CPU_SIZE_T  )0;
S        pmem_pool->BlkIx            = (MEM_POOL_IX )0;
S        pmem_pool->SegAddr          = (void       *)0;
S        pmem_pool->SegAddrNextAvail = (void       *)0;
S        pmem_pool->SegSizeTot       = (CPU_SIZE_T  )0;
S        pmem_pool->SegSizeRem       = (CPU_SIZE_T  )0;
S
S    } else {
S       *perr = LIB_MEM_ERR_NULL_PTR;
S        return;
S    }
S
S
S    if (pmem_base_addr != (void *)0) {
S        if (mem_size < 1) {
S           *perr = LIB_MEM_ERR_INVALID_SEG_SIZE;
S            return;
S        }
S    }
S
S    if (blk_nbr < 1) {
S       *perr = LIB_MEM_ERR_INVALID_BLK_NBR;
S        return;
S    }
S
S    if (blk_size < 1) {
S       *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
S        return;
S    }
S
S    if (blk_align < 1) {
S        blk_align = 1;
S    }
S
S                                                                    /* ------------ VALIDATE MEM POOL TBL ------------- */
S    if (Mem_PoolTbl == (MEM_POOL *)0) {
S       *perr = LIB_MEM_ERR_HEAP_NOT_FOUND;
S        return;
S    }
S
S
S
S/*$PAGE*/
S                                                                    /* ---------------- CREATE MEM POOL --------------- */
S    pmem_pool_heap = (MEM_POOL *)&Mem_PoolHeap;
S
S    CPU_CRITICAL_ENTER();
S
S    if (pmem_base_addr == (void *)0) {                              /* If no base addr, cfg mem pool from heap.         */
S        pmem_pool_blk   =  pmem_pool_heap;
S        pmem_pool_prev  =  pmem_pool_heap;
S        pmem_pool_next  =  pmem_pool_heap;
S
S                                                                    /* Calc tot mem   size for mem pool ptrs.           */
S        pmem_addr_ptrs  = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
S        size_tot_ptrs   =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_ptrs,
S                                                  (CPU_SIZE_T)blk_nbr,
S                                                  (CPU_SIZE_T)sizeof(void *),
S                                                  (CPU_SIZE_T)sizeof(void *));
S                                                                    /* Calc tot mem   size for mem blks.                */
S        pmem_addr_pool  =  pmem_addr_ptrs + size_tot_ptrs;          /* Adj next avail addr for mem pool blks.           */
S        size_tot_pool   =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_pool,
S                                                  (CPU_SIZE_T)blk_nbr,
S                                                  (CPU_SIZE_T)blk_size,
S                                                  (CPU_SIZE_T)blk_align);
S
S        size_tot = size_tot_ptrs + size_tot_pool;
S        size_rem = pmem_pool_heap->SegSizeRem;
S
S        if (size_tot > size_rem) {
S            CPU_CRITICAL_EXIT();
S           *perr = LIB_MEM_ERR_HEAP_EMPTY;
S
S            if (poctets_reqd != (CPU_SIZE_T *)0) {
S               *poctets_reqd  =  size_tot - size_rem;
S            }
S            return;
S        }
S
S
S    } else {                                                        /* Else cfg mem pool from dedicated mem.            */
S
S        pmem_base_addr_start = (CPU_INT08U *)pmem_base_addr;
S        pmem_base_addr_end   = (CPU_INT08U *)pmem_base_addr + mem_size - 1;
S
S        pmem_pool_blk        = (MEM_POOL *)0;
S        pmem_pool_prev       = (MEM_POOL *)0;
S        pmem_pool_next       =  Mem_PoolTbl;
S
S        while (pmem_pool_next != (MEM_POOL *)0) {                   /* Srch tbl for mem seg with same base addr/size.   */
S
S            if ((pmem_base_addr == pmem_pool_next->SegAddr) &&
S                (mem_size       == pmem_pool_next->SegSizeTot)) {
S
S                 pmem_pool_blk   = pmem_pool_next;
S                 pmem_pool_prev  = pmem_pool_next;
S                 break;
S
S            } else {
S                pmem_seg_addr_start = (CPU_INT08U *)pmem_pool_next->SegAddr;
S                pmem_seg_addr_end   = (CPU_INT08U *)pmem_pool_next->SegAddr + pmem_pool_next->SegSizeTot - 1;
S
S                                                                    /* Seg not found.                                   */
S                if (pmem_base_addr_end < pmem_seg_addr_start) {
S                    break;
S
S                                                                    /* New mem seg overlaps cur mem seg.                */
S                } else if (((pmem_base_addr_start <= pmem_seg_addr_start)  &&
S                            (pmem_base_addr_end   >= pmem_seg_addr_start)) ||
S                           ((pmem_base_addr_start >= pmem_seg_addr_start)  &&
S                            (pmem_base_addr_end   <= pmem_seg_addr_end  )) ||
S                           ((pmem_base_addr_start <= pmem_seg_addr_end  )  &&
S                            (pmem_base_addr_end   >= pmem_seg_addr_end  ))) {
S                    CPU_CRITICAL_EXIT();
S                   *perr = LIB_MEM_ERR_INVALID_SEG_OVERLAP;
S                    return;
S                }
S            }
S                                                                    /* If mem seg NOT found, adv to next mem seg.       */
S            pmem_pool_prev = pmem_pool_next;
S            pmem_pool_next = pmem_pool_next->SegNextPtr;
S        }
S
S        if (pmem_pool_blk == (MEM_POOL *)0) {                       /* If mem seg NOT found, add    new  mem seg.       */
S            pmem_pool_blk               = pmem_pool;
S            pmem_pool->SegAddr          = pmem_base_addr;
S            pmem_pool->SegAddrNextAvail = pmem_base_addr;
S            pmem_pool->SegSizeTot       = mem_size;
S            pmem_pool->SegSizeRem       = mem_size;
S        }
S
S/*$PAGE*/
S                                                                    /* Calc tot mem size for mem pool ptrs.             */
S        pmem_addr_ptrs = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
S        size_tot_ptrs  =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_ptrs,
S                                                 (CPU_SIZE_T)blk_nbr,
S                                                 (CPU_SIZE_T)sizeof(void *),
S                                                 (CPU_SIZE_T)sizeof(void *));
S        size_rem       =  pmem_pool_heap->SegSizeRem;
S
S        if (size_tot_ptrs > size_rem) {
S            CPU_CRITICAL_EXIT();
S           *perr = LIB_MEM_ERR_HEAP_EMPTY;
S
S            if (poctets_reqd != (CPU_SIZE_T *)0) {
S               *poctets_reqd  =  size_tot_ptrs - size_rem;
S            }
S            return;
S        }
S
S                                                                    /* Calc tot mem size for mem blks.                  */
S        pmem_addr_pool = (CPU_INT08U *)pmem_pool_blk->SegAddrNextAvail;
S        size_tot_pool  =  Mem_PoolSegCalcTotSize((void     *)pmem_addr_pool,
S                                                 (CPU_SIZE_T)blk_nbr,
S                                                 (CPU_SIZE_T)blk_size,
S                                                 (CPU_SIZE_T)blk_align);
S        size_rem       =  pmem_pool_blk->SegSizeRem;
S
S        if (size_tot_pool > size_rem) {
S            CPU_CRITICAL_EXIT();
S           *perr = LIB_MEM_ERR_SEG_EMPTY;
S
S            if (poctets_reqd != (CPU_SIZE_T *)0) {
S               *poctets_reqd  =  size_tot_pool - size_rem;
S            }
S            return;
S        }
S    }
S
S
S                                                                    /* ---------------- ALLOC MEM BLKs ---------------- */
S    size_pool_ptrs =  blk_nbr * sizeof(void *);
S                                                                    /* Alloc stk of ptrs for mem blks from heap.        */
S    ppool_ptr      = (void **)Mem_PoolSegAlloc((MEM_POOL *)pmem_pool_heap,
S                                               (CPU_SIZE_T)size_pool_ptrs,
S                                               (CPU_SIZE_T)sizeof(void *));
S
S    for (i = 0; i < blk_nbr; i++) {                                 /* Alloc mem blks from blk seg ptr.                 */
S        pmem_blk = (void *)Mem_PoolSegAlloc(pmem_pool_blk, blk_size, blk_align);
S        if (pmem_blk == (void *)0) {
S            CPU_CRITICAL_EXIT();
S           *perr = LIB_MEM_ERR_SEG_EMPTY;
S            return;
S        }
S        ppool_ptr[i] = pmem_blk;
S    }
S
S
S/*$PAGE*/
S                                                                    /* ------------- UPDATE MEM POOL TBL -------------- */
S    if (pmem_pool_prev == pmem_pool_next) {                         /* Add new mem seg  to list.                        */
S
S        pmem_pool_next             = pmem_pool_blk->PoolNextPtr;
S        pmem_pool->PoolPrevPtr     = pmem_pool_blk;
S        pmem_pool->PoolNextPtr     = pmem_pool_next;
S        pmem_pool_blk->PoolNextPtr = pmem_pool;
S        if (pmem_pool_next != (MEM_POOL *)0) {
S            pmem_pool_next->PoolPrevPtr = pmem_pool;
S        }
S
S    } else {                                                        /* Add new mem pool to mem seg.                     */
S
S        pmem_pool->SegPrevPtr = pmem_pool_prev;
S        pmem_pool->SegNextPtr = pmem_pool_next;
S
S        if (pmem_pool_prev != (MEM_POOL *)0) {                      /* Update prev mem pool link.                       */
S            pmem_pool_prev->SegNextPtr = pmem_pool;
S        } else {
S            Mem_PoolTbl                = pmem_pool;                 /* Update      mem pool head.                       */
S        }
S
S        if (pmem_pool_next != (MEM_POOL *)0) {                      /* Update next mem pool link.                       */
S            pmem_pool_next->SegPrevPtr = pmem_pool;
S        }
S    }
S
S
S                                                                    /* ----------------- CFG MEM POOL ----------------- */
S    pmem_pool->Type          = (LIB_MEM_TYPE) LIB_MEM_TYPE_POOL;
S    pmem_pool->PoolAddrStart = (void       *) pmem_addr_pool;
S    pmem_pool->PoolAddrEnd   = (void       *)(pmem_addr_pool + size_tot_pool - 1);
S    pmem_pool->PoolPtrs      = (void      **) ppool_ptr;
S    pmem_pool->PoolSize      = (CPU_SIZE_T  ) size_tot_pool;
S    pmem_pool->BlkAlign      = (CPU_SIZE_T  ) blk_align;
S    pmem_pool->BlkSize       = (CPU_SIZE_T  ) blk_size;
S    pmem_pool->BlkNbr        = (CPU_SIZE_T  ) blk_nbr;
S    pmem_pool->BlkIx         = (MEM_POOL_IX ) blk_nbr;
S
S
S    CPU_CRITICAL_EXIT();
S
S   *perr = LIB_MEM_ERR_NONE;
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          Mem_PoolBlkGet()
N*
N* Description : Get a memory block from memory pool.
N*
N* Argument(s) : pmem_pool   Pointer to  memory pool to get memory block from.
N*
N*               size        Size of requested memory (in octets).
N*
N*               perr        Pointer to variable that will receive the return error code from this function :
N*
N*                               LIB_MEM_ERR_NONE                   Memory block successfully returned.
N*                               LIB_MEM_ERR_NONE_AVAIL          NO memory blocks available in memory pool.
N*
N*                               LIB_MEM_ERR_NULL_PTR            Argument 'pmem_pool' passed a NULL pointer.
N*                               LIB_MEM_ERR_INVALID_POOL        Invalid memory pool type.
N*                               LIB_MEM_ERR_INVALID_BLK_SIZE    Invalid memory pool block size requested.
N*                               LIB_MEM_ERR_INVALID_BLK_IX      Invalid memory pool block index.
N*
N* Return(s)   : Pointer to memory block, if NO errors.
N*
N*               Pointer to NULL,         otherwise.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
Svoid  *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
S                       CPU_SIZE_T   size,
S                       LIB_ERR     *perr)
S{
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR   cpu_sr;
S#endif
S    void    *pmem_blk;
S
S
S    if (pmem_pool == (MEM_POOL *)0) {
S       *perr = LIB_MEM_ERR_NULL_PTR;
S        return ((void *)0);
S    }
S
S    CPU_CRITICAL_ENTER();
S    if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_INVALID_POOL;
S        return ((void *)0);
S    }
S
S    if (size > pmem_pool->BlkSize) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
S        return ((void *)0);
S    }
S
S    if (pmem_pool->BlkIx < 1) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_NONE_AVAIL;
S        return ((void *)0);
S    }
S
S    if (pmem_pool->BlkIx > pmem_pool->BlkNbr) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_INVALID_BLK_IX;
S        return ((void *)0);
S    }
S
S    pmem_pool->BlkIx--;
S    pmem_blk = pmem_pool->PoolPtrs[pmem_pool->BlkIx];
S
S    CPU_CRITICAL_EXIT();
S
S   *perr =  LIB_MEM_ERR_NONE;
S
S    return (pmem_blk);
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                          Mem_PoolBlkFree()
N*
N* Description : Free a memory block to memory pool.
N*
N* Argument(s) : pmem_pool   Pointer to memory pool to free memory block.
N*
N*               pmem_blk    Pointer to memory block address to free.
N*
N*               perr        Pointer to variable that will receive the return error code from this function :
N*
N*                               LIB_MEM_ERR_NONE                    Memory block successfully freed.
N*                               LIB_MEM_ERR_POOL_FULL           ALL memory blocks already available in
N*                                                                   memory pool.
N*
N*                               LIB_MEM_ERR_NULL_PTR            Argument 'pmem_pool'/'pmem_blk' passed
N*                                                                   a NULL pointer.
N*                               LIB_MEM_ERR_INVALID_POOL        Invalid memory pool type.
N*                               LIB_MEM_ERR_INVALID_ADDR        Invalid memory pool address.
N*
N* Return(s)   : none.
N*
N* Caller(s)   : Application.
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
Svoid  Mem_PoolBlkFree (MEM_POOL  *pmem_pool,
S                       void      *pmem_blk,
S                       LIB_ERR   *perr)
S{
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR       cpu_sr;
S#endif
S#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
S    CPU_BOOLEAN  addr_valid;
S    MEM_POOL_IX  i;
S#endif
S
S
S    if (pmem_pool == (MEM_POOL *)0) {
S       *perr = LIB_MEM_ERR_NULL_PTR;
S        return;
S    }
S
S    if (pmem_blk == (void *)0) {
S       *perr = LIB_MEM_ERR_NULL_PTR;
S        return;
S    }
S
S    CPU_CRITICAL_ENTER();
S    if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_INVALID_POOL;
S        return;
S    }
S
S    if (pmem_pool->BlkIx >= pmem_pool->BlkNbr) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_POOL_FULL;
S        return;
S    }
S
S#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
S    addr_valid = Mem_PoolBlkIsValidAddr(pmem_pool, pmem_blk);
S    if (addr_valid != DEF_OK) {
S        CPU_CRITICAL_EXIT();
S       *perr = LIB_MEM_ERR_INVALID_ADDR;
S        return;
S    }
S
S    for (i = 0; i < pmem_pool->BlkIx; i++) {
S        if (pmem_blk == pmem_pool->PoolPtrs[i]) {
S            CPU_CRITICAL_EXIT();
S           *perr = LIB_MEM_ERR_INVALID_ADDR;
S            return;
S        }
S    }
S#endif
S
S    pmem_pool->PoolPtrs[pmem_pool->BlkIx] = pmem_blk;
S    pmem_pool->BlkIx++;
S
S    CPU_CRITICAL_EXIT();
S
S   *perr = LIB_MEM_ERR_NONE;
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*********************************************************************************************************
N*                                           LOCAL FUNCTIONS
N*********************************************************************************************************
N*********************************************************************************************************
N*/
N
N/*
N*********************************************************************************************************
N*                                      Mem_PoolSegCalcTotSize()
N*
N* Description : (1) Calculates total memory segment size for number of blocks with specific size & alignment :
N*
N*
N*                       -----                     ======================  ---
N*                         ^       Mem Addr  --->  |  /  /  /  /  /  /  |   ^
N*                         |    (see Note #1a)     | /  /  /  /  /  /  /|   |    Mem Align Offset
N*                         |                       |/  /  /  /  /  /  / |   |  (see Notes #1e & #2a)
N*                         |                       |  /  /  /  /  /  /  |   v
N*                         |                       ======================  ---
N*                         |                       |                    |   ^
N*                         |                       |                    |   |
N*                         |                       |     Mem Blk #1     |   |        Blk Size
N*                         |                       |                    |   |     (see Note #1c)
N*                         |                       |                    |   v
N*                         |                       ----------------------  ---
N*                         |                       |  /  /  /  /  /  /  |   ^
N*                         |                       | /  /  /  /  /  /  /|   |    Blk Align Offset
N*                         |                       |/  /  /  /  /  /  / |   |  (see Notes #1f & #2b)
N*                         |                       |  /  /  /  /  /  /  |   v
N*                         |                       ======================  ---
N*                                                 |         .          |
N*                     Total Size                  |         .          |
N*                   (see Note #2c)                |         .          |
N*                                                 ======================  ---
N*                         |                       |                    |   ^
N*                         |                       |                    |   |
N*                         |                       |   Mem Blk #N - 1   |   |        Blk Size
N*                         |                       |                    |   |     (see Note #1c)
N*                         |                       |                    |   v
N*                         |                       ----------------------  ---
N*                         |                       |  /  /  /  /  /  /  |   ^
N*                         |                       | /  /  /  /  /  /  /|   |    Blk Align Offset
N*                         |                       |/  /  /  /  /  /  / |   |  (see Notes #1f & #2b)
N*                         |                       |  /  /  /  /  /  /  |   v
N*                         |                       ======================  ---
N*                         |                       |                    |   ^
N*                         |                       |                    |   |
N*                         |                       |     Mem Blk #N     |   |        Blk Size
N*                         |                       |                    |   |     (see Note #1c)
N*                         v                       |                    |   v
N*                       -----                     ======================  ---
N*
N*               where
N*
N*                   (a) Mem Addr            Memory address of the beginning of the memory block ('pmem_addr')
N*
N*                   (b) N                   Number of memory blocks to allocate ('blk_nbr')
N*
N*                   (c) Blk Size            Size   of memory block  to allocate ('blk_size')
N*
N*                   (d) Align               Required block memory alignment     ('blk_align')
N*
N*                   (e) Mem Align Offset    Offset required to align first memory block
N*
N*                   (f) Blk Align Offset    Offset required to align every memory block
N*
N*
N*               (2) The total size is calculated based on the following equations :
N*
N*                                            { (1) Align - (Mem Addr % Align) , if memory address is not aligned
N*                   (a) Mem Align Offset  =  {
N*                                            { (2) 0                          , if memory address is     aligned
N*
N*
N*                                            { (1) Align - (Size     % Align) , if memory block   is not aligned
N*                   (b) Blk Align Offset  =  {
N*                                            { (2) 0                          , if memory block   is     aligned
N*
N*
N*                   (c) Total Size        =   Mem Align Offset
N*                                         + ((Blk Size + Blk Align Offset) * (N - 1))
N*                                         +   Blk Size
N*
N*$PAGE*
N* Argument(s) : pmem_addr   Memory address of the beginning of the memory block.
N*
N*               blk_nbr     Number of memory blocks to allocate.
N*
N*               blk_size    Size   of memory block  to allocate.
N*
N*               blk_align   Required block memory alignment (in octets).
N*               ---------   Argument validated in Mem_PoolCreate().
N*
N* Return(s)   : Total size of memory segment used to allocate the number of blocks.
N*
N* Caller(s)   : Mem_PoolCreate().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
Sstatic  CPU_SIZE_T  Mem_PoolSegCalcTotSize (void        *pmem_addr,
S                                            CPU_SIZE_T   blk_nbr,
S                                            CPU_SIZE_T   blk_size,
S                                            CPU_SIZE_T   blk_align)
S{
S    CPU_SIZE_T  align_offset;
S    CPU_SIZE_T  mem_align_offset;
S    CPU_SIZE_T  blk_align_offset;
S    CPU_SIZE_T  size_tot;
S
S                                                                    /* Calc mem align (see Note #2a).                   */
S    align_offset = (CPU_ADDR)pmem_addr % blk_align;
S    if (align_offset != 0) {
S        mem_align_offset = blk_align - align_offset;
S    } else {
S        mem_align_offset = 0;
S    }
S                                                                    /* Calc blk align (see Note #2b).                   */
S    align_offset = blk_size % blk_align;
S    if (align_offset != 0) {
S        blk_align_offset = blk_align - align_offset;
S    } else {
S        blk_align_offset = 0;
S    }
S                                                                    /* Calc tot size  (see Note #2c).                   */
S    size_tot = mem_align_offset + ((blk_size + blk_align_offset) * (blk_nbr - 1)) + blk_size;
S
S    return (size_tot);
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                      Mem_PoolBlkIsValidAddr()
N*
N* Description : Calculates if a given memory block address is valid for the memory pool.
N*
N* Argument(s) : pmem_pool   Pointer to memory pool structure to validate memory block address.
N*               ---------   Argument validated in Mem_PoolBlkFree().
N*
N*               pmem_blk    Pointer to memory block address to validate.
N*               --------    Argument validated in Mem_PoolBlkFree().
N*
N* Return(s)   : DEF_YES, if valid memory pool block address.
N*
N*               DEF_NO,  otherwise.
N*
N* Caller(s)   : Mem_PoolBlkFree().
N*
N* Note(s)     : none.
N*********************************************************************************************************
N*/
N
N#if ((LIB_MEM_CFG_POOL_EN        == DEF_ENABLED) && \
N     (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED))
X#if ((0        == 1) &&      (0 == 1))
Sstatic  CPU_BOOLEAN  Mem_PoolBlkIsValidAddr (MEM_POOL  *pmem_pool,
S                                             void      *pmem_blk)
S{
S    CPU_INT08U   *ppool_addr_first;
S    void         *ppool_addr_start;
S    void         *ppool_addr_end;
S    CPU_SIZE_T    align_offset;
S    CPU_SIZE_T    blk_align;
S    CPU_SIZE_T    blk_align_offset;
S    CPU_SIZE_T    blk_size;
S    CPU_SIZE_T    mem_align;
S    CPU_SIZE_T    mem_align_offset;
S    CPU_SIZE_T    mem_diff;
S    CPU_BOOLEAN   addr_valid;
S
S
S    ppool_addr_start = pmem_pool->PoolAddrStart;
S    ppool_addr_end   = pmem_pool->PoolAddrEnd;
S
S    if ((pmem_blk < ppool_addr_start) ||
S        (pmem_blk > ppool_addr_end)) {
S        return (DEF_NO);
S    }
S
S    blk_align      = (CPU_SIZE_T)pmem_pool->BlkAlign;
S    align_offset   = (CPU_SIZE_T)((CPU_ADDR)ppool_addr_start % blk_align);
S    if (align_offset != 0) {
S        mem_align_offset = blk_align - align_offset;
S    } else {
S        mem_align_offset = 0;
S    }
S
S    blk_size     = pmem_pool->BlkSize;
S    align_offset = blk_size % blk_align;
S    if (align_offset != 0) {
S        blk_align_offset = blk_align - align_offset;
S    } else {
S        blk_align_offset = 0;
S    }
S
S    ppool_addr_first = (CPU_INT08U *)((CPU_INT08U *)ppool_addr_start + mem_align_offset);
S    mem_diff         = (CPU_SIZE_T  )((CPU_INT08U *)pmem_blk         - ppool_addr_first);
S    mem_align        = (CPU_SIZE_T  )(              blk_size         + blk_align_offset);
S
S    addr_valid       = ((mem_diff % mem_align) == 0) ? DEF_YES : DEF_NO;
S
S    return (addr_valid);
S}
N#endif
N
N
N/*$PAGE*/
N/*
N*********************************************************************************************************
N*                                         Mem_PoolSegAlloc()
N*
N* Description : Allocates memory from specific segment.
N*
N* Argument(s) : pmem_pool   Pointer to memory pool structure containing segment information.
N*               ---------   Argument validated in Mem_PoolCreate()
N*
N*               size        Size of memory to allocate.
N*               ----        Argument validated in Mem_PoolCreate()
N*
N*               align       Required starting memory alignment (in octets).
N*               -----       Argument validated in Mem_PoolCreate()
N*
N* Return(s)   : Pointer to allocated memory, if NO errors.
N*
N*               Pointer to NULL, otherwise.
N*
N* Caller(s)   : Mem_PoolCreate().
N*
N* Note(s)     : (1) Allocated memory from the specific segment is NEVER freed after allocation.
N*********************************************************************************************************
N*/
N
N#if (LIB_MEM_CFG_POOL_EN == DEF_ENABLED)
X#if (0 == 1)
Sstatic  void  *Mem_PoolSegAlloc  (MEM_POOL    *pmem_pool,
S                                  CPU_SIZE_T   size,
S                                  CPU_SIZE_T   align)
S{
S#if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
S    CPU_SR       cpu_sr;
S#endif
S    CPU_INT08U  *pmem_addr;
S    CPU_SIZE_T   mem_align;
S    CPU_SIZE_T   align_offset;
S    CPU_SIZE_T   size_tot;
S    CPU_SIZE_T   size_rem;
S
S
S    CPU_CRITICAL_ENTER();
S    pmem_addr = (CPU_INT08U *)pmem_pool->SegAddrNextAvail;
S
S    mem_align = (CPU_SIZE_T  )((CPU_ADDR)pmem_addr % align);        /* Calc mem align.                                  */
S
S    if (mem_align != 0) {
S        align_offset = align - mem_align;
S    } else {
S        align_offset = 0;
S    }
S
S    size_tot = align_offset + size;
S    size_rem = pmem_pool->SegSizeRem;
S
S    if (size_tot > size_rem) {                                      /* If insufficiemt mem seg size rem, ...            */
S        CPU_CRITICAL_EXIT();
S        return ((void *)0);                                         /* ... rtn NULL.                                    */
S    }
S
S    pmem_addr                   += align_offset;                    /* Adj mem addr align.                              */
S
S    pmem_pool->SegAddrNextAvail  = pmem_addr + size;                /* Adv next avail addr.                             */
S    pmem_pool->SegSizeRem       -= size_tot;                        /* Adj rem mem seg size.                            */
S
S    CPU_CRITICAL_EXIT();
S
S    return ((void *)pmem_addr);
S}
N#endif
N
