; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\stm32f10x_nvic.o --depend=.\output\stm32f10x_nvic.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\stm32f10x_nvic.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_nvic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_DeInit PROC
;;;39     {
;;;40       u32 index = 0;
000000  2000              MOVS     r0,#0
;;;41       
;;;42       NVIC->ICER[0] = 0xFFFFFFFF;
000002  1e43              SUBS     r3,r0,#1
000004  f04ff04f          MOV      r1,#0xe000e000
000008  f8c1f8c1          STR      r3,[r1,#0x180]
;;;43       NVIC->ICER[1] = 0x0FFFFFFF;
00000c  091a              LSRS     r2,r3,#4
00000e  f8c1f8c1          STR      r2,[r1,#0x184]
;;;44       NVIC->ICPR[0] = 0xFFFFFFFF;
000012  f8c1f8c1          STR      r3,[r1,#0x280]
;;;45       NVIC->ICPR[1] = 0x0FFFFFFF;
000016  f8c1f8c1          STR      r2,[r1,#0x284]
;;;46       
;;;47       for(index = 0; index < 0x0F; index++)
00001a  2200              MOVS     r2,#0
                  |L1.28|
;;;48       {
;;;49          NVIC->IPR[index] = 0x00000000;
00001c  eb01eb01          ADD      r3,r1,r0,LSL #2
000020  f8c3f8c3          STR      r2,[r3,#0x400]
000024  1c40              ADDS     r0,r0,#1              ;47
000026  280f              CMP      r0,#0xf               ;47
000028  d3f8              BCC      |L1.28|
;;;50       } 
;;;51     }
00002a  4770              BX       lr
;;;52     
                          ENDP

                  NVIC_SCBDeInit PROC
;;;62     {
;;;63       u32 index = 0x00;
00002c  2000              MOVS     r0,#0
;;;64       
;;;65       SCB->ICSR = 0x0A000000;
00002e  49a8              LDR      r1,|L1.720|
000030  f04ff04f          MOV      r2,#0xa000000
000034  600a              STR      r2,[r1,#0]
;;;66       SCB->VTOR = 0x00000000;
000036  2200              MOVS     r2,#0
000038  604a              STR      r2,[r1,#4]
;;;67       SCB->AIRCR = AIRCR_VECTKEY_MASK;
00003a  4ba6              LDR      r3,|L1.724|
00003c  608b              STR      r3,[r1,#8]
;;;68       SCB->SCR = 0x00000000;
00003e  60ca              STR      r2,[r1,#0xc]
;;;69       SCB->CCR = 0x00000000;
000040  610a              STR      r2,[r1,#0x10]
000042  f6a1f6a1          SUB      r1,r1,#0xd04
                  |L1.70|
;;;70       for(index = 0; index < 0x03; index++)
;;;71       {
;;;72          SCB->SHPR[index] = 0;
000046  eb01eb01          ADD      r3,r1,r0,LSL #2
00004a  f8c3f8c3          STR      r2,[r3,#0xd18]
00004e  1c40              ADDS     r0,r0,#1              ;70
000050  2803              CMP      r0,#3                 ;70
000052  d3f8              BCC      |L1.70|
;;;73       }
;;;74       SCB->SHCSR = 0x00000000;
000054  f601f601          ADD      r1,r1,#0xd24
000058  600a              STR      r2,[r1,#0]
;;;75       SCB->CFSR = 0xFFFFFFFF;
00005a  f04ff04f          MOV      r0,#0xffffffff
00005e  6048              STR      r0,[r1,#4]
;;;76       SCB->HFSR = 0xFFFFFFFF;
000060  6088              STR      r0,[r1,#8]
;;;77       SCB->DFSR = 0xFFFFFFFF;
000062  60c8              STR      r0,[r1,#0xc]
;;;78     }
000064  4770              BX       lr
;;;79     
                          ENDP

                  NVIC_PriorityGroupConfig PROC
;;;104      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;105      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000066  499b              LDR      r1,|L1.724|
000068  4308              ORRS     r0,r0,r1
00006a  4999              LDR      r1,|L1.720|
00006c  3108              ADDS     r1,r1,#8
00006e  6008              STR      r0,[r1,#0]
;;;106    }
000070  4770              BX       lr
;;;107    
                          ENDP

                  NVIC_Init PROC
;;;118    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
;;;119    {
000072  b5f0              PUSH     {r4-r7,lr}
;;;120      u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;121      u32 tmppre = 0, tmpsub = 0x0F;
000074  230f              MOVS     r3,#0xf
;;;122    
;;;123      /* Check the parameters */
;;;124      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;125      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
;;;126      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;127      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;128        
;;;129      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000076  78c2              LDRB     r2,[r0,#3]
000078  7801              LDRB     r1,[r0,#0]
00007a  f04ff04f          MOV      r4,#0xe000e000
00007e  2701              MOVS     r7,#1
000080  b342              CBZ      r2,|L1.212|
;;;130      {
;;;131        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;132        tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
000082  f8d4f8d4          LDR      r2,[r4,#0xd0c]
000086  f402f402          AND      r2,r2,#0x700
00008a  f5c2f5c2          RSB      r2,r2,#0x700
00008e  0a12              LSRS     r2,r2,#8
;;;133        tmppre = (0x4 - tmppriority);
000090  f1c2f1c2          RSB      r5,r2,#4
;;;134        tmpsub = tmpsub >> tmppriority;
000094  40d3              LSRS     r3,r3,r2
;;;135        
;;;136        tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
000096  7842              LDRB     r2,[r0,#1]
000098  40aa              LSLS     r2,r2,r5
;;;137        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
00009a  7885              LDRB     r5,[r0,#2]
00009c  401d              ANDS     r5,r5,r3
00009e  4315              ORRS     r5,r5,r2
;;;138    
;;;139        tmppriority = tmppriority << 0x04;
0000a0  012d              LSLS     r5,r5,#4
;;;140        tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
0000a2  078a              LSLS     r2,r1,#30
0000a4  0ed2              LSRS     r2,r2,#27
0000a6  4095              LSLS     r5,r5,r2
;;;141        
;;;142        tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
0000a8  f021f021          BIC      r1,r1,#3
0000ac  190b              ADDS     r3,r1,r4
0000ae  f8d3f8d3          LDR      r6,[r3,#0x400]
;;;143        tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
0000b2  21ff              MOVS     r1,#0xff
0000b4  4091              LSLS     r1,r1,r2
;;;144        tmpreg &= ~tmpmask;
0000b6  438e              BICS     r6,r6,r1
;;;145        tmppriority &= tmpmask;  
0000b8  400d              ANDS     r5,r5,r1
;;;146        tmpreg |= tmppriority;
0000ba  432e              ORRS     r6,r6,r5
;;;147    
;;;148        NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
0000bc  f8c3f8c3          STR      r6,[r3,#0x400]
;;;149        
;;;150        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;151        NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
0000c0  7800              LDRB     r0,[r0,#0]
0000c2  f000f000          AND      r1,r0,#0x1f
0000c6  408f              LSLS     r7,r7,r1
0000c8  0940              LSRS     r0,r0,#5
0000ca  eb04eb04          ADD      r0,r4,r0,LSL #2
0000ce  f8c0f8c0          STR      r7,[r0,#0x100]
;;;152          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;153      }
;;;154      else
;;;155      {
;;;156        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;157        NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
;;;158          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;159      }
;;;160    }
0000d2  bdf0              POP      {r4-r7,pc}
                  |L1.212|
0000d4  f001f001          AND      r0,r1,#0x1f           ;157
0000d8  4087              LSLS     r7,r7,r0              ;157
0000da  0948              LSRS     r0,r1,#5              ;157
0000dc  eb04eb04          ADD      r0,r4,r0,LSL #2       ;157
0000e0  f8c0f8c0          STR      r7,[r0,#0x180]        ;157
0000e4  bdf0              POP      {r4-r7,pc}
;;;161    
                          ENDP

                  NVIC_StructInit PROC
;;;172      /* NVIC_InitStruct members default value */
;;;173      NVIC_InitStruct->NVIC_IRQChannel = 0x00;
0000e6  2100              MOVS     r1,#0
0000e8  7001              STRB     r1,[r0,#0]
;;;174      NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
0000ea  7041              STRB     r1,[r0,#1]
;;;175      NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
0000ec  7081              STRB     r1,[r0,#2]
;;;176      NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
0000ee  70c1              STRB     r1,[r0,#3]
;;;177    }
0000f0  4770              BX       lr
;;;178    
                          ENDP

                  NVIC_GetCurrentPendingIRQChannel PROC
;;;264    {
;;;265      return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
0000f2  4877              LDR      r0,|L1.720|
0000f4  6800              LDR      r0,[r0,#0]
0000f6  f3c0f3c0          UBFX     r0,r0,#12,#10
;;;266    }
0000fa  4770              BX       lr
;;;267    
                          ENDP

                  NVIC_GetIRQChannelPendingBitStatus PROC
;;;276    ITStatus NVIC_GetIRQChannelPendingBitStatus(u8 NVIC_IRQChannel)
;;;277    {
0000fc  4601              MOV      r1,r0
;;;278      ITStatus pendingirqstatus = RESET;
0000fe  2000              MOVS     r0,#0
;;;279      u32 tmp = 0x00;
;;;280      
;;;281      /* Check the parameters */
;;;282      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;283      
;;;284      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000100  f001f001          AND      r3,r1,#0x1f
000104  2201              MOVS     r2,#1
000106  409a              LSLS     r2,r2,r3
;;;285    
;;;286      if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
000108  0949              LSRS     r1,r1,#5
00010a  f04ff04f          MOV      r3,#0xe000e000
00010e  eb03eb03          ADD      r1,r3,r1,LSL #2
000112  f8d1f8d1          LDR      r1,[r1,#0x200]
000116  438a              BICS     r2,r2,r1
000118  d100              BNE      |L1.284|
;;;287      {
;;;288        pendingirqstatus = SET;
00011a  2001              MOVS     r0,#1
                  |L1.284|
;;;289      }
;;;290      else
;;;291      {
;;;292        pendingirqstatus = RESET;
;;;293      }
;;;294      return pendingirqstatus;
;;;295    }
00011c  4770              BX       lr
;;;296    
                          ENDP

                  NVIC_SetIRQChannelPendingBit PROC
;;;308      
;;;309      *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
00011e  496e              LDR      r1,|L1.728|
000120  6008              STR      r0,[r1,#0]
;;;310    }
000122  4770              BX       lr
;;;311    
                          ENDP

                  NVIC_ClearIRQChannelPendingBit PROC
;;;323      
;;;324      NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
000124  f000f000          AND      r2,r0,#0x1f
000128  2101              MOVS     r1,#1
00012a  4091              LSLS     r1,r1,r2
00012c  0940              LSRS     r0,r0,#5
00012e  f04ff04f          MOV      r2,#0xe000e000
000132  eb02eb02          ADD      r0,r2,r0,LSL #2
000136  f8c0f8c0          STR      r1,[r0,#0x280]
;;;325    }
00013a  4770              BX       lr
;;;326    
                          ENDP

                  NVIC_GetCurrentActiveHandler PROC
;;;336    {
;;;337      return ((u16)(SCB->ICSR & (u32)0x3FF));
00013c  4864              LDR      r0,|L1.720|
00013e  6800              LDR      r0,[r0,#0]
000140  f3c0f3c0          UBFX     r0,r0,#0,#10
;;;338    }
000144  4770              BX       lr
;;;339    
                          ENDP

                  NVIC_GetIRQChannelActiveBitStatus PROC
;;;348    ITStatus NVIC_GetIRQChannelActiveBitStatus(u8 NVIC_IRQChannel)
;;;349    {
000146  4601              MOV      r1,r0
;;;350      ITStatus activeirqstatus = RESET;
000148  2000              MOVS     r0,#0
;;;351      u32 tmp = 0x00;
;;;352    
;;;353      /* Check the parameters */
;;;354      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;355      
;;;356      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
00014a  f001f001          AND      r3,r1,#0x1f
00014e  2201              MOVS     r2,#1
000150  409a              LSLS     r2,r2,r3
;;;357    
;;;358      if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
000152  0949              LSRS     r1,r1,#5
000154  f04ff04f          MOV      r3,#0xe000e000
000158  eb03eb03          ADD      r1,r3,r1,LSL #2
00015c  f8d1f8d1          LDR      r1,[r1,#0x300]
000160  438a              BICS     r2,r2,r1
000162  d100              BNE      |L1.358|
;;;359      {
;;;360        activeirqstatus = SET;
000164  2001              MOVS     r0,#1
                  |L1.358|
;;;361      }
;;;362      else
;;;363      {
;;;364        activeirqstatus = RESET;
;;;365      }
;;;366      return activeirqstatus;
;;;367    }
000166  4770              BX       lr
;;;368    
                          ENDP

                  NVIC_GetCPUID PROC
;;;378    {
;;;379      return (SCB->CPUID);
000168  4859              LDR      r0,|L1.720|
00016a  1f00              SUBS     r0,r0,#4
00016c  6800              LDR      r0,[r0,#0]
;;;380    }
00016e  4770              BX       lr
;;;381    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;400       
;;;401      SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
000170  4a5a              LDR      r2,|L1.732|
000172  4011              ANDS     r1,r1,r2
000174  4301              ORRS     r1,r1,r0
000176  4856              LDR      r0,|L1.720|
000178  1d00              ADDS     r0,r0,#4
00017a  6001              STR      r1,[r0,#0]
;;;402    }
00017c  4770              BX       lr
;;;403    
                          ENDP

                  NVIC_GenerateSystemReset PROC
;;;412    {
;;;413      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
00017e  4855              LDR      r0,|L1.724|
000180  4953              LDR      r1,|L1.720|
000182  1d00              ADDS     r0,r0,#4
000184  3108              ADDS     r1,r1,#8
000186  6008              STR      r0,[r1,#0]
;;;414    }
000188  4770              BX       lr
;;;415    
                          ENDP

                  NVIC_GenerateCoreReset PROC
;;;424    {
;;;425      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
00018a  4852              LDR      r0,|L1.724|
00018c  4950              LDR      r1,|L1.720|
00018e  1c40              ADDS     r0,r0,#1
000190  3108              ADDS     r1,r1,#8
000192  6008              STR      r0,[r1,#0]
;;;426    }
000194  4770              BX       lr
;;;427    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;447      
;;;448      if (NewState != DISABLE)
000196  f04ff04f          MOV      r2,#0xe000e000
00019a  b129              CBZ      r1,|L1.424|
;;;449      {
;;;450        SCB->SCR |= LowPowerMode;
00019c  f8d2f8d2          LDR      r1,[r2,#0xd10]
0001a0  4301              ORRS     r1,r1,r0
0001a2  f8c2f8c2          STR      r1,[r2,#0xd10]
;;;451      }
;;;452      else
;;;453      {
;;;454        SCB->SCR &= (u32)(~(u32)LowPowerMode);
;;;455      }
;;;456    }
0001a6  4770              BX       lr
                  |L1.424|
0001a8  f8d2f8d2          LDR      r1,[r2,#0xd10]        ;454
0001ac  4381              BICS     r1,r1,r0              ;454
0001ae  f8c2f8c2          STR      r1,[r2,#0xd10]        ;454
0001b2  4770              BX       lr
;;;457    
                          ENDP

                  NVIC_SystemHandlerConfig PROC
;;;479      
;;;480      tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
0001b4  f000f000          AND      r2,r0,#0x1f
0001b8  2001              MOVS     r0,#1
0001ba  4090              LSLS     r0,r0,r2
;;;481    
;;;482      if (NewState != DISABLE)
0001bc  f04ff04f          MOV      r2,#0xe000e000
0001c0  b129              CBZ      r1,|L1.462|
;;;483      {
;;;484        SCB->SHCSR |= tmpreg;
0001c2  f8d2f8d2          LDR      r1,[r2,#0xd24]
0001c6  4301              ORRS     r1,r1,r0
0001c8  f8c2f8c2          STR      r1,[r2,#0xd24]
;;;485      }
;;;486      else
;;;487      {
;;;488        SCB->SHCSR &= ~tmpreg;
;;;489      }
;;;490    }
0001cc  4770              BX       lr
                  |L1.462|
0001ce  f8d2f8d2          LDR      r1,[r2,#0xd24]        ;488
0001d2  4381              BICS     r1,r1,r0              ;488
0001d4  f8c2f8c2          STR      r1,[r2,#0xd24]        ;488
0001d8  4770              BX       lr
;;;491    
                          ENDP

                  NVIC_SystemHandlerPriorityConfig PROC
;;;513                                          u8 SystemHandlerSubPriority)
;;;514    {
0001da  b570              PUSH     {r4-r6,lr}
;;;515      u32 tmp1 = 0x00, tmp2 = 0xFF, handlermask = 0x00;
0001dc  24ff              MOVS     r4,#0xff
;;;516      u32 tmppriority = 0x00;
;;;517    
;;;518      /* Check the parameters */
;;;519      assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
;;;520      assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
;;;521      assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
;;;522        
;;;523      tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
0001de  f04ff04f          MOV      r6,#0xe000e000
0001e2  f8d6f8d6          LDR      r3,[r6,#0xd0c]
0001e6  f403f403          AND      r3,r3,#0x700
0001ea  f5c3f5c3          RSB      r3,r3,#0x700
0001ee  0a1b              LSRS     r3,r3,#8
;;;524      tmp1 = (0x4 - tmppriority);
0001f0  f1c3f1c3          RSB      r5,r3,#4
;;;525      tmp2 = tmp2 >> tmppriority;
0001f4  40dc              LSRS     r4,r4,r3
;;;526        
;;;527      tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
0001f6  40a9              LSLS     r1,r1,r5
;;;528      tmppriority |=  SystemHandlerSubPriority & tmp2;
0001f8  4022              ANDS     r2,r2,r4
0001fa  430a              ORRS     r2,r2,r1
;;;529    
;;;530      tmppriority = tmppriority << 0x04;
0001fc  0111              LSLS     r1,r2,#4
;;;531      tmp1 = SystemHandler & (u32)0xC0;
0001fe  f000f000          AND      r2,r0,#0xc0
;;;532      tmp1 = tmp1 >> 0x06; 
000202  0992              LSRS     r2,r2,#6
;;;533      tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
000204  f3c0f3c0          UBFX     r0,r0,#8,#2
;;;534      tmppriority = tmppriority << (tmp2 * 0x08);
000208  00c0              LSLS     r0,r0,#3
00020a  4081              LSLS     r1,r1,r0
;;;535      handlermask = (u32)0xFF << (tmp2 * 0x08);
00020c  23ff              MOVS     r3,#0xff
00020e  4083              LSLS     r3,r3,r0
;;;536      
;;;537      SCB->SHPR[tmp1] &= ~handlermask;
000210  eb06eb06          ADD      r0,r6,r2,LSL #2
000214  f600f600          ADD      r0,r0,#0xd18
000218  6802              LDR      r2,[r0,#0]
00021a  439a              BICS     r2,r2,r3
00021c  6002              STR      r2,[r0,#0]
;;;538      SCB->SHPR[tmp1] |= tmppriority;
00021e  6802              LDR      r2,[r0,#0]
000220  430a              ORRS     r2,r2,r1
000222  6002              STR      r2,[r0,#0]
;;;539    }
000224  bd70              POP      {r4-r6,pc}
;;;540    
                          ENDP

                  NVIC_GetSystemHandlerPendingBitStatus PROC
;;;554    ITStatus NVIC_GetSystemHandlerPendingBitStatus(u32 SystemHandler)
;;;555    {
000226  4601              MOV      r1,r0
;;;556      ITStatus bitstatus  = RESET;
000228  2000              MOVS     r0,#0
;;;557      u32 tmp = 0x00, tmppos = 0x00;
;;;558    
;;;559      /* Check the parameters */
;;;560      assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;561      
;;;562      tmppos = (SystemHandler >> 0x0A);
00022a  0a89              LSRS     r1,r1,#10
;;;563      tmppos &= (u32)0x0F;
00022c  f001f001          AND      r2,r1,#0xf
;;;564    
;;;565      tmppos = (u32)0x01 << tmppos;
000230  2101              MOVS     r1,#1
000232  4091              LSLS     r1,r1,r2
;;;566    
;;;567      tmp = SCB->SHCSR & tmppos;
000234  4a26              LDR      r2,|L1.720|
000236  3220              ADDS     r2,r2,#0x20
000238  6812              LDR      r2,[r2,#0]
00023a  400a              ANDS     r2,r2,r1
;;;568    
;;;569      if (tmp == tmppos)
00023c  428a              CMP      r2,r1
00023e  d100              BNE      |L1.578|
;;;570      {
;;;571        bitstatus = SET;
000240  2001              MOVS     r0,#1
                  |L1.578|
;;;572      }
;;;573      else
;;;574      {
;;;575        bitstatus = RESET;
;;;576      }
;;;577      return bitstatus;
;;;578    }
000242  4770              BX       lr
;;;579    
                          ENDP

                  NVIC_SetSystemHandlerPendingBit PROC
;;;599      /* Get the System Handler pending bit position */
;;;600      tmp = SystemHandler & (u32)0x1F;
000244  f000f000          AND      r0,r0,#0x1f
;;;601      /* Set the corresponding System Handler pending bit */
;;;602      SCB->ICSR |= ((u32)0x01 << tmp);
000248  4921              LDR      r1,|L1.720|
00024a  680b              LDR      r3,[r1,#0]
00024c  2201              MOVS     r2,#1
00024e  4082              LSLS     r2,r2,r0
000250  4313              ORRS     r3,r3,r2
000252  600b              STR      r3,[r1,#0]
;;;603    }
000254  4770              BX       lr
;;;604    
                          ENDP

                  NVIC_ClearSystemHandlerPendingBit PROC
;;;623      /* Get the System Handler pending bit position */
;;;624      tmp = SystemHandler & (u32)0x1F;
000256  f000f000          AND      r0,r0,#0x1f
;;;625      /* Clear the corresponding System Handler pending bit */
;;;626      SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
00025a  4b1d              LDR      r3,|L1.720|
00025c  6819              LDR      r1,[r3,#0]
00025e  1e40              SUBS     r0,r0,#1
000260  2201              MOVS     r2,#1
000262  4082              LSLS     r2,r2,r0
000264  4311              ORRS     r1,r1,r2
000266  6019              STR      r1,[r3,#0]
;;;627    }
000268  4770              BX       lr
;;;628    
                          ENDP

                  NVIC_GetSystemHandlerActiveBitStatus PROC
;;;646    ITStatus NVIC_GetSystemHandlerActiveBitStatus(u32 SystemHandler)
;;;647    {
00026a  4601              MOV      r1,r0
;;;648      ITStatus bitstatus  = RESET;
00026c  2000              MOVS     r0,#0
;;;649    
;;;650      u32 tmp = 0x00, tmppos = 0x00;
;;;651    
;;;652      /* Check the parameters */
;;;653      assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
;;;654      
;;;655      tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
00026e  f3c1f3c1          UBFX     r2,r1,#14,#4
;;;656    
;;;657      tmppos = (u32)0x01 << tmppos;
000272  2101              MOVS     r1,#1
000274  4091              LSLS     r1,r1,r2
;;;658    
;;;659      tmp = SCB->SHCSR & tmppos;
000276  4a16              LDR      r2,|L1.720|
000278  3220              ADDS     r2,r2,#0x20
00027a  6812              LDR      r2,[r2,#0]
00027c  400a              ANDS     r2,r2,r1
;;;660    
;;;661      if (tmp == tmppos)
00027e  428a              CMP      r2,r1
000280  d100              BNE      |L1.644|
;;;662      {
;;;663        bitstatus = SET;
000282  2001              MOVS     r0,#1
                  |L1.644|
;;;664      }
;;;665      else
;;;666      {
;;;667        bitstatus = RESET;
;;;668      }
;;;669      return bitstatus;
;;;670    }
000284  4770              BX       lr
;;;671    
                          ENDP

                  NVIC_GetFaultHandlerSources PROC
;;;693      
;;;694      tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
000286  f3c0f3c0          UBFX     r1,r0,#18,#2
;;;695      tmppos = (SystemHandler >> 0x14) & (u32)0x03;
00028a  f3c0f3c0          UBFX     r0,r0,#20,#2
;;;696    
;;;697      if (tmpreg == 0x00)
00028e  f04ff04f          MOV      r2,#0xe000e000
000292  b911              CBNZ     r1,|L1.666|
;;;698      {
;;;699        faultsources = SCB->HFSR;
000294  f8d2f8d2          LDR      r0,[r2,#0xd2c]
;;;700      }
;;;701      else if (tmpreg == 0x01)
;;;702      {
;;;703        faultsources = SCB->CFSR >> (tmppos * 0x08);
;;;704        if (tmppos != 0x02)
;;;705        {
;;;706          faultsources &= (u32)0x0F;
;;;707        }
;;;708        else
;;;709        {
;;;710          faultsources &= (u32)0xFF;
;;;711        }
;;;712      }
;;;713      else
;;;714      {
;;;715        faultsources = SCB->DFSR;
;;;716      }
;;;717      return faultsources;
;;;718    }
000298  4770              BX       lr
                  |L1.666|
00029a  2901              CMP      r1,#1                 ;701
00029c  d10a              BNE      |L1.692|
00029e  f8d2f8d2          LDR      r1,[r2,#0xd28]        ;703
0002a2  00c2              LSLS     r2,r0,#3              ;703
0002a4  40d1              LSRS     r1,r1,r2              ;703
0002a6  2802              CMP      r0,#2                 ;704
0002a8  d002              BEQ      |L1.688|
0002aa  f001f001          AND      r0,r1,#0xf            ;706
0002ae  4770              BX       lr
                  |L1.688|
0002b0  b2c8              UXTB     r0,r1                 ;710
0002b2  4770              BX       lr
                  |L1.692|
0002b4  f8d2f8d2          LDR      r0,[r2,#0xd30]        ;715
0002b8  4770              BX       lr
;;;719    
                          ENDP

                  NVIC_GetFaultAddress PROC
;;;739      
;;;740      tmp = (SystemHandler >> 0x16) & (u32)0x01;
0002ba  f3c0f3c0          UBFX     r0,r0,#22,#1
;;;741    
;;;742      if (tmp == 0x00)
0002be  f04ff04f          MOV      r1,#0xe000e000
0002c2  b910              CBNZ     r0,|L1.714|
;;;743      {
;;;744        faultaddress = SCB->MMFAR;
0002c4  f8d1f8d1          LDR      r0,[r1,#0xd34]
;;;745      }
;;;746      else
;;;747      {
;;;748        faultaddress = SCB->BFAR;
;;;749      }
;;;750      return faultaddress;
;;;751    }
0002c8  4770              BX       lr
                  |L1.714|
0002ca  f8d1f8d1          LDR      r0,[r1,#0xd38]        ;748
0002ce  4770              BX       lr
;;;752    
                          ENDP

                  |L1.720|
0002d0  e000ed04          DCD      0xe000ed04
                  |L1.724|
0002d4  05fa0000          DCD      0x05fa0000
                  |L1.728|
0002d8  e000ef00          DCD      0xe000ef00
                  |L1.732|
0002dc  1fffff80          DCD      0x1fffff80
