; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\stm32f10x_tim.o --depend=.\output\stm32f10x_tim.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\stm32f10x_tim.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_tim.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;136    void TIM_DeInit(TIM_TypeDef* TIMx)
;;;137    {
000000  b510              PUSH     {r4,lr}
;;;138      /* Check the parameters */
;;;139      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;140     
;;;141      switch (*(u32*)&TIMx)
000002  4afb              LDR      r2,|L1.1008|
000004  1a81              SUBS     r1,r0,r2
000006  1513              ASRS     r3,r2,#20
000008  14d4              ASRS     r4,r2,#19
00000a  4290              CMP      r0,r2
00000c  d04f              BEQ      |L1.174|
00000e  dc13              BGT      |L1.56|
000010  f1b0f1b0          CMP      r0,#0x40000000
000014  d02d              BEQ      |L1.114|
000016  49f7              LDR      r1,|L1.1012|
000018  1840              ADDS     r0,r0,r1
00001a  d034              BEQ      |L1.134|
00001c  4298              CMP      r0,r3
00001e  d03c              BEQ      |L1.154|
000020  42a0              CMP      r0,r4
000022  d158              BNE      |L1.214|
;;;142      {
;;;143        case TIM1_BASE:
;;;144          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
;;;145          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
;;;146          break; 
;;;147          
;;;148        case TIM2_BASE:
;;;149          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;150          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;151          break;
;;;152     
;;;153        case TIM3_BASE:
;;;154          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;155          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
;;;156          break;
;;;157     
;;;158        case TIM4_BASE:
;;;159          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;160          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
;;;161          break;
;;;162          
;;;163        case TIM5_BASE:
;;;164          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
000024  2101              MOVS     r1,#1
000026  2008              MOVS     r0,#8
000028  f7fff7ff          BL       RCC_APB1PeriphResetCmd
;;;165          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
00002c  2100              MOVS     r1,#0
00002e  e8bde8bd          POP      {r4,lr}
000032  2008              MOVS     r0,#8
000034  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.56|
000038  4299              CMP      r1,r3                 ;141
00003a  d042              BEQ      |L1.194|
00003c  f5b1f5b1          CMP      r1,#0x11c00           ;141
000040  d00d              BEQ      |L1.94|
000042  f5b1f5b1          CMP      r1,#0x12400           ;141
000046  d146              BNE      |L1.214|
;;;166          break;
;;;167          
;;;168        case TIM6_BASE:
;;;169          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
;;;170          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
;;;171          break;
;;;172          
;;;173        case TIM7_BASE:
;;;174          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
;;;175          RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
;;;176          break;
;;;177          
;;;178        case TIM8_BASE:
;;;179          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
000048  2101              MOVS     r1,#1
00004a  034c              LSLS     r4,r1,#13
00004c  4620              MOV      r0,r4
00004e  f7fff7ff          BL       RCC_APB2PeriphResetCmd
;;;180          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
000052  4620              MOV      r0,r4
000054  e8bde8bd          POP      {r4,lr}
000058  2100              MOVS     r1,#0
00005a  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.94|
00005e  2101              MOVS     r1,#1                 ;144
000060  4620              MOV      r0,r4                 ;144
000062  f7fff7ff          BL       RCC_APB2PeriphResetCmd
000066  4620              MOV      r0,r4                 ;145
000068  e8bde8bd          POP      {r4,lr}               ;145
00006c  2100              MOVS     r1,#0                 ;145
00006e  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.114|
000072  2101              MOVS     r1,#1                 ;149
000074  4608              MOV      r0,r1                 ;149
000076  f7fff7ff          BL       RCC_APB1PeriphResetCmd
00007a  2100              MOVS     r1,#0                 ;150
00007c  e8bde8bd          POP      {r4,lr}               ;150
000080  2001              MOVS     r0,#1                 ;150
000082  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.134|
000086  2101              MOVS     r1,#1                 ;154
000088  2002              MOVS     r0,#2                 ;154
00008a  f7fff7ff          BL       RCC_APB1PeriphResetCmd
00008e  2100              MOVS     r1,#0                 ;155
000090  e8bde8bd          POP      {r4,lr}               ;155
000094  2002              MOVS     r0,#2                 ;155
000096  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.154|
00009a  2101              MOVS     r1,#1                 ;159
00009c  2004              MOVS     r0,#4                 ;159
00009e  f7fff7ff          BL       RCC_APB1PeriphResetCmd
0000a2  2100              MOVS     r1,#0                 ;160
0000a4  e8bde8bd          POP      {r4,lr}               ;160
0000a8  2004              MOVS     r0,#4                 ;160
0000aa  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.174|
0000ae  2101              MOVS     r1,#1                 ;169
0000b0  2010              MOVS     r0,#0x10              ;169
0000b2  f7fff7ff          BL       RCC_APB1PeriphResetCmd
0000b6  2100              MOVS     r1,#0                 ;170
0000b8  e8bde8bd          POP      {r4,lr}               ;170
0000bc  2010              MOVS     r0,#0x10              ;170
0000be  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.194|
0000c2  2101              MOVS     r1,#1                 ;174
0000c4  2020              MOVS     r0,#0x20              ;174
0000c6  f7fff7ff          BL       RCC_APB1PeriphResetCmd
0000ca  2100              MOVS     r1,#0                 ;175
0000cc  e8bde8bd          POP      {r4,lr}               ;175
0000d0  2020              MOVS     r0,#0x20              ;175
0000d2  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.214|
;;;181          break; 
;;;182          
;;;183        default:
;;;184          break;
;;;185      }
;;;186    }
0000d6  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  TIM_TimeBaseInit PROC
;;;207      /* Select the Counter Mode and set the clock division */
;;;208      TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
0000d8  8802              LDRH     r2,[r0,#0]
0000da  f002f002          AND      r2,r2,#0x8f
0000de  8002              STRH     r2,[r0,#0]
;;;209      TIMx->CR1 |= (u32)TIM_TimeBaseInitStruct->TIM_ClockDivision |
0000e0  88ca              LDRH     r2,[r1,#6]
0000e2  884b              LDRH     r3,[r1,#2]
0000e4  431a              ORRS     r2,r2,r3
0000e6  8803              LDRH     r3,[r0,#0]
0000e8  431a              ORRS     r2,r2,r3
0000ea  8002              STRH     r2,[r0,#0]
;;;210                    TIM_TimeBaseInitStruct->TIM_CounterMode;
;;;211      /* Set the Autoreload value */
;;;212      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
0000ec  888a              LDRH     r2,[r1,#4]
0000ee  8582              STRH     r2,[r0,#0x2c]
;;;213    
;;;214      /* Set the Prescaler value */
;;;215      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
0000f0  880a              LDRH     r2,[r1,#0]
0000f2  8502              STRH     r2,[r0,#0x28]
;;;216    
;;;217      /* Generate an update event to reload the Prescaler value immediatly */
;;;218      TIMx->EGR = TIM_PSCReloadMode_Immediate;
0000f4  2201              MOVS     r2,#1
0000f6  8282              STRH     r2,[r0,#0x14]
;;;219        
;;;220      if (((*(u32*)&TIMx) == TIM1_BASE) || ((*(u32*)&TIMx) == TIM8_BASE))  
0000f8  4abf              LDR      r2,|L1.1016|
0000fa  4290              CMP      r0,r2
0000fc  d002              BEQ      |L1.260|
0000fe  4abf              LDR      r2,|L1.1020|
000100  4290              CMP      r0,r2
000102  d101              BNE      |L1.264|
                  |L1.260|
;;;221      {
;;;222        /* Set the Repetition Counter value */
;;;223        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
000104  7a09              LDRB     r1,[r1,#8]
000106  8601              STRH     r1,[r0,#0x30]
                  |L1.264|
;;;224      }        
;;;225    }
000108  4770              BX       lr
;;;226    
                          ENDP

                  TIM_OC1Init PROC
;;;239    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
;;;240    {
00010a  b530              PUSH     {r4,r5,lr}
;;;241      u16 tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;242       
;;;243      /* Check the parameters */
;;;244      assert_param(IS_TIM_123458_PERIPH(TIMx)); 
;;;245      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;246      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;247      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;248    
;;;249      /* Disable the Channel 1: Reset the CC1E Bit */
;;;250      TIMx->CCER &= CCER_CC1E_Reset;
00010c  8c02              LDRH     r2,[r0,#0x20]
00010e  f022f022          BIC      r2,r2,#1
000112  8402              STRH     r2,[r0,#0x20]
;;;251      
;;;252      /* Get the TIMx CCER register value */
;;;253      tmpccer = TIMx->CCER;
000114  8c02              LDRH     r2,[r0,#0x20]
;;;254    
;;;255      /* Get the TIMx CR2 register value */
;;;256      tmpcr2 =  TIMx->CR2;
000116  8883              LDRH     r3,[r0,#4]
;;;257      
;;;258      /* Get the TIMx CCMR1 register value */
;;;259      tmpccmrx = TIMx->CCMR1;
000118  8b04              LDRH     r4,[r0,#0x18]
;;;260        
;;;261      /* Reset the Output Compare Mode Bits */
;;;262      tmpccmrx &= CCMR_OC13M_Mask;
00011a  f024f024          BIC      r5,r4,#0x70
;;;263      
;;;264      /* Select the Output Compare Mode */
;;;265      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
00011e  880c              LDRH     r4,[r1,#0]
000120  432c              ORRS     r4,r4,r5
;;;266      
;;;267      /* Reset the Output Polarity level */
;;;268      tmpccer &= CCER_CC1P_Reset;
000122  f022f022          BIC      r2,r2,#2
;;;269    
;;;270      /* Set the Output Compare Polarity */
;;;271      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
000126  890d              LDRH     r5,[r1,#8]
000128  4315              ORRS     r5,r5,r2
;;;272      
;;;273      /* Set the Output State */
;;;274      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
00012a  884a              LDRH     r2,[r1,#2]
00012c  432a              ORRS     r2,r2,r5
;;;275      
;;;276      /* Set the Capture Compare Register value */
;;;277      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
00012e  88cd              LDRH     r5,[r1,#6]
000130  8685              STRH     r5,[r0,#0x34]
;;;278      
;;;279      if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
000132  4db1              LDR      r5,|L1.1016|
000134  42a8              CMP      r0,r5
000136  d002              BEQ      |L1.318|
000138  4db0              LDR      r5,|L1.1020|
00013a  42a8              CMP      r0,r5
00013c  d10f              BNE      |L1.350|
                  |L1.318|
;;;280      {
;;;281        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;282        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;283        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;284        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;285        
;;;286        /* Reset the Output N Polarity level */
;;;287        tmpccer &= CCER_CC1NP_Reset;
00013e  f022f022          BIC      r2,r2,#8
;;;288    
;;;289        /* Set the Output N Polarity */
;;;290        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
000142  894d              LDRH     r5,[r1,#0xa]
000144  4315              ORRS     r5,r5,r2
;;;291    
;;;292        /* Reset the Output N State */
;;;293        tmpccer &= CCER_CC1NE_Reset;
000146  f025f025          BIC      r5,r5,#4
;;;294        
;;;295        /* Set the Output N State */
;;;296        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
00014a  888a              LDRH     r2,[r1,#4]
00014c  432a              ORRS     r2,r2,r5
;;;297    
;;;298        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;299        tmpcr2 &= CR2_OIS1_Reset;
00014e  f423f423          BIC      r3,r3,#0x8100
;;;300        tmpcr2 &= CR2_OIS1N_Reset;
000152  f423f423          BIC      r3,r3,#0x8200
;;;301    
;;;302        /* Set the Output Idle state */
;;;303        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
000156  898d              LDRH     r5,[r1,#0xc]
000158  431d              ORRS     r5,r5,r3
;;;304    
;;;305        /* Set the Output N Idle state */
;;;306        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
00015a  89cb              LDRH     r3,[r1,#0xe]
00015c  432b              ORRS     r3,r3,r5
                  |L1.350|
;;;307      }
;;;308      /* Write to TIMx CR2 */
;;;309      TIMx->CR2 = tmpcr2;
00015e  8083              STRH     r3,[r0,#4]
;;;310      
;;;311      /* Write to TIMx CCMR1 */
;;;312      TIMx->CCMR1 = tmpccmrx;
000160  8304              STRH     r4,[r0,#0x18]
;;;313      
;;;314      /* Write to TIMx CCER */
;;;315      TIMx->CCER = tmpccer;
000162  8402              STRH     r2,[r0,#0x20]
;;;316    }
000164  bd30              POP      {r4,r5,pc}
;;;317    
                          ENDP

                  TIM_OC2Init PROC
;;;330    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
;;;331    {
000166  b530              PUSH     {r4,r5,lr}
;;;332      u16 tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;333       
;;;334      /* Check the parameters */
;;;335      assert_param(IS_TIM_123458_PERIPH(TIMx)); 
;;;336      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;337      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;338      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;339    
;;;340      /* Disable the Channel 2: Reset the CC2E Bit */
;;;341      TIMx->CCER &= CCER_CC2E_Reset;
000168  8c02              LDRH     r2,[r0,#0x20]
00016a  f022f022          BIC      r2,r2,#0x10
00016e  8402              STRH     r2,[r0,#0x20]
;;;342      
;;;343      /* Get the TIMx CCER register value */  
;;;344      tmpccer = TIMx->CCER;
000170  8c02              LDRH     r2,[r0,#0x20]
;;;345    
;;;346      /* Get the TIMx CR2 register value */
;;;347      tmpcr2 =  TIMx->CR2;
000172  8883              LDRH     r3,[r0,#4]
;;;348      
;;;349      /* Get the TIMx CCMR1 register value */
;;;350      tmpccmrx = TIMx->CCMR1;
000174  8b04              LDRH     r4,[r0,#0x18]
;;;351        
;;;352      /* Reset the Output Compare Mode Bits */
;;;353      tmpccmrx &= CCMR_OC24M_Mask;
000176  f424f424          BIC      r5,r4,#0x7000
;;;354      
;;;355      /* Select the Output Compare Mode */
;;;356      tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
00017a  880c              LDRH     r4,[r1,#0]
00017c  0624              LSLS     r4,r4,#24
00017e  ea45ea45          ORR      r4,r5,r4,LSR #16
;;;357      
;;;358      /* Reset the Output Polarity level */
;;;359      tmpccer &= CCER_CC2P_Reset;
000182  f022f022          BIC      r2,r2,#0x20
;;;360    
;;;361      /* Set the Output Compare Polarity */
;;;362      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 4);
000186  890d              LDRH     r5,[r1,#8]
000188  052d              LSLS     r5,r5,#20
00018a  ea42ea42          ORR      r5,r2,r5,LSR #16
;;;363      
;;;364      /* Set the Output State */
;;;365      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 4);
00018e  884a              LDRH     r2,[r1,#2]
000190  0512              LSLS     r2,r2,#20
000192  ea45ea45          ORR      r2,r5,r2,LSR #16
;;;366      
;;;367      /* Set the Capture Compare Register value */
;;;368      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
000196  88cd              LDRH     r5,[r1,#6]
000198  8705              STRH     r5,[r0,#0x38]
;;;369      
;;;370      if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
00019a  4d97              LDR      r5,|L1.1016|
00019c  42a8              CMP      r0,r5
00019e  d002              BEQ      |L1.422|
0001a0  4d96              LDR      r5,|L1.1020|
0001a2  42a8              CMP      r0,r5
0001a4  d117              BNE      |L1.470|
                  |L1.422|
;;;371      {
;;;372        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;373        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;374        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;375        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;376        
;;;377        /* Reset the Output N Polarity level */
;;;378        tmpccer &= CCER_CC2NP_Reset;
0001a6  f022f022          BIC      r2,r2,#0x80
;;;379    
;;;380        /* Set the Output N Polarity */
;;;381        tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
0001aa  894d              LDRH     r5,[r1,#0xa]
0001ac  052d              LSLS     r5,r5,#20
0001ae  ea42ea42          ORR      r5,r2,r5,LSR #16
;;;382    
;;;383        /* Reset the Output N State */
;;;384        tmpccer &= CCER_CC2NE_Reset;
0001b2  f025f025          BIC      r5,r5,#0x40
;;;385        
;;;386        /* Set the Output N State */
;;;387        tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 4);
0001b6  888a              LDRH     r2,[r1,#4]
0001b8  0512              LSLS     r2,r2,#20
0001ba  ea45ea45          ORR      r2,r5,r2,LSR #16
;;;388    
;;;389        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;390        tmpcr2 &= CR2_OIS2_Reset;
0001be  f423f423          BIC      r3,r3,#0x8400
;;;391        tmpcr2 &= CR2_OIS2N_Reset;
0001c2  f423f423          BIC      r3,r3,#0x8800
;;;392    
;;;393        /* Set the Output Idle state */
;;;394        tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 2);
0001c6  898d              LDRH     r5,[r1,#0xc]
0001c8  04ad              LSLS     r5,r5,#18
0001ca  ea43ea43          ORR      r5,r3,r5,LSR #16
;;;395    
;;;396        /* Set the Output N Idle state */
;;;397        tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
0001ce  89c9              LDRH     r1,[r1,#0xe]
0001d0  0489              LSLS     r1,r1,#18
0001d2  ea45ea45          ORR      r3,r5,r1,LSR #16
                  |L1.470|
;;;398      }
;;;399    
;;;400      /* Write to TIMx CR2 */
;;;401      TIMx->CR2 = tmpcr2;
0001d6  8083              STRH     r3,[r0,#4]
;;;402      
;;;403      /* Write to TIMx CCMR1 */
;;;404      TIMx->CCMR1 = tmpccmrx;
0001d8  8304              STRH     r4,[r0,#0x18]
;;;405      
;;;406      /* Write to TIMx CCER */
;;;407      TIMx->CCER = tmpccer;
0001da  8402              STRH     r2,[r0,#0x20]
;;;408    }
0001dc  bd30              POP      {r4,r5,pc}
;;;409    
                          ENDP

                  TIM_OC3Init PROC
;;;422    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
;;;423    {
0001de  b530              PUSH     {r4,r5,lr}
;;;424      u16 tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;425       
;;;426      /* Check the parameters */
;;;427      assert_param(IS_TIM_123458_PERIPH(TIMx)); 
;;;428      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;429      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;430      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;431    
;;;432      /* Disable the Channel 2: Reset the CC2E Bit */
;;;433      TIMx->CCER &= CCER_CC3E_Reset;
0001e0  8c02              LDRH     r2,[r0,#0x20]
0001e2  f422f422          BIC      r2,r2,#0x100
0001e6  8402              STRH     r2,[r0,#0x20]
;;;434      
;;;435      /* Get the TIMx CCER register value */
;;;436      tmpccer = TIMx->CCER;
0001e8  8c02              LDRH     r2,[r0,#0x20]
;;;437    
;;;438      /* Get the TIMx CR2 register value */
;;;439      tmpcr2 =  TIMx->CR2;
0001ea  8883              LDRH     r3,[r0,#4]
;;;440      
;;;441      /* Get the TIMx CCMR2 register value */
;;;442      tmpccmrx = TIMx->CCMR2;
0001ec  8b84              LDRH     r4,[r0,#0x1c]
;;;443        
;;;444      /* Reset the Output Compare Mode Bits */
;;;445      tmpccmrx &= CCMR_OC13M_Mask;
0001ee  f024f024          BIC      r5,r4,#0x70
;;;446      
;;;447      /* Select the Output Compare Mode */
;;;448      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
0001f2  880c              LDRH     r4,[r1,#0]
0001f4  432c              ORRS     r4,r4,r5
;;;449      
;;;450      /* Reset the Output Polarity level */
;;;451      tmpccer &= CCER_CC3P_Reset;
0001f6  f422f422          BIC      r2,r2,#0x200
;;;452    
;;;453      /* Set the Output Compare Polarity */
;;;454      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 8);
0001fa  890d              LDRH     r5,[r1,#8]
0001fc  062d              LSLS     r5,r5,#24
0001fe  ea42ea42          ORR      r5,r2,r5,LSR #16
;;;455      
;;;456      /* Set the Output State */
;;;457      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 8);
000202  884a              LDRH     r2,[r1,#2]
000204  0612              LSLS     r2,r2,#24
000206  ea45ea45          ORR      r2,r5,r2,LSR #16
;;;458      
;;;459      /* Set the Capture Compare Register value */
;;;460      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
00020a  88cd              LDRH     r5,[r1,#6]
00020c  8785              STRH     r5,[r0,#0x3c]
;;;461      
;;;462      if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
00020e  4d7a              LDR      r5,|L1.1016|
000210  42a8              CMP      r0,r5
000212  d002              BEQ      |L1.538|
000214  4d79              LDR      r5,|L1.1020|
000216  42a8              CMP      r0,r5
000218  d117              BNE      |L1.586|
                  |L1.538|
;;;463      {
;;;464        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;465        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;466        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;467        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;468        
;;;469        /* Reset the Output N Polarity level */
;;;470        tmpccer &= CCER_CC3NP_Reset;
00021a  f422f422          BIC      r2,r2,#0x800
;;;471    
;;;472        /* Set the Output N Polarity */
;;;473        tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
00021e  894d              LDRH     r5,[r1,#0xa]
000220  062d              LSLS     r5,r5,#24
000222  ea42ea42          ORR      r5,r2,r5,LSR #16
;;;474    
;;;475        /* Reset the Output N State */
;;;476        tmpccer &= CCER_CC3NE_Reset;
000226  f425f425          BIC      r5,r5,#0x400
;;;477        
;;;478        /* Set the Output N State */
;;;479        tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputNState << 8);
00022a  888a              LDRH     r2,[r1,#4]
00022c  0612              LSLS     r2,r2,#24
00022e  ea45ea45          ORR      r2,r5,r2,LSR #16
;;;480    
;;;481        /* Reset the Ouput Compare and Output Compare N IDLE State */
;;;482        tmpcr2 &= CR2_OIS3_Reset;
000232  f423f423          BIC      r3,r3,#0x9000
;;;483        tmpcr2 &= CR2_OIS3N_Reset;
000236  f423f423          BIC      r3,r3,#0xa000
;;;484    
;;;485        /* Set the Output Idle state */
;;;486        tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 4);
00023a  898d              LDRH     r5,[r1,#0xc]
00023c  052d              LSLS     r5,r5,#20
00023e  ea43ea43          ORR      r5,r3,r5,LSR #16
;;;487    
;;;488        /* Set the Output N Idle state */
;;;489        tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
000242  89c9              LDRH     r1,[r1,#0xe]
000244  0509              LSLS     r1,r1,#20
000246  ea45ea45          ORR      r3,r5,r1,LSR #16
                  |L1.586|
;;;490      }
;;;491    
;;;492      /* Write to TIMx CR2 */
;;;493      TIMx->CR2 = tmpcr2;
00024a  8083              STRH     r3,[r0,#4]
;;;494      
;;;495      /* Write to TIMx CCMR2 */
;;;496      TIMx->CCMR2 = tmpccmrx;
00024c  8384              STRH     r4,[r0,#0x1c]
;;;497      
;;;498      /* Write to TIMx CCER */
;;;499      TIMx->CCER = tmpccer;
00024e  8402              STRH     r2,[r0,#0x20]
;;;500    }
000250  bd30              POP      {r4,r5,pc}
;;;501    
                          ENDP

                  TIM_OC4Init PROC
;;;514    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
;;;515    {
000252  b530              PUSH     {r4,r5,lr}
;;;516      u16 tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;517       
;;;518      /* Check the parameters */
;;;519      assert_param(IS_TIM_123458_PERIPH(TIMx)); 
;;;520      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;521      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;522      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;523    
;;;524      /* Disable the Channel 2: Reset the CC4E Bit */
;;;525      TIMx->CCER &= CCER_CC4E_Reset;
000254  8c02              LDRH     r2,[r0,#0x20]
000256  f422f422          BIC      r2,r2,#0x1000
00025a  8402              STRH     r2,[r0,#0x20]
;;;526      
;;;527      /* Get the TIMx CCER register value */
;;;528      tmpccer = TIMx->CCER;
00025c  8c04              LDRH     r4,[r0,#0x20]
;;;529    
;;;530      /* Get the TIMx CR2 register value */
;;;531      tmpcr2 =  TIMx->CR2;
00025e  8882              LDRH     r2,[r0,#4]
;;;532      
;;;533      /* Get the TIMx CCMR2 register value */
;;;534      tmpccmrx = TIMx->CCMR2;
000260  8b83              LDRH     r3,[r0,#0x1c]
;;;535        
;;;536      /* Reset the Output Compare Mode Bits */
;;;537      tmpccmrx &= CCMR_OC24M_Mask;
000262  f423f423          BIC      r5,r3,#0x7000
;;;538      
;;;539      /* Select the Output Compare Mode */
;;;540      tmpccmrx |= (u16)(TIM_OCInitStruct->TIM_OCMode << 8);
000266  880b              LDRH     r3,[r1,#0]
000268  061b              LSLS     r3,r3,#24
00026a  ea45ea45          ORR      r3,r5,r3,LSR #16
;;;541      
;;;542      /* Reset the Output Polarity level */
;;;543      tmpccer &= CCER_CC4P_Reset;
00026e  f424f424          BIC      r5,r4,#0x2000
;;;544    
;;;545      /* Set the Output Compare Polarity */
;;;546      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OCPolarity << 12);
000272  890c              LDRH     r4,[r1,#8]
000274  0724              LSLS     r4,r4,#28
000276  ea45ea45          ORR      r4,r5,r4,LSR #16
;;;547      
;;;548      /* Set the Output State */
;;;549      tmpccer |= (u16)(TIM_OCInitStruct->TIM_OutputState << 12);
00027a  884d              LDRH     r5,[r1,#2]
00027c  072d              LSLS     r5,r5,#28
00027e  ea44ea44          ORR      r5,r4,r5,LSR #16
;;;550      
;;;551      /* Set the Capture Compare Register value */
;;;552      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
000282  88cc              LDRH     r4,[r1,#6]
000284  f8a0f8a0          STRH     r4,[r0,#0x40]
;;;553      
;;;554      if((*(u32*)&TIMx == TIM1_BASE) || (*(u32*)&TIMx == TIM8_BASE))
000288  4c5b              LDR      r4,|L1.1016|
00028a  42a0              CMP      r0,r4
00028c  d002              BEQ      |L1.660|
00028e  4c5b              LDR      r4,|L1.1020|
000290  42a0              CMP      r0,r4
000292  d105              BNE      |L1.672|
                  |L1.660|
;;;555      {
;;;556        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;557    
;;;558        /* Reset the Ouput Compare IDLE State */
;;;559        tmpcr2 &= CR2_OIS4_Reset;
000294  f3c2f3c2          UBFX     r4,r2,#0,#14
;;;560    
;;;561        /* Set the Output Idle state */
;;;562        tmpcr2 |= (u16)(TIM_OCInitStruct->TIM_OCIdleState << 6);
000298  8989              LDRH     r1,[r1,#0xc]
00029a  0589              LSLS     r1,r1,#22
00029c  ea44ea44          ORR      r2,r4,r1,LSR #16
                  |L1.672|
;;;563      }
;;;564    
;;;565      /* Write to TIMx CR2 */
;;;566      TIMx->CR2 = tmpcr2;
0002a0  8082              STRH     r2,[r0,#4]
;;;567      
;;;568      /* Write to TIMx CCMR2 */  
;;;569      TIMx->CCMR2 = tmpccmrx;
0002a2  8383              STRH     r3,[r0,#0x1c]
;;;570      
;;;571      /* Write to TIMx CCER */
;;;572      TIMx->CCER = tmpccer;
0002a4  8405              STRH     r5,[r0,#0x20]
;;;573    }
0002a6  bd30              POP      {r4,r5,pc}
;;;574    
                          ENDP

                  TIM_SetIC4Prescaler PROC
;;;2758     /* Reset the IC4PSC Bits */
;;;2759     TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
0002a8  8b82              LDRH     r2,[r0,#0x1c]
0002aa  f422f422          BIC      r2,r2,#0xc00
0002ae  8382              STRH     r2,[r0,#0x1c]
;;;2760   
;;;2761     /* Set the IC4PSC value */
;;;2762     TIMx->CCMR2 |= (u16)(TIM_ICPSC << 8);
0002b0  8b82              LDRH     r2,[r0,#0x1c]
0002b2  ea42ea42          ORR      r2,r2,r1,LSL #8
0002b6  8382              STRH     r2,[r0,#0x1c]
;;;2763   }
0002b8  4770              BX       lr
;;;2764   
                          ENDP

                  TI4_Config PROC
;;;3198                          u16 TIM_ICFilter)
;;;3199   {
0002ba  b530              PUSH     {r4,r5,lr}
;;;3200     u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;
;;;3201   
;;;3202     /* Disable the Channel 4: Reset the CC4E Bit */
;;;3203     TIMx->CCER &= CCER_CC4E_Reset;
0002bc  8c04              LDRH     r4,[r0,#0x20]
0002be  f424f424          BIC      r4,r4,#0x1000
0002c2  8404              STRH     r4,[r0,#0x20]
;;;3204   
;;;3205     tmpccmr2 = TIMx->CCMR2;
0002c4  8b85              LDRH     r5,[r0,#0x1c]
;;;3206     tmpccer = TIMx->CCER;
0002c6  8c04              LDRH     r4,[r0,#0x20]
;;;3207     tmp = (u16)(TIM_ICPolarity << 12);
0002c8  0309              LSLS     r1,r1,#12
;;;3208   
;;;3209     /* Select the Input and set the filter */
;;;3210     tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
0002ca  f425f425          BIC      r5,r5,#0xf300
;;;3211     tmpccmr2 |= (u16)(TIM_ICSelection << 8) | (u16)(TIM_ICFilter << 12);
0002ce  0212              LSLS     r2,r2,#8
0002d0  ea42ea42          ORR      r2,r2,r3,LSL #12
0002d4  432a              ORRS     r2,r2,r5
;;;3212   
;;;3213     /* Select the Polarity and set the CC4E Bit */
;;;3214     tmpccer &= CCER_CC4P_Reset;
0002d6  f424f424          BIC      r3,r4,#0x2000
;;;3215     tmpccer |= tmp | CCER_CC4E_Set;
0002da  430b              ORRS     r3,r3,r1
0002dc  f443f443          ORR      r1,r3,#0x1000
;;;3216   
;;;3217     /* Write to TIMx CCMR2 and CCER registers */
;;;3218     TIMx->CCMR2 = tmpccmr2;
0002e0  8382              STRH     r2,[r0,#0x1c]
;;;3219     TIMx->CCER = tmpccer ;
0002e2  8401              STRH     r1,[r0,#0x20]
;;;3220   }
0002e4  bd30              POP      {r4,r5,pc}
;;;3221   
                          ENDP

                  TIM_SetIC3Prescaler PROC
;;;2730     /* Reset the IC3PSC Bits */
;;;2731     TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
0002e6  8b82              LDRH     r2,[r0,#0x1c]
0002e8  f022f022          BIC      r2,r2,#0xc
0002ec  8382              STRH     r2,[r0,#0x1c]
;;;2732   
;;;2733     /* Set the IC3PSC value */
;;;2734     TIMx->CCMR2 |= TIM_ICPSC;
0002ee  8b82              LDRH     r2,[r0,#0x1c]
0002f0  430a              ORRS     r2,r2,r1
0002f2  8382              STRH     r2,[r0,#0x1c]
;;;2735   }
0002f4  4770              BX       lr
;;;2736   
                          ENDP

                  TI3_Config PROC
;;;3151                          u16 TIM_ICFilter)
;;;3152   {
0002f6  b530              PUSH     {r4,r5,lr}
;;;3153     u16 tmpccmr2 = 0, tmpccer = 0, tmp = 0;
;;;3154   
;;;3155     /* Disable the Channel 3: Reset the CC3E Bit */
;;;3156     TIMx->CCER &= CCER_CC3E_Reset;
0002f8  8c04              LDRH     r4,[r0,#0x20]
0002fa  f424f424          BIC      r4,r4,#0x100
0002fe  8404              STRH     r4,[r0,#0x20]
;;;3157   
;;;3158     tmpccmr2 = TIMx->CCMR2;
000300  8b85              LDRH     r5,[r0,#0x1c]
;;;3159     tmpccer = TIMx->CCER;
000302  8c04              LDRH     r4,[r0,#0x20]
;;;3160     tmp = (u16)(TIM_ICPolarity << 8);
000304  0209              LSLS     r1,r1,#8
;;;3161   
;;;3162     /* Select the Input and set the filter */
;;;3163     tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
000306  f025f025          BIC      r5,r5,#0xf3
;;;3164     tmpccmr2 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
00030a  ea42ea42          ORR      r3,r2,r3,LSL #4
00030e  432b              ORRS     r3,r3,r5
;;;3165   
;;;3166     /* Select the Polarity and set the CC3E Bit */
;;;3167     tmpccer &= CCER_CC3P_Reset;
000310  f424f424          BIC      r2,r4,#0x200
;;;3168     tmpccer |= tmp | CCER_CC3E_Set;
000314  430a              ORRS     r2,r2,r1
000316  f442f442          ORR      r1,r2,#0x100
;;;3169   
;;;3170     /* Write to TIMx CCMR2 and CCER registers */
;;;3171     TIMx->CCMR2 = tmpccmr2;
00031a  8383              STRH     r3,[r0,#0x1c]
;;;3172     TIMx->CCER = tmpccer;
00031c  8401              STRH     r1,[r0,#0x20]
;;;3173   }
00031e  bd30              POP      {r4,r5,pc}
;;;3174   
                          ENDP

                  TIM_SetIC2Prescaler PROC
;;;2702     /* Reset the IC2PSC Bits */
;;;2703     TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
000320  8b02              LDRH     r2,[r0,#0x18]
000322  f422f422          BIC      r2,r2,#0xc00
000326  8302              STRH     r2,[r0,#0x18]
;;;2704   
;;;2705     /* Set the IC2PSC value */
;;;2706     TIMx->CCMR1 |= (u16)(TIM_ICPSC << 8);
000328  8b02              LDRH     r2,[r0,#0x18]
00032a  ea42ea42          ORR      r2,r2,r1,LSL #8
00032e  8302              STRH     r2,[r0,#0x18]
;;;2707   }
000330  4770              BX       lr
;;;2708   
                          ENDP

                  TI2_Config PROC
;;;3103                          u16 TIM_ICFilter)
;;;3104   {
000332  b530              PUSH     {r4,r5,lr}
;;;3105     u16 tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;3106   
;;;3107     /* Disable the Channel 2: Reset the CC2E Bit */
;;;3108     TIMx->CCER &= CCER_CC2E_Reset;
000334  8c04              LDRH     r4,[r0,#0x20]
000336  f024f024          BIC      r4,r4,#0x10
00033a  8404              STRH     r4,[r0,#0x20]
;;;3109   
;;;3110     tmpccmr1 = TIMx->CCMR1;
00033c  8b05              LDRH     r5,[r0,#0x18]
;;;3111     tmpccer = TIMx->CCER;
00033e  8c04              LDRH     r4,[r0,#0x20]
;;;3112     tmp = (u16)(TIM_ICPolarity << 4);
000340  0109              LSLS     r1,r1,#4
;;;3113   
;;;3114     /* Select the Input and set the filter */
;;;3115     tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
000342  f425f425          BIC      r5,r5,#0xf300
;;;3116     tmpccmr1 |= (u16)(TIM_ICFilter << 12);
000346  ea45ea45          ORR      r3,r5,r3,LSL #12
;;;3117     tmpccmr1 |= (u16)(TIM_ICSelection << 8);
00034a  ea43ea43          ORR      r2,r3,r2,LSL #8
;;;3118   
;;;3119     /* Select the Polarity and set the CC2E Bit */
;;;3120     tmpccer &= CCER_CC2P_Reset;
00034e  f024f024          BIC      r3,r4,#0x20
;;;3121     tmpccer |=  tmp | CCER_CC2E_Set;
000352  430b              ORRS     r3,r3,r1
000354  f043f043          ORR      r1,r3,#0x10
;;;3122   
;;;3123     /* Write to TIMx CCMR1 and CCER registers */
;;;3124     TIMx->CCMR1 = tmpccmr1 ;
000358  8302              STRH     r2,[r0,#0x18]
;;;3125     TIMx->CCER = tmpccer;
00035a  8401              STRH     r1,[r0,#0x20]
;;;3126   }
00035c  bd30              POP      {r4,r5,pc}
;;;3127   
                          ENDP

                  TIM_SetIC1Prescaler PROC
;;;2674     /* Reset the IC1PSC Bits */
;;;2675     TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
00035e  8b02              LDRH     r2,[r0,#0x18]
000360  f022f022          BIC      r2,r2,#0xc
000364  8302              STRH     r2,[r0,#0x18]
;;;2676   
;;;2677     /* Set the IC1PSC value */
;;;2678     TIMx->CCMR1 |= TIM_ICPSC;
000366  8b02              LDRH     r2,[r0,#0x18]
000368  430a              ORRS     r2,r2,r1
00036a  8302              STRH     r2,[r0,#0x18]
;;;2679   }
00036c  4770              BX       lr
;;;2680   
                          ENDP

                  TI1_Config PROC
;;;3057                          u16 TIM_ICFilter)
;;;3058   {
00036e  b530              PUSH     {r4,r5,lr}
;;;3059     u16 tmpccmr1 = 0, tmpccer = 0;
;;;3060   
;;;3061     /* Disable the Channel 1: Reset the CC1E Bit */
;;;3062     TIMx->CCER &= CCER_CC1E_Reset;
000370  8c04              LDRH     r4,[r0,#0x20]
000372  f024f024          BIC      r4,r4,#1
000376  8404              STRH     r4,[r0,#0x20]
;;;3063   
;;;3064     tmpccmr1 = TIMx->CCMR1;
000378  8b05              LDRH     r5,[r0,#0x18]
;;;3065     tmpccer = TIMx->CCER;
00037a  8c04              LDRH     r4,[r0,#0x20]
;;;3066   
;;;3067     /* Select the Input and set the filter */
;;;3068     tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
00037c  f025f025          BIC      r5,r5,#0xf3
;;;3069     tmpccmr1 |= TIM_ICSelection | (u16)(TIM_ICFilter << 4);
000380  ea42ea42          ORR      r3,r2,r3,LSL #4
000384  432b              ORRS     r3,r3,r5
;;;3070   
;;;3071     /* Select the Polarity and set the CC1E Bit */
;;;3072     tmpccer &= CCER_CC1P_Reset;
000386  f024f024          BIC      r2,r4,#2
;;;3073     tmpccer |= TIM_ICPolarity | CCER_CC1E_Set;
00038a  430a              ORRS     r2,r2,r1
00038c  f042f042          ORR      r1,r2,#1
;;;3074   
;;;3075     /* Write to TIMx CCMR1 and CCER registers */
;;;3076     TIMx->CCMR1 = tmpccmr1;
000390  8303              STRH     r3,[r0,#0x18]
;;;3077     TIMx->CCER = tmpccer;
000392  8401              STRH     r1,[r0,#0x20]
;;;3078   }
000394  bd30              POP      {r4,r5,pc}
;;;3079   
                          ENDP

                  TIM_ICInit PROC
;;;587    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
;;;588    {
000396  b530              PUSH     {r4,r5,lr}
000398  4605              MOV      r5,r0
00039a  460c              MOV      r4,r1
;;;589      /* Check the parameters */
;;;590      assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;591      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));
;;;592      assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
;;;593      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
;;;594      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
;;;595      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
;;;596      
;;;597      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
00039c  8820              LDRH     r0,[r4,#0]
00039e  8861              LDRH     r1,[r4,#2]
0003a0  88a2              LDRH     r2,[r4,#4]
0003a2  8923              LDRH     r3,[r4,#8]
0003a4  b938              CBNZ     r0,|L1.950|
;;;598      {
;;;599        /* TI1 Configuration */
;;;600        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0003a6  4628              MOV      r0,r5
0003a8  f7fff7ff          BL       TI1_Config
;;;601                   TIM_ICInitStruct->TIM_ICSelection,
;;;602                   TIM_ICInitStruct->TIM_ICFilter);
;;;603    
;;;604        /* Set the Input Capture Prescaler value */
;;;605        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0003ac  88e1              LDRH     r1,[r4,#6]
0003ae  4628              MOV      r0,r5
0003b0  e8bde8bd          POP      {r4,r5,lr}
0003b4  e7fe              B        TIM_SetIC1Prescaler
                  |L1.950|
;;;606      }
;;;607      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
0003b6  2804              CMP      r0,#4
0003b8  d107              BNE      |L1.970|
;;;608      {
;;;609        /* TI2 Configuration */
;;;610        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0003ba  4628              MOV      r0,r5
0003bc  f7fff7ff          BL       TI2_Config
;;;611                   TIM_ICInitStruct->TIM_ICSelection,
;;;612                   TIM_ICInitStruct->TIM_ICFilter);
;;;613    
;;;614        /* Set the Input Capture Prescaler value */
;;;615        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0003c0  88e1              LDRH     r1,[r4,#6]
0003c2  4628              MOV      r0,r5
0003c4  e8bde8bd          POP      {r4,r5,lr}
0003c8  e7fe              B        TIM_SetIC2Prescaler
                  |L1.970|
;;;616      }
;;;617      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
0003ca  2808              CMP      r0,#8
0003cc  d107              BNE      |L1.990|
;;;618      {
;;;619        /* TI3 Configuration */
;;;620        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
0003ce  4628              MOV      r0,r5
0003d0  f7fff7ff          BL       TI3_Config
;;;621                   TIM_ICInitStruct->TIM_ICSelection,
;;;622                   TIM_ICInitStruct->TIM_ICFilter);
;;;623    
;;;624        /* Set the Input Capture Prescaler value */
;;;625        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0003d4  88e1              LDRH     r1,[r4,#6]
0003d6  4628              MOV      r0,r5
0003d8  e8bde8bd          POP      {r4,r5,lr}
0003dc  e7fe              B        TIM_SetIC3Prescaler
                  |L1.990|
;;;626      }
;;;627      else
;;;628      {
;;;629        /* TI4 Configuration */
;;;630        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0003de  4628              MOV      r0,r5
0003e0  f7fff7ff          BL       TI4_Config
;;;631                   TIM_ICInitStruct->TIM_ICSelection,
;;;632                   TIM_ICInitStruct->TIM_ICFilter);
;;;633    
;;;634        /* Set the Input Capture Prescaler value */
;;;635        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0003e4  88e1              LDRH     r1,[r4,#6]
0003e6  4628              MOV      r0,r5
0003e8  e8bde8bd          POP      {r4,r5,lr}
0003ec  e7fe              B        TIM_SetIC4Prescaler
0003ee  0000              DCW      0x0000
                  |L1.1008|
0003f0  40001000          DCD      0x40001000
                  |L1.1012|
0003f4  bffffc00          DCD      0xbffffc00
                  |L1.1016|
0003f8  40012c00          DCD      0x40012c00
                  |L1.1020|
0003fc  40013400          DCD      0x40013400
                          ENDP

                  TIM_PWMIConfig PROC
;;;652    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
;;;653    {
000400  b5f0              PUSH     {r4-r7,lr}
000402  4607              MOV      r7,r0
000404  460c              MOV      r4,r1
;;;654      u16 icoppositepolarity = TIM_ICPolarity_Rising;
000406  2500              MOVS     r5,#0
;;;655      u16 icoppositeselection = TIM_ICSelection_DirectTI;
000408  2601              MOVS     r6,#1
;;;656    
;;;657      /* Check the parameters */
;;;658      assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;659    
;;;660      /* Select the Opposite Input Polarity */
;;;661      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
00040a  8861              LDRH     r1,[r4,#2]
00040c  b901              CBNZ     r1,|L1.1040|
;;;662      {
;;;663        icoppositepolarity = TIM_ICPolarity_Falling;
00040e  2502              MOVS     r5,#2
                  |L1.1040|
;;;664      }
;;;665      else
;;;666      {
;;;667        icoppositepolarity = TIM_ICPolarity_Rising;
;;;668      }
;;;669    
;;;670      /* Select the Opposite Input */
;;;671      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
000410  88a2              LDRH     r2,[r4,#4]
000412  2a01              CMP      r2,#1
000414  d100              BNE      |L1.1048|
;;;672      {
;;;673        icoppositeselection = TIM_ICSelection_IndirectTI;
000416  2602              MOVS     r6,#2
                  |L1.1048|
;;;674      }
;;;675      else
;;;676      {
;;;677        icoppositeselection = TIM_ICSelection_DirectTI;
;;;678      }
;;;679    
;;;680      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
000418  8820              LDRH     r0,[r4,#0]
00041a  8923              LDRH     r3,[r4,#8]
00041c  b988              CBNZ     r0,|L1.1090|
;;;681      {
;;;682        /* TI1 Configuration */
;;;683        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
00041e  4638              MOV      r0,r7
000420  f7fff7ff          BL       TI1_Config
;;;684                   TIM_ICInitStruct->TIM_ICFilter);
;;;685    
;;;686        /* Set the Input Capture Prescaler value */
;;;687        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000424  88e1              LDRH     r1,[r4,#6]
000426  4638              MOV      r0,r7
000428  f7fff7ff          BL       TIM_SetIC1Prescaler
;;;688    
;;;689        /* TI2 Configuration */
;;;690        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
00042c  8923              LDRH     r3,[r4,#8]
00042e  4632              MOV      r2,r6
000430  4629              MOV      r1,r5
000432  4638              MOV      r0,r7
000434  f7fff7ff          BL       TI2_Config
;;;691    
;;;692        /* Set the Input Capture Prescaler value */
;;;693        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000438  88e1              LDRH     r1,[r4,#6]
00043a  4638              MOV      r0,r7
00043c  e8bde8bd          POP      {r4-r7,lr}
000440  e7fe              B        TIM_SetIC2Prescaler
                  |L1.1090|
;;;694      }
;;;695      else
;;;696      { 
;;;697        /* TI2 Configuration */
;;;698        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
000442  4638              MOV      r0,r7
000444  f7fff7ff          BL       TI2_Config
;;;699                   TIM_ICInitStruct->TIM_ICFilter);
;;;700    
;;;701        /* Set the Input Capture Prescaler value */
;;;702        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
000448  88e1              LDRH     r1,[r4,#6]
00044a  4638              MOV      r0,r7
00044c  f7fff7ff          BL       TIM_SetIC2Prescaler
;;;703    
;;;704        /* TI1 Configuration */
;;;705        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
000450  8923              LDRH     r3,[r4,#8]
000452  4632              MOV      r2,r6
000454  4629              MOV      r1,r5
000456  4638              MOV      r0,r7
000458  f7fff7ff          BL       TI1_Config
;;;706    
;;;707        /* Set the Input Capture Prescaler value */
;;;708        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
00045c  88e1              LDRH     r1,[r4,#6]
00045e  4638              MOV      r0,r7
000460  e8bde8bd          POP      {r4-r7,lr}
000464  e7fe              B        TIM_SetIC1Prescaler
;;;709      }
;;;710    }
;;;711    
                          ENDP

                  TIM_BDTRConfig PROC
;;;723    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
;;;724    {
000466  b510              PUSH     {r4,lr}
;;;725      /* Check the parameters */
;;;726      assert_param(IS_TIM_18_PERIPH(TIMx));
;;;727      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
;;;728      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
;;;729      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
;;;730      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
;;;731      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
;;;732      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
;;;733    
;;;734      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;735         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;736    
;;;737      TIMx->BDTR = (u32)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
000468  880a              LDRH     r2,[r1,#0]
00046a  884b              LDRH     r3,[r1,#2]
00046c  88cc              LDRH     r4,[r1,#6]
00046e  431a              ORRS     r2,r2,r3
000470  888b              LDRH     r3,[r1,#4]
000472  4323              ORRS     r3,r3,r4
000474  431a              ORRS     r2,r2,r3
000476  890b              LDRH     r3,[r1,#8]
000478  431a              ORRS     r2,r2,r3
00047a  894b              LDRH     r3,[r1,#0xa]
00047c  8989              LDRH     r1,[r1,#0xc]
00047e  431a              ORRS     r2,r2,r3
000480  430a              ORRS     r2,r2,r1
000482  f8a0f8a0          STRH     r2,[r0,#0x44]
;;;738                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;739                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;740                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;741    
;;;742    }
000486  bd10              POP      {r4,pc}
;;;743    
                          ENDP

                  TIM_TimeBaseStructInit PROC
;;;754      /* Set the default configuration */
;;;755      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
000488  f64ff64f          MOV      r1,#0xffff
00048c  8081              STRH     r1,[r0,#4]
;;;756      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
00048e  2100              MOVS     r1,#0
000490  8001              STRH     r1,[r0,#0]
;;;757      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
000492  80c1              STRH     r1,[r0,#6]
;;;758      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
000494  8041              STRH     r1,[r0,#2]
;;;759      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
000496  7201              STRB     r1,[r0,#8]
;;;760    }
000498  4770              BX       lr
;;;761    
                          ENDP

                  TIM_OCStructInit PROC
;;;772      /* Set the default configuration */
;;;773      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
00049a  2100              MOVS     r1,#0
00049c  8001              STRH     r1,[r0,#0]
;;;774      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
00049e  8041              STRH     r1,[r0,#2]
;;;775      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
0004a0  8081              STRH     r1,[r0,#4]
;;;776      TIM_OCInitStruct->TIM_Pulse = 0x0000;
0004a2  80c1              STRH     r1,[r0,#6]
;;;777      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
0004a4  8101              STRH     r1,[r0,#8]
;;;778      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
0004a6  8141              STRH     r1,[r0,#0xa]
;;;779      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
0004a8  8181              STRH     r1,[r0,#0xc]
;;;780      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
0004aa  81c1              STRH     r1,[r0,#0xe]
;;;781    }
0004ac  4770              BX       lr
;;;782    
                          ENDP

                  TIM_ICStructInit PROC
;;;793      /* Set the default configuration */
;;;794      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
0004ae  2100              MOVS     r1,#0
0004b0  8001              STRH     r1,[r0,#0]
;;;795      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
0004b2  8041              STRH     r1,[r0,#2]
;;;796      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
0004b4  2201              MOVS     r2,#1
0004b6  8082              STRH     r2,[r0,#4]
;;;797      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
0004b8  80c1              STRH     r1,[r0,#6]
;;;798      TIM_ICInitStruct->TIM_ICFilter = 0x00;
0004ba  8101              STRH     r1,[r0,#8]
;;;799    }
0004bc  4770              BX       lr
;;;800    
                          ENDP

                  TIM_BDTRStructInit PROC
;;;811      /* Set the default configuration */
;;;812      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
0004be  2100              MOVS     r1,#0
0004c0  8001              STRH     r1,[r0,#0]
;;;813      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
0004c2  8041              STRH     r1,[r0,#2]
;;;814      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
0004c4  8081              STRH     r1,[r0,#4]
;;;815      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
0004c6  80c1              STRH     r1,[r0,#6]
;;;816      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
0004c8  8101              STRH     r1,[r0,#8]
;;;817      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
0004ca  8141              STRH     r1,[r0,#0xa]
;;;818      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
0004cc  8181              STRH     r1,[r0,#0xc]
;;;819    }
0004ce  4770              BX       lr
;;;820    
                          ENDP

                  TIM_Cmd PROC
;;;835      
;;;836      if (NewState != DISABLE)
0004d0  b121              CBZ      r1,|L1.1244|
;;;837      {
;;;838        /* Enable the TIM Counter */
;;;839        TIMx->CR1 |= CR1_CEN_Set;
0004d2  8801              LDRH     r1,[r0,#0]
0004d4  f041f041          ORR      r1,r1,#1
0004d8  8001              STRH     r1,[r0,#0]
;;;840      }
;;;841      else
;;;842      {
;;;843        /* Disable the TIM Counter */
;;;844        TIMx->CR1 &= CR1_CEN_Reset;
;;;845      }
;;;846    }
0004da  4770              BX       lr
                  |L1.1244|
0004dc  8801              LDRH     r1,[r0,#0]            ;844
0004de  f240f240          MOV      r2,#0x3fe             ;844
0004e2  4011              ANDS     r1,r1,r2              ;844
0004e4  8001              STRH     r1,[r0,#0]            ;844
0004e6  4770              BX       lr
;;;847    
                          ENDP

                  TIM_CtrlPWMOutputs PROC
;;;862    
;;;863      if (NewState != DISABLE)
0004e8  b129              CBZ      r1,|L1.1270|
;;;864      {
;;;865        /* Enable the TIM Main Output */
;;;866        TIMx->BDTR |= BDTR_MOE_Set;
0004ea  f830f830          LDRH     r1,[r0,#0x44]!
0004ee  f441f441          ORR      r1,r1,#0x8000
0004f2  8001              STRH     r1,[r0,#0]
;;;867      }
;;;868      else
;;;869      {
;;;870        /* Disable the TIM Main Output */
;;;871        TIMx->BDTR &= BDTR_MOE_Reset;
;;;872      }  
;;;873    }
0004f4  4770              BX       lr
                  |L1.1270|
0004f6  f830f830          LDRH     r1,[r0,#0x44]!        ;871
0004fa  f3c1f3c1          UBFX     r1,r1,#0,#15          ;871
0004fe  8001              STRH     r1,[r0,#0]            ;871
000500  4770              BX       lr
;;;874    
                          ENDP

                  TIM_ITConfig PROC
;;;902      
;;;903      if (NewState != DISABLE)
000502  b11a              CBZ      r2,|L1.1292|
;;;904      {
;;;905        /* Enable the Interrupt sources */
;;;906        TIMx->DIER |= TIM_IT;
000504  8982              LDRH     r2,[r0,#0xc]
000506  430a              ORRS     r2,r2,r1
000508  8182              STRH     r2,[r0,#0xc]
;;;907      }
;;;908      else
;;;909      {
;;;910        /* Disable the Interrupt sources */
;;;911        TIMx->DIER &= (u16)~TIM_IT;
;;;912      }
;;;913    }
00050a  4770              BX       lr
                  |L1.1292|
00050c  8982              LDRH     r2,[r0,#0xc]          ;911
00050e  438a              BICS     r2,r2,r1              ;911
000510  8182              STRH     r2,[r0,#0xc]          ;911
000512  4770              BX       lr
;;;914    
                          ENDP

                  TIM_GenerateEvent PROC
;;;937      /* Set the event sources */
;;;938      TIMx->EGR = TIM_EventSource;
000514  8281              STRH     r1,[r0,#0x14]
;;;939    }
000516  4770              BX       lr
;;;940    
                          ENDP

                  TIM_DMAConfig PROC
;;;968      /* Set the DMA Base and the DMA Burst Length */
;;;969      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
000518  4311              ORRS     r1,r1,r2
00051a  f8a0f8a0          STRH     r1,[r0,#0x48]
;;;970    }
00051e  4770              BX       lr
;;;971    
                          ENDP

                  TIM_DMACmd PROC
;;;997      
;;;998      if (NewState != DISABLE)
000520  b11a              CBZ      r2,|L1.1322|
;;;999      {
;;;1000       /* Enable the DMA sources */
;;;1001       TIMx->DIER |= TIM_DMASource; 
000522  8982              LDRH     r2,[r0,#0xc]
000524  430a              ORRS     r2,r2,r1
000526  8182              STRH     r2,[r0,#0xc]
;;;1002     }
;;;1003     else
;;;1004     {
;;;1005       /* Disable the DMA sources */
;;;1006       TIMx->DIER &= (u16)~TIM_DMASource;
;;;1007     }
;;;1008   }
000528  4770              BX       lr
                  |L1.1322|
00052a  8982              LDRH     r2,[r0,#0xc]          ;1006
00052c  438a              BICS     r2,r2,r1              ;1006
00052e  8182              STRH     r2,[r0,#0xc]          ;1006
000530  4770              BX       lr
;;;1009   
                          ENDP

                  TIM_InternalClockConfig PROC
;;;1023     /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;1024     TIMx->SMCR &=  SMCR_SMS_Mask;
000532  8901              LDRH     r1,[r0,#8]
000534  f021f021          BIC      r1,r1,#7
000538  8101              STRH     r1,[r0,#8]
;;;1025   }
00053a  4770              BX       lr
;;;1026   /*******************************************************************************
                          ENDP

                  TIM_SelectInputTrigger PROC
;;;1314     /* Get the TIMx SMCR register value */
;;;1315     tmpsmcr = TIMx->SMCR;
00053c  8902              LDRH     r2,[r0,#8]
;;;1316   
;;;1317     /* Reset the TS Bits */
;;;1318     tmpsmcr &= SMCR_TS_Mask;
00053e  f022f022          BIC      r2,r2,#0x70
;;;1319   
;;;1320     /* Set the Input Trigger source */
;;;1321     tmpsmcr |= TIM_InputTriggerSource;
000542  430a              ORRS     r2,r2,r1
;;;1322   
;;;1323     /* Write to TIMx SMCR */
;;;1324     TIMx->SMCR = tmpsmcr;
000544  8102              STRH     r2,[r0,#8]
;;;1325   }
000546  4770              BX       lr
;;;1326   
                          ENDP

                  TIM_ITRxExternalClockConfig PROC
;;;1040   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, u16 TIM_InputTriggerSource)
;;;1041   {
000548  b500              PUSH     {lr}
00054a  4603              MOV      r3,r0
;;;1042     /* Check the parameters */
;;;1043     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1044     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1045   
;;;1046     /* Select the Internal Trigger */
;;;1047     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
00054c  4618              MOV      r0,r3
00054e  f7fff7ff          BL       TIM_SelectInputTrigger
;;;1048   
;;;1049     /* Select the External clock mode1 */
;;;1050     TIMx->SMCR |= TIM_SlaveMode_External1;
000552  8918              LDRH     r0,[r3,#8]
000554  f040f040          ORR      r0,r0,#7
000558  8118              STRH     r0,[r3,#8]
;;;1051   }
00055a  bd00              POP      {pc}
;;;1052   /*******************************************************************************
                          ENDP

                  TIM_TIxExternalClockConfig PROC
;;;1072                                   u16 TIM_ICPolarity, u16 ICFilter)
;;;1073   {
00055c  b530              PUSH     {r4,r5,lr}
00055e  460d              MOV      r5,r1
000560  4604              MOV      r4,r0
000562  4611              MOV      r1,r2
;;;1074     /* Check the parameters */
;;;1075     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1076     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
;;;1077     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
;;;1078     assert_param(IS_TIM_IC_FILTER(ICFilter));
;;;1079   
;;;1080     /* Configure the Timer Input Clock Source */
;;;1081     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000564  2d60              CMP      r5,#0x60
000566  d104              BNE      |L1.1394|
;;;1082     {
;;;1083       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
000568  2201              MOVS     r2,#1
00056a  4620              MOV      r0,r4
00056c  f7fff7ff          BL       TI2_Config
000570  e003              B        |L1.1402|
                  |L1.1394|
;;;1084     }
;;;1085     else
;;;1086     {
;;;1087       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
000572  2201              MOVS     r2,#1
000574  4620              MOV      r0,r4
000576  f7fff7ff          BL       TI1_Config
                  |L1.1402|
;;;1088     }
;;;1089   
;;;1090     /* Select the Trigger source */
;;;1091     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
00057a  4629              MOV      r1,r5
00057c  4620              MOV      r0,r4
00057e  f7fff7ff          BL       TIM_SelectInputTrigger
;;;1092   
;;;1093     /* Select the External clock mode1 */
;;;1094     TIMx->SMCR |= TIM_SlaveMode_External1;
000582  8920              LDRH     r0,[r4,#8]
000584  f040f040          ORR      r0,r0,#7
000588  8120              STRH     r0,[r4,#8]
;;;1095   }
00058a  bd30              POP      {r4,r5,pc}
;;;1096   
                          ENDP

                  TIM_ETRConfig PROC
;;;1204                      u16 ExtTRGFilter)
;;;1205   {
00058c  b510              PUSH     {r4,lr}
;;;1206     u16 tmpsmcr = 0;
;;;1207   
;;;1208     /* Check the parameters */
;;;1209     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1210     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1211     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1212     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1213   
;;;1214     tmpsmcr = TIMx->SMCR;
00058e  8904              LDRH     r4,[r0,#8]
;;;1215   
;;;1216     /* Reset the ETR Bits */
;;;1217     tmpsmcr &= SMCR_ETR_Mask;
000590  b2e4              UXTB     r4,r4
;;;1218   
;;;1219     /* Set the Prescaler, the Filter value and the Polarity */
;;;1220     tmpsmcr |= TIM_ExtTRGPrescaler | TIM_ExtTRGPolarity | (u16)(ExtTRGFilter << 8);
000592  4311              ORRS     r1,r1,r2
000594  ea41ea41          ORR      r1,r1,r3,LSL #8
000598  4321              ORRS     r1,r1,r4
;;;1221   
;;;1222     /* Write to TIMx SMCR */
;;;1223     TIMx->SMCR = tmpsmcr;
00059a  8101              STRH     r1,[r0,#8]
;;;1224   }
00059c  bd10              POP      {r4,pc}
;;;1225   
                          ENDP

                  TIM_ETRClockMode1Config PROC
;;;1118                                u16 ExtTRGFilter)
;;;1119   {
00059e  b510              PUSH     {r4,lr}
0005a0  4604              MOV      r4,r0
;;;1120     u16 tmpsmcr = 0;
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1124     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1125     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1126     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1127   
;;;1128     /* Configure the ETR Clock source */
;;;1129     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
0005a2  4620              MOV      r0,r4
0005a4  f7fff7ff          BL       TIM_ETRConfig
;;;1130     
;;;1131     /* Get the TIMx SMCR register value */
;;;1132     tmpsmcr = TIMx->SMCR;
0005a8  8920              LDRH     r0,[r4,#8]
;;;1133   
;;;1134     /* Reset the SMS Bits */
;;;1135     tmpsmcr &= SMCR_SMS_Mask;
0005aa  f020f020          BIC      r0,r0,#7
;;;1136     /* Select the External clock mode1 */
;;;1137     tmpsmcr |= TIM_SlaveMode_External1;
0005ae  f040f040          ORR      r0,r0,#7
;;;1138   
;;;1139     /* Select the Trigger selection : ETRF */
;;;1140     tmpsmcr &= SMCR_TS_Mask;
0005b2  f020f020          BIC      r0,r0,#0x70
;;;1141     tmpsmcr |= TIM_TS_ETRF;
0005b6  f040f040          ORR      r0,r0,#0x70
;;;1142   
;;;1143     /* Write to TIMx SMCR */
;;;1144     TIMx->SMCR = tmpsmcr;
0005ba  8120              STRH     r0,[r4,#8]
;;;1145   }
0005bc  bd10              POP      {r4,pc}
;;;1146   
                          ENDP

                  TIM_ETRClockMode2Config PROC
;;;1168                                u16 TIM_ExtTRGPolarity, u16 ExtTRGFilter)
;;;1169   {
0005be  b510              PUSH     {r4,lr}
0005c0  4604              MOV      r4,r0
;;;1170     /* Check the parameters */
;;;1171     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1172     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1173     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1174     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1175   
;;;1176     /* Configure the ETR Clock source */
;;;1177     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
0005c2  4620              MOV      r0,r4
0005c4  f7fff7ff          BL       TIM_ETRConfig
;;;1178   
;;;1179     /* Enable the External clock mode2 */
;;;1180     TIMx->SMCR |= SMCR_ECE_Set;
0005c8  8920              LDRH     r0,[r4,#8]
0005ca  f440f440          ORR      r0,r0,#0x4000
0005ce  8120              STRH     r0,[r4,#8]
;;;1181   }
0005d0  bd10              POP      {r4,pc}
;;;1182   
                          ENDP

                  TIM_PrescalerConfig PROC
;;;1246     /* Set the Prescaler value */
;;;1247     TIMx->PSC = Prescaler;
0005d2  8501              STRH     r1,[r0,#0x28]
;;;1248   
;;;1249     /* Set or reset the UG Bit */
;;;1250     TIMx->EGR = TIM_PSCReloadMode;
0005d4  8282              STRH     r2,[r0,#0x14]
;;;1251   }
0005d6  4770              BX       lr
;;;1252   
                          ENDP

                  TIM_CounterModeConfig PROC
;;;1275   
;;;1276     tmpcr1 = TIMx->CR1;
0005d8  8802              LDRH     r2,[r0,#0]
;;;1277   
;;;1278     /* Reset the CMS and DIR Bits */
;;;1279     tmpcr1 &= CR1_CounterMode_Mask;
0005da  f240f240          MOV      r3,#0x38f
0005de  401a              ANDS     r2,r2,r3
;;;1280   
;;;1281     /* Set the Counter Mode */
;;;1282     tmpcr1 |= TIM_CounterMode;
0005e0  430a              ORRS     r2,r2,r1
;;;1283   
;;;1284     /* Write to TIMx CR1 register */
;;;1285     TIMx->CR1 = tmpcr1;
0005e2  8002              STRH     r2,[r0,#0]
;;;1286   }
0005e4  4770              BX       lr
;;;1287   
                          ENDP

                  TIM_EncoderInterfaceConfig PROC
;;;1352                                   u16 TIM_IC1Polarity, u16 TIM_IC2Polarity)
;;;1353   {
0005e6  b570              PUSH     {r4-r6,lr}
;;;1354     u16 tmpsmcr = 0;
;;;1355     u16 tmpccmr1 = 0;
;;;1356     u16 tmpccer = 0;
;;;1357       
;;;1358     /* Check the parameters */
;;;1359     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;1360     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
;;;1361     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
;;;1362     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
;;;1363   
;;;1364     /* Get the TIMx SMCR register value */
;;;1365     tmpsmcr = TIMx->SMCR;
0005e8  8905              LDRH     r5,[r0,#8]
;;;1366   
;;;1367     /* Get the TIMx CCMR1 register value */
;;;1368     tmpccmr1 = TIMx->CCMR1;
0005ea  8b04              LDRH     r4,[r0,#0x18]
;;;1369   
;;;1370     /* Get the TIMx CCER register value */
;;;1371     tmpccer = TIMx->CCER;
0005ec  8c06              LDRH     r6,[r0,#0x20]
;;;1372   
;;;1373     /* Set the encoder Mode */
;;;1374     tmpsmcr &= SMCR_SMS_Mask;
0005ee  f025f025          BIC      r5,r5,#7
;;;1375     tmpsmcr |= TIM_EncoderMode;
0005f2  430d              ORRS     r5,r5,r1
;;;1376   
;;;1377     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1378     tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
0005f4  f64ff64f          MOV      r1,#0xfcfc
0005f8  400c              ANDS     r4,r4,r1
;;;1379     tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
0005fa  f240f240          MOV      r1,#0x101
0005fe  430c              ORRS     r4,r4,r1
;;;1380   
;;;1381     /* Set the TI1 and the TI2 Polarities */
;;;1382     tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
000600  f026f026          BIC      r6,r6,#0x22
;;;1383     tmpccer |= (TIM_IC1Polarity | (u16)(TIM_IC2Polarity << 4));
000604  ea42ea42          ORR      r1,r2,r3,LSL #4
000608  4331              ORRS     r1,r1,r6
;;;1384   
;;;1385     /* Write to TIMx SMCR */
;;;1386     TIMx->SMCR = tmpsmcr;
00060a  8105              STRH     r5,[r0,#8]
;;;1387   
;;;1388     /* Write to TIMx CCMR1 */
;;;1389     TIMx->CCMR1 = tmpccmr1;
00060c  8304              STRH     r4,[r0,#0x18]
;;;1390   
;;;1391     /* Write to TIMx CCER */
;;;1392     TIMx->CCER = tmpccer;
00060e  8401              STRH     r1,[r0,#0x20]
;;;1393   }
000610  bd70              POP      {r4-r6,pc}
;;;1394   
                          ENDP

                  TIM_ForcedOC1Config PROC
;;;1416   
;;;1417     tmpccmr1 = TIMx->CCMR1;
000612  8b02              LDRH     r2,[r0,#0x18]
;;;1418   
;;;1419     /* Reset the OC1M Bits */
;;;1420     tmpccmr1 &= CCMR_OC13M_Mask;
000614  f022f022          BIC      r2,r2,#0x70
;;;1421   
;;;1422     /* Configure The Forced output Mode */
;;;1423     tmpccmr1 |= TIM_ForcedAction;
000618  430a              ORRS     r2,r2,r1
;;;1424   
;;;1425     /* Write to TIMx CCMR1 register */
;;;1426     TIMx->CCMR1 = tmpccmr1;
00061a  8302              STRH     r2,[r0,#0x18]
;;;1427   }
00061c  4770              BX       lr
;;;1428   
                          ENDP

                  TIM_ForcedOC2Config PROC
;;;1450   
;;;1451     tmpccmr1 = TIMx->CCMR1;
00061e  8b02              LDRH     r2,[r0,#0x18]
;;;1452   
;;;1453     /* Reset the OC2M Bits */
;;;1454     tmpccmr1 &= CCMR_OC24M_Mask;
000620  f422f422          BIC      r2,r2,#0x7000
;;;1455   
;;;1456     /* Configure The Forced output Mode */
;;;1457     tmpccmr1 |= (u16)(TIM_ForcedAction << 8);
000624  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1458   
;;;1459     /* Write to TIMx CCMR1 register */
;;;1460     TIMx->CCMR1 = tmpccmr1;
000628  8301              STRH     r1,[r0,#0x18]
;;;1461   }
00062a  4770              BX       lr
;;;1462   
                          ENDP

                  TIM_ForcedOC3Config PROC
;;;1484   
;;;1485     tmpccmr2 = TIMx->CCMR2;
00062c  8b82              LDRH     r2,[r0,#0x1c]
;;;1486   
;;;1487     /* Reset the OC1M Bits */
;;;1488     tmpccmr2 &= CCMR_OC13M_Mask;
00062e  f022f022          BIC      r2,r2,#0x70
;;;1489   
;;;1490     /* Configure The Forced output Mode */
;;;1491     tmpccmr2 |= TIM_ForcedAction;
000632  430a              ORRS     r2,r2,r1
;;;1492   
;;;1493     /* Write to TIMx CCMR2 register */
;;;1494     TIMx->CCMR2 = tmpccmr2;
000634  8382              STRH     r2,[r0,#0x1c]
;;;1495   }
000636  4770              BX       lr
;;;1496   
                          ENDP

                  TIM_ForcedOC4Config PROC
;;;1517     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1518     tmpccmr2 = TIMx->CCMR2;
000638  8b82              LDRH     r2,[r0,#0x1c]
;;;1519   
;;;1520     /* Reset the OC2M Bits */
;;;1521     tmpccmr2 &= CCMR_OC24M_Mask;
00063a  f422f422          BIC      r2,r2,#0x7000
;;;1522   
;;;1523     /* Configure The Forced output Mode */
;;;1524     tmpccmr2 |= (u16)(TIM_ForcedAction << 8);
00063e  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1525   
;;;1526     /* Write to TIMx CCMR2 register */
;;;1527     TIMx->CCMR2 = tmpccmr2;
000642  8381              STRH     r1,[r0,#0x1c]
;;;1528   }
000644  4770              BX       lr
;;;1529   
                          ENDP

                  TIM_ARRPreloadConfig PROC
;;;1545   
;;;1546     if (NewState != DISABLE)
000646  b121              CBZ      r1,|L1.1618|
;;;1547     {
;;;1548       /* Set the ARR Preload Bit */
;;;1549       TIMx->CR1 |= CR1_ARPE_Set;
000648  8801              LDRH     r1,[r0,#0]
00064a  f041f041          ORR      r1,r1,#0x80
00064e  8001              STRH     r1,[r0,#0]
;;;1550     }
;;;1551     else
;;;1552     {
;;;1553       /* Reset the ARR Preload Bit */
;;;1554       TIMx->CR1 &= CR1_ARPE_Reset;
;;;1555     }
;;;1556   }
000650  4770              BX       lr
                  |L1.1618|
000652  8801              LDRH     r1,[r0,#0]            ;1554
000654  f240f240          MOV      r2,#0x37f             ;1554
000658  4011              ANDS     r1,r1,r2              ;1554
00065a  8001              STRH     r1,[r0,#0]            ;1554
00065c  4770              BX       lr
;;;1557   
                          ENDP

                  TIM_SelectCOM PROC
;;;1572   
;;;1573     if (NewState != DISABLE)
00065e  b121              CBZ      r1,|L1.1642|
;;;1574     {
;;;1575       /* Set the COM Bit */
;;;1576       TIMx->CR2 |= CR2_CCUS_Set;
000660  8881              LDRH     r1,[r0,#4]
000662  f041f041          ORR      r1,r1,#4
000666  8081              STRH     r1,[r0,#4]
;;;1577     }
;;;1578     else
;;;1579     {
;;;1580       /* Reset the COM Bit */
;;;1581       TIMx->CR2 &= CR2_CCUS_Reset;
;;;1582     }
;;;1583   }
000668  4770              BX       lr
                  |L1.1642|
00066a  8881              LDRH     r1,[r0,#4]            ;1581
00066c  f021f021          BIC      r1,r1,#4              ;1581
000670  8081              STRH     r1,[r0,#4]            ;1581
000672  4770              BX       lr
;;;1584   
                          ENDP

                  TIM_SelectCCDMA PROC
;;;1600   
;;;1601     if (NewState != DISABLE)
000674  b121              CBZ      r1,|L1.1664|
;;;1602     {
;;;1603       /* Set the CCDS Bit */
;;;1604       TIMx->CR2 |= CR2_CCDS_Set;
000676  8881              LDRH     r1,[r0,#4]
000678  f041f041          ORR      r1,r1,#8
00067c  8081              STRH     r1,[r0,#4]
;;;1605     }
;;;1606     else
;;;1607     {
;;;1608       /* Reset the CCDS Bit */
;;;1609       TIMx->CR2 &= CR2_CCDS_Reset;
;;;1610     }
;;;1611   }
00067e  4770              BX       lr
                  |L1.1664|
000680  8881              LDRH     r1,[r0,#4]            ;1609
000682  f021f021          BIC      r1,r1,#8              ;1609
000686  8081              STRH     r1,[r0,#4]            ;1609
000688  4770              BX       lr
;;;1612   
                          ENDP

                  TIM_CCPreloadControl PROC
;;;1628   
;;;1629     if (NewState != DISABLE)
00068a  b121              CBZ      r1,|L1.1686|
;;;1630     {
;;;1631       /* Set the CCPC Bit */
;;;1632       TIMx->CR2 |= CR2_CCPC_Set;
00068c  8881              LDRH     r1,[r0,#4]
00068e  f041f041          ORR      r1,r1,#1
000692  8081              STRH     r1,[r0,#4]
;;;1633     }
;;;1634     else
;;;1635     {
;;;1636       /* Reset the CCPC Bit */
;;;1637       TIMx->CR2 &= CR2_CCPC_Reset;
;;;1638     }
;;;1639   }
000694  4770              BX       lr
                  |L1.1686|
000696  8881              LDRH     r1,[r0,#4]            ;1637
000698  f021f021          BIC      r1,r1,#1              ;1637
00069c  8081              STRH     r1,[r0,#4]            ;1637
00069e  4770              BX       lr
;;;1640   
                          ENDP

                  TIM_OC1PreloadConfig PROC
;;;1661   
;;;1662     tmpccmr1 = TIMx->CCMR1;
0006a0  8b02              LDRH     r2,[r0,#0x18]
;;;1663   
;;;1664     /* Reset the OC1PE Bit */
;;;1665     tmpccmr1 &= CCMR_OC13PE_Reset;
0006a2  f022f022          BIC      r2,r2,#8
;;;1666   
;;;1667     /* Enable or Disable the Output Compare Preload feature */
;;;1668     tmpccmr1 |= TIM_OCPreload;
0006a6  430a              ORRS     r2,r2,r1
;;;1669   
;;;1670     /* Write to TIMx CCMR1 register */
;;;1671     TIMx->CCMR1 = tmpccmr1;
0006a8  8302              STRH     r2,[r0,#0x18]
;;;1672   }
0006aa  4770              BX       lr
;;;1673   
                          ENDP

                  TIM_OC2PreloadConfig PROC
;;;1694   
;;;1695     tmpccmr1 = TIMx->CCMR1;
0006ac  8b02              LDRH     r2,[r0,#0x18]
;;;1696   
;;;1697     /* Reset the OC2PE Bit */
;;;1698     tmpccmr1 &= CCMR_OC24PE_Reset;
0006ae  f422f422          BIC      r2,r2,#0x800
;;;1699   
;;;1700     /* Enable or Disable the Output Compare Preload feature */
;;;1701     tmpccmr1 |= (u16)(TIM_OCPreload << 8);
0006b2  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1702   
;;;1703     /* Write to TIMx CCMR1 register */
;;;1704     TIMx->CCMR1 = tmpccmr1;
0006b6  8301              STRH     r1,[r0,#0x18]
;;;1705   }
0006b8  4770              BX       lr
;;;1706   
                          ENDP

                  TIM_OC3PreloadConfig PROC
;;;1727   
;;;1728     tmpccmr2 = TIMx->CCMR2;
0006ba  8b82              LDRH     r2,[r0,#0x1c]
;;;1729   
;;;1730     /* Reset the OC3PE Bit */
;;;1731     tmpccmr2 &= CCMR_OC13PE_Reset;
0006bc  f022f022          BIC      r2,r2,#8
;;;1732   
;;;1733     /* Enable or Disable the Output Compare Preload feature */
;;;1734     tmpccmr2 |= TIM_OCPreload;
0006c0  430a              ORRS     r2,r2,r1
;;;1735   
;;;1736     /* Write to TIMx CCMR2 register */
;;;1737     TIMx->CCMR2 = tmpccmr2;
0006c2  8382              STRH     r2,[r0,#0x1c]
;;;1738   }
0006c4  4770              BX       lr
;;;1739   
                          ENDP

                  TIM_OC4PreloadConfig PROC
;;;1760   
;;;1761     tmpccmr2 = TIMx->CCMR2;
0006c6  8b82              LDRH     r2,[r0,#0x1c]
;;;1762   
;;;1763     /* Reset the OC4PE Bit */
;;;1764     tmpccmr2 &= CCMR_OC24PE_Reset;
0006c8  f422f422          BIC      r2,r2,#0x800
;;;1765   
;;;1766     /* Enable or Disable the Output Compare Preload feature */
;;;1767     tmpccmr2 |= (u16)(TIM_OCPreload << 8);
0006cc  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1768   
;;;1769     /* Write to TIMx CCMR2 register */
;;;1770     TIMx->CCMR2 = tmpccmr2;
0006d0  8381              STRH     r1,[r0,#0x1c]
;;;1771   }
0006d2  4770              BX       lr
;;;1772   
                          ENDP

                  TIM_OC1FastConfig PROC
;;;1793     /* Get the TIMx CCMR1 register value */
;;;1794     tmpccmr1 = TIMx->CCMR1;
0006d4  8b02              LDRH     r2,[r0,#0x18]
;;;1795   
;;;1796     /* Reset the OC1FE Bit */
;;;1797     tmpccmr1 &= CCMR_OC13FE_Reset;
0006d6  f022f022          BIC      r2,r2,#4
;;;1798   
;;;1799     /* Enable or Disable the Output Compare Fast Bit */
;;;1800     tmpccmr1 |= TIM_OCFast;
0006da  430a              ORRS     r2,r2,r1
;;;1801   
;;;1802     /* Write to TIMx CCMR1 */
;;;1803     TIMx->CCMR1 = tmpccmr1;
0006dc  8302              STRH     r2,[r0,#0x18]
;;;1804   }
0006de  4770              BX       lr
;;;1805   
                          ENDP

                  TIM_OC2FastConfig PROC
;;;1826     /* Get the TIMx CCMR1 register value */
;;;1827     tmpccmr1 = TIMx->CCMR1;
0006e0  8b02              LDRH     r2,[r0,#0x18]
;;;1828   
;;;1829     /* Reset the OC2FE Bit */
;;;1830     tmpccmr1 &= CCMR_OC24FE_Reset;
0006e2  f422f422          BIC      r2,r2,#0x400
;;;1831   
;;;1832     /* Enable or Disable the Output Compare Fast Bit */
;;;1833     tmpccmr1 |= (u16)(TIM_OCFast << 8);
0006e6  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1834   
;;;1835     /* Write to TIMx CCMR1 */
;;;1836     TIMx->CCMR1 = tmpccmr1;
0006ea  8301              STRH     r1,[r0,#0x18]
;;;1837   }
0006ec  4770              BX       lr
;;;1838   
                          ENDP

                  TIM_OC3FastConfig PROC
;;;1859     /* Get the TIMx CCMR2 register value */
;;;1860     tmpccmr2 = TIMx->CCMR2;
0006ee  8b82              LDRH     r2,[r0,#0x1c]
;;;1861   
;;;1862     /* Reset the OC3FE Bit */
;;;1863     tmpccmr2 &= CCMR_OC13FE_Reset;
0006f0  f022f022          BIC      r2,r2,#4
;;;1864   
;;;1865     /* Enable or Disable the Output Compare Fast Bit */
;;;1866     tmpccmr2 |= TIM_OCFast;
0006f4  430a              ORRS     r2,r2,r1
;;;1867   
;;;1868     /* Write to TIMx CCMR2 */
;;;1869     TIMx->CCMR2 = tmpccmr2;
0006f6  8382              STRH     r2,[r0,#0x1c]
;;;1870   }
0006f8  4770              BX       lr
;;;1871   
                          ENDP

                  TIM_OC4FastConfig PROC
;;;1892     /* Get the TIMx CCMR2 register value */
;;;1893     tmpccmr2 = TIMx->CCMR2;
0006fa  8b82              LDRH     r2,[r0,#0x1c]
;;;1894   
;;;1895     /* Reset the OC4FE Bit */
;;;1896     tmpccmr2 &= CCMR_OC24FE_Reset;
0006fc  f422f422          BIC      r2,r2,#0x400
;;;1897   
;;;1898     /* Enable or Disable the Output Compare Fast Bit */
;;;1899     tmpccmr2 |= (u16)(TIM_OCFast << 8);
000700  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1900   
;;;1901     /* Write to TIMx CCMR2 */
;;;1902     TIMx->CCMR2 = tmpccmr2;
000704  8381              STRH     r1,[r0,#0x1c]
;;;1903   }
000706  4770              BX       lr
;;;1904   
                          ENDP

                  TIM_ClearOC1Ref PROC
;;;1924   
;;;1925     tmpccmr1 = TIMx->CCMR1;
000708  8b02              LDRH     r2,[r0,#0x18]
;;;1926   
;;;1927     /* Reset the OC1CE Bit */
;;;1928     tmpccmr1 &= CCMR_OC13CE_Reset;
00070a  f022f022          BIC      r2,r2,#0x80
;;;1929   
;;;1930     /* Enable or Disable the Output Compare Clear Bit */
;;;1931     tmpccmr1 |= TIM_OCClear;
00070e  430a              ORRS     r2,r2,r1
;;;1932   
;;;1933     /* Write to TIMx CCMR1 register */
;;;1934     TIMx->CCMR1 = tmpccmr1;
000710  8302              STRH     r2,[r0,#0x18]
;;;1935   }
000712  4770              BX       lr
;;;1936   
                          ENDP

                  TIM_ClearOC2Ref PROC
;;;1956   
;;;1957     tmpccmr1 = TIMx->CCMR1;
000714  8b02              LDRH     r2,[r0,#0x18]
;;;1958   
;;;1959     /* Reset the OC2CE Bit */
;;;1960     tmpccmr1 &= CCMR_OC24CE_Reset;
000716  f3c2f3c2          UBFX     r2,r2,#0,#15
;;;1961   
;;;1962     /* Enable or Disable the Output Compare Clear Bit */
;;;1963     tmpccmr1 |= (u16)(TIM_OCClear << 8);
00071a  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;1964   
;;;1965     /* Write to TIMx CCMR1 register */
;;;1966     TIMx->CCMR1 = tmpccmr1;
00071e  8301              STRH     r1,[r0,#0x18]
;;;1967   }
000720  4770              BX       lr
;;;1968   
                          ENDP

                  TIM_ClearOC3Ref PROC
;;;1988   
;;;1989     tmpccmr2 = TIMx->CCMR2;
000722  8b82              LDRH     r2,[r0,#0x1c]
;;;1990   
;;;1991     /* Reset the OC3CE Bit */
;;;1992     tmpccmr2 &= CCMR_OC13CE_Reset;
000724  f022f022          BIC      r2,r2,#0x80
;;;1993   
;;;1994     /* Enable or Disable the Output Compare Clear Bit */
;;;1995     tmpccmr2 |= TIM_OCClear;
000728  430a              ORRS     r2,r2,r1
;;;1996   
;;;1997     /* Write to TIMx CCMR2 register */
;;;1998     TIMx->CCMR2 = tmpccmr2;
00072a  8382              STRH     r2,[r0,#0x1c]
;;;1999   }
00072c  4770              BX       lr
;;;2000   
                          ENDP

                  TIM_ClearOC4Ref PROC
;;;2020   
;;;2021     tmpccmr2 = TIMx->CCMR2;
00072e  8b82              LDRH     r2,[r0,#0x1c]
;;;2022   
;;;2023     /* Reset the OC4CE Bit */
;;;2024     tmpccmr2 &= CCMR_OC24CE_Reset;
000730  f3c2f3c2          UBFX     r2,r2,#0,#15
;;;2025   
;;;2026     /* Enable or Disable the Output Compare Clear Bit */
;;;2027     tmpccmr2 |= (u16)(TIM_OCClear << 8);
000734  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;2028   
;;;2029     /* Write to TIMx CCMR2 register */
;;;2030     TIMx->CCMR2 = tmpccmr2;
000738  8381              STRH     r1,[r0,#0x1c]
;;;2031   }
00073a  4770              BX       lr
;;;2032   
                          ENDP

                  TIM_OC1PolarityConfig PROC
;;;2052   
;;;2053     tmpccer = TIMx->CCER;
00073c  8c02              LDRH     r2,[r0,#0x20]
;;;2054   
;;;2055     /* Set or Reset the CC1P Bit */
;;;2056     tmpccer &= CCER_CC1P_Reset;
00073e  f022f022          BIC      r2,r2,#2
;;;2057     tmpccer |= TIM_OCPolarity;
000742  430a              ORRS     r2,r2,r1
;;;2058   
;;;2059     /* Write to TIMx CCER register */
;;;2060     TIMx->CCER = tmpccer;
000744  8402              STRH     r2,[r0,#0x20]
;;;2061   }
000746  4770              BX       lr
;;;2062   
                          ENDP

                  TIM_OC1NPolarityConfig PROC
;;;2081      
;;;2082     tmpccer = TIMx->CCER;
000748  8c02              LDRH     r2,[r0,#0x20]
;;;2083   
;;;2084     /* Set or Reset the CC1NP Bit */
;;;2085     tmpccer &= CCER_CC1NP_Reset;
00074a  f022f022          BIC      r2,r2,#8
;;;2086     tmpccer |= TIM_OCNPolarity;
00074e  430a              ORRS     r2,r2,r1
;;;2087   
;;;2088     /* Write to TIMx CCER register */
;;;2089     TIMx->CCER = tmpccer;
000750  8402              STRH     r2,[r0,#0x20]
;;;2090   }
000752  4770              BX       lr
;;;2091   
                          ENDP

                  TIM_OC2PolarityConfig PROC
;;;2111   
;;;2112     tmpccer = TIMx->CCER;
000754  8c02              LDRH     r2,[r0,#0x20]
;;;2113   
;;;2114     /* Set or Reset the CC2P Bit */
;;;2115     tmpccer &= CCER_CC2P_Reset;
000756  f022f022          BIC      r2,r2,#0x20
;;;2116     tmpccer |= (u16)(TIM_OCPolarity << 4);
00075a  ea42ea42          ORR      r1,r2,r1,LSL #4
;;;2117   
;;;2118     /* Write to TIMx CCER register */
;;;2119     TIMx->CCER = tmpccer;
00075e  8401              STRH     r1,[r0,#0x20]
;;;2120   }
000760  4770              BX       lr
;;;2121   
                          ENDP

                  TIM_OC2NPolarityConfig PROC
;;;2140     
;;;2141     tmpccer = TIMx->CCER;
000762  8c02              LDRH     r2,[r0,#0x20]
;;;2142   
;;;2143     /* Set or Reset the CC2NP Bit */
;;;2144     tmpccer &= CCER_CC2NP_Reset;
000764  f022f022          BIC      r2,r2,#0x80
;;;2145     tmpccer |= (u16)(TIM_OCNPolarity << 4);
000768  ea42ea42          ORR      r1,r2,r1,LSL #4
;;;2146   
;;;2147     /* Write to TIMx CCER register */
;;;2148     TIMx->CCER = tmpccer;
00076c  8401              STRH     r1,[r0,#0x20]
;;;2149   }
00076e  4770              BX       lr
;;;2150   
                          ENDP

                  TIM_OC3PolarityConfig PROC
;;;2170   
;;;2171     tmpccer = TIMx->CCER;
000770  8c02              LDRH     r2,[r0,#0x20]
;;;2172   
;;;2173     /* Set or Reset the CC3P Bit */
;;;2174     tmpccer &= CCER_CC3P_Reset;
000772  f422f422          BIC      r2,r2,#0x200
;;;2175     tmpccer |= (u16)(TIM_OCPolarity << 8);
000776  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;2176   
;;;2177     /* Write to TIMx CCER register */
;;;2178     TIMx->CCER = tmpccer;
00077a  8401              STRH     r1,[r0,#0x20]
;;;2179   }
00077c  4770              BX       lr
;;;2180   
                          ENDP

                  TIM_OC3NPolarityConfig PROC
;;;2199       
;;;2200     tmpccer = TIMx->CCER;
00077e  8c02              LDRH     r2,[r0,#0x20]
;;;2201   
;;;2202     /* Set or Reset the CC3NP Bit */
;;;2203     tmpccer &= CCER_CC3NP_Reset;
000780  f422f422          BIC      r2,r2,#0x800
;;;2204     tmpccer |= (u16)(TIM_OCNPolarity << 8);
000784  ea42ea42          ORR      r1,r2,r1,LSL #8
;;;2205   
;;;2206     /* Write to TIMx CCER register */
;;;2207     TIMx->CCER = tmpccer;
000788  8401              STRH     r1,[r0,#0x20]
;;;2208   }
00078a  4770              BX       lr
;;;2209   
                          ENDP

                  TIM_OC4PolarityConfig PROC
;;;2229   
;;;2230     tmpccer = TIMx->CCER;
00078c  8c02              LDRH     r2,[r0,#0x20]
;;;2231   
;;;2232     /* Set or Reset the CC4P Bit */
;;;2233     tmpccer &= CCER_CC4P_Reset;
00078e  f422f422          BIC      r2,r2,#0x2000
;;;2234     tmpccer |= (u16)(TIM_OCPolarity << 12);
000792  ea42ea42          ORR      r1,r2,r1,LSL #12
;;;2235   
;;;2236     /* Write to TIMx CCER register */
;;;2237     TIMx->CCER = tmpccer;
000796  8401              STRH     r1,[r0,#0x20]
;;;2238   }
000798  4770              BX       lr
;;;2239   
                          ENDP

                  TIM_CCxCmd PROC
;;;2256   void TIM_CCxCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCx)
;;;2257   {
00079a  b510              PUSH     {r4,lr}
;;;2258     /* Check the parameters */
;;;2259     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;2260     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2261     assert_param(IS_TIM_CCX(TIM_CCx));
;;;2262   
;;;2263     /* Reset the CCxE Bit */
;;;2264     TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
00079c  8c03              LDRH     r3,[r0,#0x20]
00079e  2401              MOVS     r4,#1
0007a0  408c              LSLS     r4,r4,r1
0007a2  43a3              BICS     r3,r3,r4
0007a4  8403              STRH     r3,[r0,#0x20]
;;;2265   
;;;2266     /* Set or reset the CCxE Bit */ 
;;;2267     TIMx->CCER |=  (u16)(TIM_CCx << TIM_Channel);
0007a6  8c03              LDRH     r3,[r0,#0x20]
0007a8  408a              LSLS     r2,r2,r1
0007aa  4313              ORRS     r3,r3,r2
0007ac  8403              STRH     r3,[r0,#0x20]
;;;2268   }
0007ae  bd10              POP      {r4,pc}
;;;2269   
                          ENDP

                  TIM_CCxNCmd PROC
;;;2284   void TIM_CCxNCmd(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_CCxN)
;;;2285   {
0007b0  b510              PUSH     {r4,lr}
;;;2286     /* Check the parameters */
;;;2287     assert_param(IS_TIM_18_PERIPH(TIMx));
;;;2288     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
;;;2289     assert_param(IS_TIM_CCXN(TIM_CCxN));
;;;2290   
;;;2291     /* Reset the CCxNE Bit */
;;;2292     TIMx->CCER &= (u16)(~((u16)(CCER_CCNE_Set << TIM_Channel)));
0007b2  8c03              LDRH     r3,[r0,#0x20]
0007b4  2404              MOVS     r4,#4
0007b6  408c              LSLS     r4,r4,r1
0007b8  43a3              BICS     r3,r3,r4
0007ba  8403              STRH     r3,[r0,#0x20]
;;;2293   
;;;2294     /* Set or reset the CCxNE Bit */ 
;;;2295     TIMx->CCER |=  (u16)(TIM_CCxN << TIM_Channel);
0007bc  8c03              LDRH     r3,[r0,#0x20]
0007be  408a              LSLS     r2,r2,r1
0007c0  4313              ORRS     r3,r3,r2
0007c2  8403              STRH     r3,[r0,#0x20]
;;;2296   }
0007c4  bd10              POP      {r4,pc}
;;;2297   
                          ENDP

                  TIM_SelectOCxM PROC
;;;2324   void TIM_SelectOCxM(TIM_TypeDef* TIMx, u16 TIM_Channel, u16 TIM_OCMode)
;;;2325   {
0007c6  b510              PUSH     {r4,lr}
;;;2326     /* Check the parameters */
;;;2327     assert_param(IS_TIM_123458_PERIPH(TIMx));
;;;2328     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2329     assert_param(IS_TIM_OCM(TIM_OCMode));
;;;2330     
;;;2331     /* Disable the Channel: Reset the CCxE Bit */
;;;2332     TIMx->CCER &= (u16)(~((u16)(CCER_CCE_Set << TIM_Channel)));
0007c8  8c04              LDRH     r4,[r0,#0x20]
0007ca  2301              MOVS     r3,#1
0007cc  408b              LSLS     r3,r3,r1
0007ce  439c              BICS     r4,r4,r3
0007d0  8404              STRH     r4,[r0,#0x20]
;;;2333   
;;;2334     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
0007d2  b109              CBZ      r1,|L1.2008|
0007d4  2908              CMP      r1,#8
0007d6  d108              BNE      |L1.2026|
                  |L1.2008|
;;;2335     {
;;;2336       /* Reset the OCxM bits in the CCMRx register */
;;;2337       *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) &= CCMR_OC13M_Mask;
0007d8  eb00eb00          ADD      r0,r0,r1,LSR #1
0007dc  6981              LDR      r1,[r0,#0x18]
0007de  f64ff64f          MOV      r3,#0xff8f
0007e2  4019              ANDS     r1,r1,r3
0007e4  6181              STR      r1,[r0,#0x18]
;;;2338      
;;;2339       /* Configure the OCxM bits in the CCMRx register */
;;;2340       *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + (TIM_Channel>>1))) = TIM_OCMode;
0007e6  6182              STR      r2,[r0,#0x18]
;;;2341   
;;;2342     }
;;;2343     else
;;;2344     {
;;;2345       /* Reset the OCxM bits in the CCMRx register */
;;;2346       *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) &= CCMR_OC24M_Mask;
;;;2347       
;;;2348       /* Configure the OCxM bits in the CCMRx register */
;;;2349       *((vu32 *)((*(u32*)&TIMx) + CCMR_Offset + ((u16)(TIM_Channel - 4)>> 1))) = (u16)(TIM_OCMode << 8);
;;;2350     }
;;;2351   }
0007e8  bd10              POP      {r4,pc}
                  |L1.2026|
0007ea  1f09              SUBS     r1,r1,#4              ;2346
0007ec  b289              UXTH     r1,r1                 ;2346
0007ee  eb00eb00          ADD      r0,r0,r1,LSR #1       ;2346
0007f2  6981              LDR      r1,[r0,#0x18]         ;2346
0007f4  f648f648          MOV      r3,#0x8fff            ;2346
0007f8  4019              ANDS     r1,r1,r3              ;2346
0007fa  6181              STR      r1,[r0,#0x18]         ;2346
0007fc  0611              LSLS     r1,r2,#24             ;2349
0007fe  0c09              LSRS     r1,r1,#16             ;2349
000800  6181              STR      r1,[r0,#0x18]         ;2349
000802  bd10              POP      {r4,pc}
;;;2352   
                          ENDP

                  TIM_UpdateDisableConfig PROC
;;;2367   
;;;2368     if (NewState != DISABLE)
000804  b121              CBZ      r1,|L1.2064|
;;;2369     {
;;;2370       /* Set the Update Disable Bit */
;;;2371       TIMx->CR1 |= CR1_UDIS_Set;
000806  8801              LDRH     r1,[r0,#0]
000808  f041f041          ORR      r1,r1,#2
00080c  8001              STRH     r1,[r0,#0]
;;;2372     }
;;;2373     else
;;;2374     {
;;;2375       /* Reset the Update Disable Bit */
;;;2376       TIMx->CR1 &= CR1_UDIS_Reset;
;;;2377     }
;;;2378   }
00080e  4770              BX       lr
                  |L1.2064|
000810  8801              LDRH     r1,[r0,#0]            ;2376
000812  f240f240          MOV      r2,#0x3fd             ;2376
000816  4011              ANDS     r1,r1,r2              ;2376
000818  8001              STRH     r1,[r0,#0]            ;2376
00081a  4770              BX       lr
;;;2379   
                          ENDP

                  TIM_UpdateRequestConfig PROC
;;;2396   
;;;2397     if (TIM_UpdateSource != TIM_UpdateSource_Global)
00081c  b121              CBZ      r1,|L1.2088|
;;;2398     {
;;;2399       /* Set the URS Bit */
;;;2400       TIMx->CR1 |= CR1_URS_Set;
00081e  8801              LDRH     r1,[r0,#0]
000820  f041f041          ORR      r1,r1,#4
000824  8001              STRH     r1,[r0,#0]
;;;2401     }
;;;2402     else
;;;2403     {
;;;2404       /* Reset the URS Bit */
;;;2405       TIMx->CR1 &= CR1_URS_Reset;
;;;2406     }
;;;2407   }
000826  4770              BX       lr
                  |L1.2088|
000828  8801              LDRH     r1,[r0,#0]            ;2405
00082a  f240f240          MOV      r2,#0x3fb             ;2405
00082e  4011              ANDS     r1,r1,r2              ;2405
000830  8001              STRH     r1,[r0,#0]            ;2405
000832  4770              BX       lr
;;;2408   
                          ENDP

                  TIM_SelectHallSensor PROC
;;;2423   
;;;2424     if (NewState != DISABLE)
000834  b121              CBZ      r1,|L1.2112|
;;;2425     {
;;;2426       /* Set the TI1S Bit */
;;;2427       TIMx->CR2 |= CR2_TI1S_Set;
000836  8881              LDRH     r1,[r0,#4]
000838  f041f041          ORR      r1,r1,#0x80
00083c  8081              STRH     r1,[r0,#4]
;;;2428     }
;;;2429     else
;;;2430     {
;;;2431       /* Reset the TI1S Bit */
;;;2432       TIMx->CR2 &= CR2_TI1S_Reset;
;;;2433     }
;;;2434   }
00083e  4770              BX       lr
                  |L1.2112|
000840  8881              LDRH     r1,[r0,#4]            ;2432
000842  f021f021          BIC      r1,r1,#0x80           ;2432
000846  8081              STRH     r1,[r0,#4]            ;2432
000848  4770              BX       lr
;;;2435   
                          ENDP

                  TIM_SelectOnePulseMode PROC
;;;2453     /* Reset the OPM Bit */
;;;2454     TIMx->CR1 &= CR1_OPM_Reset;
00084a  8802              LDRH     r2,[r0,#0]
00084c  f240f240          MOV      r3,#0x3f7
000850  401a              ANDS     r2,r2,r3
000852  8002              STRH     r2,[r0,#0]
;;;2455   
;;;2456     /* Configure the OPM Mode */
;;;2457     TIMx->CR1 |= TIM_OPMode;
000854  8802              LDRH     r2,[r0,#0]
000856  430a              ORRS     r2,r2,r1
000858  8002              STRH     r2,[r0,#0]
;;;2458   }
00085a  4770              BX       lr
;;;2459   
                          ENDP

                  TIM_SelectOutputTrigger PROC
;;;2487     /* Reset the MMS Bits */
;;;2488     TIMx->CR2 &= CR2_MMS_Mask;
00085c  8882              LDRH     r2,[r0,#4]
00085e  f022f022          BIC      r2,r2,#0x70
000862  8082              STRH     r2,[r0,#4]
;;;2489   
;;;2490     /* Select the TRGO source */
;;;2491     TIMx->CR2 |=  TIM_TRGOSource;
000864  8882              LDRH     r2,[r0,#4]
000866  430a              ORRS     r2,r2,r1
000868  8082              STRH     r2,[r0,#4]
;;;2492   }
00086a  4770              BX       lr
;;;2493   
                          ENDP

                  TIM_SelectSlaveMode PROC
;;;2514     /* Reset the SMS Bits */
;;;2515     TIMx->SMCR &= SMCR_SMS_Mask;
00086c  8902              LDRH     r2,[r0,#8]
00086e  f022f022          BIC      r2,r2,#7
000872  8102              STRH     r2,[r0,#8]
;;;2516   
;;;2517     /* Select the Slave Mode */
;;;2518     TIMx->SMCR |= TIM_SlaveMode;
000874  8902              LDRH     r2,[r0,#8]
000876  430a              ORRS     r2,r2,r1
000878  8102              STRH     r2,[r0,#8]
;;;2519   }
00087a  4770              BX       lr
;;;2520   
                          ENDP

                  TIM_SelectMasterSlaveMode PROC
;;;2540     /* Reset the MSM Bit */
;;;2541     TIMx->SMCR &= SMCR_MSM_Reset;
00087c  8902              LDRH     r2,[r0,#8]
00087e  f022f022          BIC      r2,r2,#0x80
000882  8102              STRH     r2,[r0,#8]
;;;2542     
;;;2543     /* Set or Reset the MSM Bit */
;;;2544     TIMx->SMCR |= TIM_MasterSlaveMode;
000884  8902              LDRH     r2,[r0,#8]
000886  430a              ORRS     r2,r2,r1
000888  8102              STRH     r2,[r0,#8]
;;;2545   }
00088a  4770              BX       lr
;;;2546   
                          ENDP

                  TIM_SetCounter PROC
;;;2560     /* Set the Counter Register value */
;;;2561     TIMx->CNT = Counter;
00088c  8481              STRH     r1,[r0,#0x24]
;;;2562   }
00088e  4770              BX       lr
;;;2563   
                          ENDP

                  TIM_SetAutoreload PROC
;;;2577     /* Set the Autoreload Register value */
;;;2578     TIMx->ARR = Autoreload;
000890  8581              STRH     r1,[r0,#0x2c]
;;;2579   }
000892  4770              BX       lr
;;;2580   
                          ENDP

                  TIM_SetCompare1 PROC
;;;2595     /* Set the Capture Compare1 Register value */
;;;2596     TIMx->CCR1 = Compare1;
000894  8681              STRH     r1,[r0,#0x34]
;;;2597   }
000896  4770              BX       lr
;;;2598   
                          ENDP

                  TIM_SetCompare2 PROC
;;;2613     /* Set the Capture Compare2 Register value */
;;;2614     TIMx->CCR2 = Compare2;
000898  8701              STRH     r1,[r0,#0x38]
;;;2615   }
00089a  4770              BX       lr
;;;2616   
                          ENDP

                  TIM_SetCompare3 PROC
;;;2631     /* Set the Capture Compare3 Register value */
;;;2632     TIMx->CCR3 = Compare3;
00089c  8781              STRH     r1,[r0,#0x3c]
;;;2633   }
00089e  4770              BX       lr
;;;2634   
                          ENDP

                  TIM_SetCompare4 PROC
;;;2649     /* Set the Capture Compare4 Register value */
;;;2650     TIMx->CCR4 = Compare4;
0008a0  f8a0f8a0          STRH     r1,[r0,#0x40]
;;;2651   }
0008a4  4770              BX       lr
;;;2652   
                          ENDP

                  TIM_SetClockDivision PROC
;;;2784     /* Reset the CKD Bits */
;;;2785     TIMx->CR1 &= CR1_CKD_Mask;
0008a6  8802              LDRH     r2,[r0,#0]
0008a8  b2d2              UXTB     r2,r2
0008aa  8002              STRH     r2,[r0,#0]
;;;2786   
;;;2787     /* Set the CKD value */
;;;2788     TIMx->CR1 |= TIM_CKD;
0008ac  8802              LDRH     r2,[r0,#0]
0008ae  430a              ORRS     r2,r2,r1
0008b0  8002              STRH     r2,[r0,#0]
;;;2789   }
0008b2  4770              BX       lr
;;;2790   /*******************************************************************************
                          ENDP

                  TIM_GetCapture1 PROC
;;;2803     /* Get the Capture 1 Register value */
;;;2804     return TIMx->CCR1;
0008b4  8e80              LDRH     r0,[r0,#0x34]
;;;2805   }
0008b6  4770              BX       lr
;;;2806   
                          ENDP

                  TIM_GetCapture2 PROC
;;;2820     /* Get the Capture 2 Register value */
;;;2821     return TIMx->CCR2;
0008b8  8f00              LDRH     r0,[r0,#0x38]
;;;2822   }
0008ba  4770              BX       lr
;;;2823   
                          ENDP

                  TIM_GetCapture3 PROC
;;;2837     /* Get the Capture 3 Register value */
;;;2838     return TIMx->CCR3;
0008bc  8f80              LDRH     r0,[r0,#0x3c]
;;;2839   }
0008be  4770              BX       lr
;;;2840   
                          ENDP

                  TIM_GetCapture4 PROC
;;;2854     /* Get the Capture 4 Register value */
;;;2855     return TIMx->CCR4;
0008c0  f8b0f8b0          LDRH     r0,[r0,#0x40]
;;;2856   }
0008c4  4770              BX       lr
;;;2857   
                          ENDP

                  TIM_GetCounter PROC
;;;2870     /* Get the Counter Register value */
;;;2871     return TIMx->CNT;
0008c6  8c80              LDRH     r0,[r0,#0x24]
;;;2872   }
0008c8  4770              BX       lr
;;;2873   
                          ENDP

                  TIM_GetPrescaler PROC
;;;2886     /* Get the Prescaler Register value */
;;;2887     return TIMx->PSC;
0008ca  8d00              LDRH     r0,[r0,#0x28]
;;;2888   }
0008cc  4770              BX       lr
;;;2889   
                          ENDP

                  TIM_GetFlagStatus PROC
;;;2911   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, u16 TIM_FLAG)
;;;2912   { 
0008ce  4602              MOV      r2,r0
;;;2913     ITStatus bitstatus = RESET;  
0008d0  2000              MOVS     r0,#0
;;;2914   
;;;2915     /* Check the parameters */
;;;2916     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2917     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
;;;2918     assert_param(IS_TIM_PERIPH_FLAG(TIMx, TIM_FLAG));
;;;2919     
;;;2920     if ((TIMx->SR & TIM_FLAG) != (u16)RESET)
0008d2  8a12              LDRH     r2,[r2,#0x10]
0008d4  420a              TST      r2,r1
0008d6  d000              BEQ      |L1.2266|
;;;2921     {
;;;2922       bitstatus = SET;
0008d8  2001              MOVS     r0,#1
                  |L1.2266|
;;;2923     }
;;;2924     else
;;;2925     {
;;;2926       bitstatus = RESET;
;;;2927     }
;;;2928     return bitstatus;
;;;2929   }
0008da  4770              BX       lr
;;;2930   
                          ENDP

                  TIM_ClearFlag PROC
;;;2959     /* Clear the flags */
;;;2960     TIMx->SR = (u16)~TIM_FLAG;
0008dc  43c9              MVNS     r1,r1
0008de  8201              STRH     r1,[r0,#0x10]
;;;2961   }
0008e0  4770              BX       lr
;;;2962   
                          ENDP

                  TIM_GetITStatus PROC
;;;2981   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, u16 TIM_IT)
;;;2982   {
0008e2  4602              MOV      r2,r0
;;;2983     ITStatus bitstatus = RESET;  
0008e4  2000              MOVS     r0,#0
;;;2984     u16 itstatus = 0x0, itenable = 0x0;
;;;2985   
;;;2986     /* Check the parameters */
;;;2987     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2988     assert_param(IS_TIM_GET_IT(TIM_IT));
;;;2989     assert_param(IS_TIM_PERIPH_IT(TIMx, TIM_IT));
;;;2990      
;;;2991     itstatus = TIMx->SR & TIM_IT;
0008e6  8a13              LDRH     r3,[r2,#0x10]
0008e8  400b              ANDS     r3,r3,r1
;;;2992     
;;;2993     itenable = TIMx->DIER & TIM_IT;
0008ea  8992              LDRH     r2,[r2,#0xc]
0008ec  400a              ANDS     r2,r2,r1
;;;2994   
;;;2995     if ((itstatus != (u16)RESET) && (itenable != (u16)RESET))
0008ee  2b00              CMP      r3,#0
0008f0  d002              BEQ      |L1.2296|
0008f2  2a00              CMP      r2,#0
0008f4  d000              BEQ      |L1.2296|
;;;2996     {
;;;2997       bitstatus = SET;
0008f6  2001              MOVS     r0,#1
                  |L1.2296|
;;;2998     }
;;;2999     else
;;;3000     {
;;;3001       bitstatus = RESET;
;;;3002     }
;;;3003     return bitstatus;
;;;3004   }
0008f8  4770              BX       lr
;;;3005   
                          ENDP

                  TIM_ClearITPendingBit PROC
;;;3030     /* Clear the IT pending Bit */
;;;3031     TIMx->SR = (u16)~TIM_IT;
0008fa  43c9              MVNS     r1,r1
0008fc  8201              STRH     r1,[r0,#0x10]
;;;3032   }
0008fe  4770              BX       lr
;;;3033   
                          ENDP

