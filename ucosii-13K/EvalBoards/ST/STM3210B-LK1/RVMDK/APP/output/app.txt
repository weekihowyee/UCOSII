; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\app.o --depend=.\output\app.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\app.crf app.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  App_DispScr_SignOn PROC
;;;374    static  void  App_DispScr_SignOn (void)
;;;375    {
000000  b570              PUSH     {r4-r6,lr}
;;;376    
;;;377    
;;;378        printf("\r\n  Micrium uC/OS-II  \r\n");
000002  a0a0              ADR      r0,|L1.644|
000004  f7fff7ff          BL       __1printf
;;;379        printf("  ST STM32 (Cortex-M3)\r\n\r\n");
000008  a0a5              ADR      r0,|L1.672|
00000a  f7fff7ff          BL       __1printf
;;;380    
;;;381        printf("  uC/OS-II:  V%ld.%ld%ld\r\n",OSVersion()/100,(OSVersion() % 100) / 10,(OSVersion() % 10));
00000e  f7fff7ff          BL       OSVersion
000012  240a              MOVS     r4,#0xa
000014  fbb0fbb0          UDIV     r1,r0,r4
000018  fb04fb04          MLS      r6,r4,r1,r0
00001c  f7fff7ff          BL       OSVersion
000020  2564              MOVS     r5,#0x64
000022  fbb0fbb0          UDIV     r1,r0,r5
000026  fb05fb05          MLS      r0,r5,r1,r0
00002a  fbb0fbb0          UDIV     r4,r0,r4
00002e  f7fff7ff          BL       OSVersion
000032  fbb0fbb0          UDIV     r1,r0,r5
000036  4633              MOV      r3,r6
000038  4622              MOV      r2,r4
00003a  a0a0              ADR      r0,|L1.700|
00003c  f7fff7ff          BL       __1printf
;;;382        printf("  TickRate: %ld  \r\n",OS_TICKS_PER_SEC);
000040  f44ff44f          MOV      r1,#0x3e8
000044  a0a4              ADR      r0,|L1.728|
000046  f7fff7ff          BL       __1printf
;;;383        printf("  CPU Usage: %ld%    \r\n",OSCPUUsage);
00004a  48a8              LDR      r0,|L1.748|
00004c  7801              LDRB     r1,[r0,#0]  ; OSCPUUsage
00004e  a0a8              ADR      r0,|L1.752|
000050  f7fff7ff          BL       __1printf
;;;384        printf("  CPU Speed:%ld MHz  \r\n",BSP_CPU_ClkFreq() / 1000000L);
000054  f7fff7ff          BL       BSP_CPU_ClkFreq
000058  49ab              LDR      r1,|L1.776|
00005a  fbb0fbb0          UDIV     r1,r0,r1
00005e  a0ab              ADR      r0,|L1.780|
000060  f7fff7ff          BL       __1printf
;;;385        printf("  #Ticks: %ld  \r\n",OSTime);
000064  48af              LDR      r0,|L1.804|
000066  6801              LDR      r1,[r0,#0]  ; OSTime
000068  a0af              ADR      r0,|L1.808|
00006a  f7fff7ff          BL       __1printf
;;;386        printf("  #CtxSw: %ld  \r\n\r\n",OSCtxSwCtr);
00006e  48b3              LDR      r0,|L1.828|
000070  6801              LDR      r1,[r0,#0]  ; OSCtxSwCtr
000072  e8bde8bd          POP      {r4-r6,lr}
000076  a0b2              ADR      r0,|L1.832|
000078  f7fff7ff          B.W      __1printf
;;;387    
;;;388    }
;;;389    /*
                          ENDP

                  App_TaskKbd PROC
;;;321    static  void  App_TaskKbd (void *p_arg)
;;;322    {
00007c  b570              PUSH     {r4-r6,lr}
                  |L1.126|
;;;323        INT8U  b1,b2;
;;;324    	//INT8U  err;
;;;325        (void)p_arg;
;;;326    	 
;;;327        while (DEF_TRUE) {
;;;328    	    //OSSemPend(InfoSem,0,&err);
;;;329            b1 = BSP_PB_GetStatus(BSP_PB_ID_KEY1);
00007e  2001              MOVS     r0,#1
000080  f7fff7ff          BL       BSP_PB_GetStatus
000084  4605              MOV      r5,r0
;;;330    		b2 = BSP_PB_GetStatus(BSP_PB_ID_KEY2);
000086  2002              MOVS     r0,#2
000088  f7fff7ff          BL       BSP_PB_GetStatus
00008c  4604              MOV      r4,r0
;;;331    		if (b1 == 1)	{
00008e  2d01              CMP      r5,#1
000090  d101              BNE      |L1.150|
;;;332    		App_DispScr_SignOn();
000092  f7fff7ff          BL       App_DispScr_SignOn
                  |L1.150|
;;;333    		} 
;;;334    		if (b2 == 2)	{
000096  2c02              CMP      r4,#2
000098  d101              BNE      |L1.158|
;;;335    		App_DispScr_SignOn();//OSMboxPost(Disp_Box,(void*)0);
00009a  f7fff7ff          BL       App_DispScr_SignOn
                  |L1.158|
;;;336    		}
;;;337    		OSTimeDlyHMSM(0, 0, 0, 20); 
00009e  2200              MOVS     r2,#0
0000a0  2314              MOVS     r3,#0x14
0000a2  4611              MOV      r1,r2
0000a4  4610              MOV      r0,r2
0000a6  f7fff7ff          BL       OSTimeDlyHMSM
0000aa  e7e8              B        |L1.126|
;;;338        }
;;;339    }
;;;340    
                          ENDP

                  App_TaskUart PROC
;;;196    	ptr1 = ptr;
;;;197    	while(1);
0000ac  e7fe              B        App_TaskUart
;;;198    	{		
;;;199    		do{
;;;200    			*ptr = USART_ReceiveData(USART2);
;;;201    			ptr++;
;;;202    			lenth ++ ;
;;;203    		  }while(USART_GetFlagStatus(USART2,USART_FLAG_RXNE) == 1);
;;;204    		flag++;
;;;205    		if(flag == 4)
;;;206    			{
;;;207    				for(i = 0;i<lenth;i++)
;;;208    				{
;;;209    					ptr = ptr1;
;;;210    					USART_SendData(USART2,*ptr1);
;;;211    	      	while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != RESET);
;;;212    	    	}
;;;213    	    	ptr1 = ptr;
;;;214    	    	flag = 0;
;;;215    	    	lenth = 0;
;;;216    			}
;;;217    		
;;;218    	}
;;;219    	
;;;220    }
;;;221    
                          ENDP

                  App_TaskLED PROC
;;;292    static  void  App_TaskLED (void *p_arg)
;;;293    {
0000ae  b510              PUSH     {r4,lr}
0000b0  f44ff44f          MOV      r4,#0x320
                  |L1.180|
;;;294    	while(1)
;;;295    		{
;;;296    	  OSTimeDlyHMSM(0, 0, 0, 800);	
0000b4  2200              MOVS     r2,#0
0000b6  4623              MOV      r3,r4
0000b8  4611              MOV      r1,r2
0000ba  4610              MOV      r0,r2
0000bc  f7fff7ff          BL       OSTimeDlyHMSM
;;;297    	  BSP_LED_On(1);
0000c0  2001              MOVS     r0,#1
0000c2  f7fff7ff          BL       BSP_LED_On
;;;298    	  OSTimeDlyHMSM(0, 0, 0, 800);
0000c6  2200              MOVS     r2,#0
0000c8  4623              MOV      r3,r4
0000ca  4611              MOV      r1,r2
0000cc  4610              MOV      r0,r2
0000ce  f7fff7ff          BL       OSTimeDlyHMSM
;;;299    	  BSP_LED_Off(1);	 
0000d2  2001              MOVS     r0,#1
0000d4  f7fff7ff          BL       BSP_LED_Off
0000d8  e7ec              B        |L1.180|
;;;300    	  //USART_SendData(USART2, 'O');
;;;301       // while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); 
;;;302        }
;;;303    }
;;;304    
                          ENDP

                  App_TaskCreate PROC
;;;240    static  void  App_TaskCreate (void)
;;;241    {
0000da  b508              PUSH     {r3,lr}
;;;242        CPU_INT08U  os_err;
;;;243    
;;;244    	os_err = OSTaskCreate((void (*)(void *)) App_TaskLED,
0000dc  2306              MOVS     r3,#6
0000de  4a9d              LDR      r2,|L1.852|
0000e0  2100              MOVS     r1,#0
0000e2  f2aff2af          ADR      r0,App_TaskLED + 1
0000e6  f7fff7ff          BL       OSTaskCreate
0000ea  9000              STR      r0,[sp,#0]
;;;245                              (void          * ) 0,
;;;246                              (OS_STK        * )&App_TaskLEDStk[APP_TASK_LED_STK_SIZE - 1],
;;;247                              (INT8U           ) APP_TASK_LED_PRIO
;;;248                             );
;;;249    	printf("Creat App_TaskLED£¡\r\n");
0000ec  a09a              ADR      r0,|L1.856|
0000ee  f7fff7ff          BL       __1printf
;;;250    #if (OS_TASK_NAME_SIZE >= 9)
;;;251        OSTaskNameSet(APP_TASK_LED_PRIO, "LED", &os_err);
0000f2  466a              MOV      r2,sp
0000f4  a19e              ADR      r1,|L1.880|
0000f6  2006              MOVS     r0,#6
0000f8  f7fff7ff          BL       OSTaskNameSet
;;;252    #endif
;;;253    
;;;254    os_err = OSTaskCreate((void (*)(void *)) App_TaskUart,
0000fc  2307              MOVS     r3,#7
0000fe  4a9d              LDR      r2,|L1.884|
000100  2100              MOVS     r1,#0
000102  f2aff2af          ADR      r0,App_TaskUart + 1
000106  f7fff7ff          BL       OSTaskCreate
00010a  9000              STR      r0,[sp,#0]
;;;255                              (void          * ) 0,
;;;256                              (OS_STK        * )&App_TaskUartStk[APP_TASK_UART_STK_SIZE],
;;;257                              (INT8U           ) APP_TASK_UART_PRIO
;;;258                             );
;;;259    	printf("Creat App_TaskUart£¡\r\n");
00010c  a09a              ADR      r0,|L1.888|
00010e  f7fff7ff          BL       __1printf
;;;260    #if (OS_TASK_NAME_SIZE >= 9)
;;;261        OSTaskNameSet(APP_TASK_UART_PRIO, "USART", &os_err);
000112  466a              MOV      r2,sp
000114  a19e              ADR      r1,|L1.912|
000116  2007              MOVS     r0,#7
000118  f7fff7ff          BL       OSTaskNameSet
;;;262    #endif
;;;263    
;;;264    
;;;265        os_err = OSTaskCreate((void (*)(void *)) App_TaskKbd,
00011c  2304              MOVS     r3,#4
00011e  4a9e              LDR      r2,|L1.920|
000120  2100              MOVS     r1,#0
000122  f2aff2af          ADR      r0,App_TaskKbd + 1
000126  f7fff7ff          BL       OSTaskCreate
00012a  9000              STR      r0,[sp,#0]
;;;266                              (void          * ) 0,
;;;267                              (OS_STK        * )&App_TaskKbdStk[APP_TASK_KBD_STK_SIZE - 1],
;;;268                              (INT8U           ) APP_TASK_KBD_PRIO
;;;269                              );
;;;270    	printf("Creat App_TaskKbd£¡\r\n");
00012c  a09b              ADR      r0,|L1.924|
00012e  f7fff7ff          BL       __1printf
;;;271    		
;;;272    #if (OS_TASK_NAME_SIZE >= 9)
;;;273        OSTaskNameSet(APP_TASK_KBD_PRIO, "KeyBoard", &os_err);
000132  466a              MOV      r2,sp
000134  a19f              ADR      r1,|L1.948|
000136  2004              MOVS     r0,#4
000138  f7fff7ff          BL       OSTaskNameSet
;;;274    #endif
;;;275    
;;;276    }
00013c  bd08              POP      {r3,pc}
;;;277    /*
                          ENDP

                  App_TaskStart PROC
;;;143    static  void  App_TaskStart (void *p_arg)
;;;144    {
00013e  e92de92d          PUSH     {r4-r8,lr}
;;;145        CPU_INT32U  i;
;;;146        CPU_INT32U  j;
;;;147        CPU_INT32U  dly;
;;;148    
;;;149    
;;;150        (void)p_arg;
;;;151    
;;;152    	OS_CPU_SysTickInit();                                       /* Initialize the SysTick. 		*/
000142  f7fff7ff          BL       OS_CPU_SysTickInit
;;;153    
;;;154    #if (OS_TASK_STAT_EN > 0)
;;;155        OSStatInit();                                               /* Determine CPU capacity.                              */
000146  f7fff7ff          BL       OSStatInit
;;;156    #endif
;;;157    
;;;158    	App_TaskCreate();
00014a  f7fff7ff          BL       App_TaskCreate
;;;159    
;;;160        while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
00014e  2702              MOVS     r7,#2
                  |L1.336|
;;;161    		for (j = 0; j < 4; j++) {
000150  2500              MOVS     r5,#0
                  |L1.338|
;;;162                for (i = 1; i <= 4; i++) {
000152  2401              MOVS     r4,#1
                  |L1.340|
;;;163                    BSP_LED_On(i);
000154  b2e0              UXTB     r0,r4
000156  4606              MOV      r6,r0
000158  f7fff7ff          BL       BSP_LED_On
;;;164                    dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
00015c  2001              MOVS     r0,#1
00015e  f7fff7ff          BL       BSP_ADC_GetStatus
000162  eb07eb07          ADD      r3,r7,r0,LSR #4
;;;165                    OSTimeDlyHMSM(0, 0, 0, dly);
000166  2200              MOVS     r2,#0
000168  4611              MOV      r1,r2
00016a  4610              MOV      r0,r2
00016c  f7fff7ff          BL       OSTimeDlyHMSM
;;;166                    BSP_LED_Off(i);
000170  4630              MOV      r0,r6
000172  f7fff7ff          BL       BSP_LED_Off
;;;167                    dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
000176  2001              MOVS     r0,#1
000178  f7fff7ff          BL       BSP_ADC_GetStatus
00017c  eb07eb07          ADD      r3,r7,r0,LSR #4
;;;168                    OSTimeDlyHMSM(0, 0, 0, dly);
000180  2200              MOVS     r2,#0
000182  4611              MOV      r1,r2
000184  4610              MOV      r0,r2
000186  f7fff7ff          BL       OSTimeDlyHMSM
00018a  1c64              ADDS     r4,r4,#1              ;162
00018c  2c04              CMP      r4,#4                 ;162
00018e  d9e1              BLS      |L1.340|
;;;169                }
;;;170    
;;;171                for (i = 3; i >= 2; i--) {
000190  2403              MOVS     r4,#3
                  |L1.402|
;;;172                    BSP_LED_On(i);
000192  b2e0              UXTB     r0,r4
000194  4606              MOV      r6,r0
000196  f7fff7ff          BL       BSP_LED_On
;;;173                    dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
00019a  2001              MOVS     r0,#1
00019c  f7fff7ff          BL       BSP_ADC_GetStatus
0001a0  eb07eb07          ADD      r3,r7,r0,LSR #4
;;;174                    OSTimeDlyHMSM(0, 0, 0, dly);
0001a4  2200              MOVS     r2,#0
0001a6  4611              MOV      r1,r2
0001a8  4610              MOV      r0,r2
0001aa  f7fff7ff          BL       OSTimeDlyHMSM
;;;175                    BSP_LED_Off(i);
0001ae  4630              MOV      r0,r6
0001b0  f7fff7ff          BL       BSP_LED_Off
;;;176                    dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
0001b4  2001              MOVS     r0,#1
0001b6  f7fff7ff          BL       BSP_ADC_GetStatus
0001ba  eb07eb07          ADD      r3,r7,r0,LSR #4
;;;177                    OSTimeDlyHMSM(0, 0, 0, dly);
0001be  2200              MOVS     r2,#0
0001c0  4611              MOV      r1,r2
0001c2  4610              MOV      r0,r2
0001c4  f7fff7ff          BL       OSTimeDlyHMSM
0001c8  1e64              SUBS     r4,r4,#1              ;171
0001ca  2c02              CMP      r4,#2                 ;171
0001cc  d2e1              BCS      |L1.402|
0001ce  1c6d              ADDS     r5,r5,#1              ;161
0001d0  2d04              CMP      r5,#4                 ;161
0001d2  d3be              BCC      |L1.338|
;;;178                }
;;;179            }
;;;180    
;;;181            for (i = 0; i < 4; i++) {
0001d4  2400              MOVS     r4,#0
                  |L1.470|
;;;182                BSP_LED_On(0);
0001d6  2000              MOVS     r0,#0
0001d8  f7fff7ff          BL       BSP_LED_On
;;;183                dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
0001dc  2001              MOVS     r0,#1
0001de  f7fff7ff          BL       BSP_ADC_GetStatus
0001e2  eb07eb07          ADD      r0,r7,r0,LSR #4
;;;184                OSTimeDlyHMSM(0, 0, 0, dly * 3);
0001e6  2200              MOVS     r2,#0
0001e8  eb00eb00          ADD      r3,r0,r0,LSL #1
0001ec  4611              MOV      r1,r2
0001ee  4610              MOV      r0,r2
0001f0  f7fff7ff          BL       OSTimeDlyHMSM
;;;185                BSP_LED_Off(0);
0001f4  2000              MOVS     r0,#0
0001f6  f7fff7ff          BL       BSP_LED_Off
;;;186                dly = (BSP_ADC_GetStatus(1) >> 4) + 2;
0001fa  2001              MOVS     r0,#1
0001fc  f7fff7ff          BL       BSP_ADC_GetStatus
000200  eb07eb07          ADD      r0,r7,r0,LSR #4
;;;187                OSTimeDlyHMSM(0, 0, 0, dly * 3);
000204  2200              MOVS     r2,#0
000206  eb00eb00          ADD      r3,r0,r0,LSL #1
00020a  4611              MOV      r1,r2
00020c  4610              MOV      r0,r2
00020e  f7fff7ff          BL       OSTimeDlyHMSM
000212  1c64              ADDS     r4,r4,#1              ;181
000214  2c04              CMP      r4,#4                 ;181
000216  d3de              BCC      |L1.470|
000218  e79a              B        |L1.336|
;;;188            }
;;;189        }
;;;190    }
;;;191    
                          ENDP

                  main PROC
;;;93     int  main (void)
;;;94     {
00021a  b538              PUSH     {r3-r5,lr}
;;;95         CPU_INT08U  os_err;
;;;96     
;;;97         BSP_IntDisAll();                                            /* Disable all ints until we are ready to accept them.  */
00021c  f7fff7ff          BL       BSP_IntDisAll
;;;98     
;;;99         OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel".         */
000220  f7fff7ff          BL       OSInit
;;;100    
;;;101    	BSP_Init();                                                 /* Initialize BSP functions.  */
000224  f7fff7ff          BL       BSP_Init
;;;102    
;;;103      BSP_IntInit();//³õÊ¼»¯¸÷ÖÐ¶ÏÈë¿Úº¯Êý
000228  f7fff7ff          BL       BSP_IntInit
;;;104    	
;;;105    	App_DispScr_SignOn ();
00022c  f7fff7ff          BL       App_DispScr_SignOn
;;;106        
;;;107    	                             
;;;108    	printf("OS Init OK£¡\r\n");
000230  a063              ADR      r0,|L1.960|
000232  f7fff7ff          BL       __1printf
;;;109        os_err = OSTaskCreate((void (*)(void *)) App_TaskStart,  /* Create the start task.                               */
000236  2302              MOVS     r3,#2
000238  4a65              LDR      r2,|L1.976|
00023a  2100              MOVS     r1,#0
00023c  f2aff2af          ADR      r0,App_TaskStart + 1
000240  f7fff7ff          BL       OSTaskCreate
000244  9000              STR      r0,[sp,#0]
;;;110                              (void          * ) 0,
;;;111                              (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
;;;112                              (INT8U           ) APP_TASK_START_PRIO
;;;113                             );
;;;114    	printf("Creat App_TaskStart£¡\r\n");
000246  a063              ADR      r0,|L1.980|
000248  f7fff7ff          BL       __1printf
;;;115    #if (OS_TASK_NAME_SIZE >= 11)
;;;116        OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U *)"Start Task", &os_err);
00024c  466a              MOV      r2,sp
00024e  a167              ADR      r1,|L1.1004|
000250  2002              MOVS     r0,#2
000252  f7fff7ff          BL       OSTaskNameSet
;;;117    #endif
;;;118    
;;;119    	InfoSem = OSSemCreate(0); 
000256  2000              MOVS     r0,#0
000258  f7fff7ff          BL       OSSemCreate
00025c  4c66              LDR      r4,|L1.1016|
00025e  6020              STR      r0,[r4,#0]  ; InfoSem
;;;120    	Disp_Box = OSMboxCreate((void*)0);               
000260  2000              MOVS     r0,#0
000262  f7fff7ff          BL       OSMboxCreate
000266  6060              STR      r0,[r4,#4]  ; Disp_Box
;;;121    	OSTimeSet(0);
000268  2000              MOVS     r0,#0
00026a  f7fff7ff          BL       OSTimeSet
;;;122        OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II).  */
00026e  f7fff7ff          BL       OSStart
;;;123    
;;;124        return (0);
000272  2000              MOVS     r0,#0
;;;125    }
000274  bd38              POP      {r3-r5,pc}
;;;126    
                          ENDP

                  App_TaskCreateHook PROC
;;;412    
;;;413    }
000276  4770              BX       lr
;;;414    
                          ENDP

                  App_TaskDelHook PROC
;;;429        (void)ptcb;
;;;430    }
000278  4770              BX       lr
;;;431    
                          ENDP

                  App_TaskIdleHook PROC
;;;447    {
;;;448    }
00027a  4770              BX       lr
;;;449    #endif
                          ENDP

                  App_TaskStatHook PROC
;;;463    {
;;;464    }
00027c  4770              BX       lr
;;;465    
                          ENDP

                  App_TaskSwHook PROC
;;;486    
;;;487    }
00027e  4770              BX       lr
;;;488    #endif
                          ENDP

                  App_TCBInitHook PROC
;;;506        (void)ptcb;
;;;507    }
000280  4770              BX       lr
;;;508    #endif
                          ENDP

000282  0000              DCW      0x0000
                  |L1.644|
000284  0d0a2020          DCB      "\r\n\40\40"
000288  4d696372          DCB      "Micr"
00028c  69756d20          DCB      "ium "
000290  75432f4f          DCB      "uC/O"
000294  532d4949          DCB      "S-II"
000298  20200d0a          DCB      "  \r\n"
00029c  00000000          DCB      "\0\0\0\0"
                  |L1.672|
0002a0  20205354          DCB      "  ST"
0002a4  2053544d          DCB      " STM"
0002a8  33322028          DCB      "32 ("
0002ac  436f7274          DCB      "Cort"
0002b0  65782d4d          DCB      "ex-M"
0002b4  33290d0a          DCB      "3)\r\n"
0002b8  0d0a0000          DCB      "\r\n\0\0"
                  |L1.700|
0002bc  20207543          DCB      "  uC"
0002c0  2f4f532d          DCB      "/OS-"
0002c4  49493a20          DCB      "II: "
0002c8  2056256c          DCB      " V%l"
0002cc  642e256c          DCB      "d.%l"
0002d0  64256c64          DCB      "d%ld"
0002d4  0d0a0000          DCB      "\r\n\0\0"
                  |L1.728|
0002d8  20205469          DCB      "  Ti"
0002dc  636b5261          DCB      "ckRa"
0002e0  74653a20          DCB      "te: "
0002e4  256c6420          DCB      "%ld "
0002e8  200d0a00          DCB      " \r\n\0"
                  |L1.748|
0002ec  00000000          DCD      OSCPUUsage
                  |L1.752|
0002f0  20204350          DCB      "  CP"
0002f4  55205573          DCB      "U Us"
0002f8  6167653a          DCB      "age:"
0002fc  20256c64          DCB      " %ld"
000300  25202020          DCB      "%   "
000304  200d0a00          DCB      " \r\n\0"
                  |L1.776|
000308  000f4240          DCD      0x000f4240
                  |L1.780|
00030c  20204350          DCB      "  CP"
000310  55205370          DCB      "U Sp"
000314  6565643a          DCB      "eed:"
000318  256c6420          DCB      "%ld "
00031c  4d487a20          DCB      "MHz "
000320  200d0a00          DCB      " \r\n\0"
                  |L1.804|
000324  00000000          DCD      OSTime
                  |L1.808|
000328  20202354          DCB      "  #T"
00032c  69636b73          DCB      "icks"
000330  3a20256c          DCB      ": %l"
000334  6420200d          DCB      "d  \r"
000338  0a000000          DCB      "\n\0\0\0"
                  |L1.828|
00033c  00000000          DCD      OSCtxSwCtr
                  |L1.832|
000340  20202343          DCB      "  #C"
000344  74785377          DCB      "txSw"
000348  3a20256c          DCB      ": %l"
00034c  6420200d          DCB      "d  \r"
000350  0a0d0a00          DCB      "\n\r\n\0"
                  |L1.852|
000354  000005fc          DCD      ||.bss||+0x5fc
                  |L1.856|
000358  43726561          DCB      "Crea"
00035c  74204170          DCB      "t Ap"
000360  705f5461          DCB      "p_Ta"
000364  736b4c45          DCB      "skLE"
000368  44a3a10d          DCB      "D\243\241\r"
00036c  0a000000          DCB      "\n\0\0\0"
                  |L1.880|
000370  4c454400          DCB      "LED\0"
                  |L1.884|
000374  00000400          DCD      ||.bss||+0x400
                  |L1.888|
000378  43726561          DCB      "Crea"
00037c  74204170          DCB      "t Ap"
000380  705f5461          DCB      "p_Ta"
000384  736b5561          DCB      "skUa"
000388  7274a3a1          DCB      "rt\243\241"
00038c  0d0a0000          DCB      "\r\n\0\0"
                  |L1.912|
000390  55534152          DCB      "USAR"
000394  54000000          DCB      "T\0\0\0"
                  |L1.920|
000398  000007fc          DCD      ||.bss||+0x7fc
                  |L1.924|
00039c  43726561          DCB      "Crea"
0003a0  74204170          DCB      "t Ap"
0003a4  705f5461          DCB      "p_Ta"
0003a8  736b4b62          DCB      "skKb"
0003ac  64a3a10d          DCB      "d\243\241\r"
0003b0  0a000000          DCB      "\n\0\0\0"
                  |L1.948|
0003b4  4b657942          DCB      "KeyB"
0003b8  6f617264          DCB      "oard"
0003bc  00000000          DCB      "\0\0\0\0"
                  |L1.960|
0003c0  4f532049          DCB      "OS I"
0003c4  6e697420          DCB      "nit "
0003c8  4f4ba3a1          DCB      "OK\243\241"
0003cc  0d0a0000          DCB      "\r\n\0\0"
                  |L1.976|
0003d0  000001fc          DCD      ||.bss||+0x1fc
                  |L1.980|
0003d4  43726561          DCB      "Crea"
0003d8  74204170          DCB      "t Ap"
0003dc  705f5461          DCB      "p_Ta"
0003e0  736b5374          DCB      "skSt"
0003e4  617274a3          DCB      "art\243"
0003e8  a10d0a00          DCB      "\241\r\n\0"
                  |L1.1004|
0003ec  53746172          DCB      "Star"
0003f0  74205461          DCB      "t Ta"
0003f4  736b0000          DCB      "sk\0\0"
                  |L1.1016|
0003f8  00000000          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  InfoSem
000000  00000000          DCD      0x00000000
                  Disp_Box
000004  00000000          DCD      0x00000000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  App_TaskStartStk
                          %        512
                  App_TaskUartStk
                          %        512
                  App_TaskLEDStk
                          %        512
                  App_TaskKbdStk
                          %        512

                  __ARM_use_no_argv EQU 0
