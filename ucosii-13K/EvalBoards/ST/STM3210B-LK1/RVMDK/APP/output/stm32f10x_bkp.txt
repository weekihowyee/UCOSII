; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\stm32f10x_bkp.o --depend=.\output\stm32f10x_bkp.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\stm32f10x_bkp.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;74     void BKP_DeInit(void)
;;;75     {
000000  b510              PUSH     {r4,lr}
;;;76       RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fff7ff          BL       RCC_BackupResetCmd
;;;77       RCC_BackupResetCmd(DISABLE);
000008  e8bde8bd          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7fff7ff          B.W      RCC_BackupResetCmd
;;;78     }
;;;79     
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;94     
;;;95       *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
000012  491d              LDR      r1,|L1.136|
000014  6008              STR      r0,[r1,#0]
;;;96     }
000016  4770              BX       lr
;;;97     
                          ENDP

                  BKP_TamperPinCmd PROC
;;;110    
;;;111      *(vu32 *) CR_TPE_BB = (u32)NewState;
000018  491b              LDR      r1,|L1.136|
00001a  1f09              SUBS     r1,r1,#4
00001c  6008              STR      r0,[r1,#0]
;;;112    }
00001e  4770              BX       lr
;;;113    
                          ENDP

                  BKP_ITConfig PROC
;;;126    
;;;127      *(vu32 *) CSR_TPIE_BB = (u32)NewState;
000020  4919              LDR      r1,|L1.136|
000022  3184              ADDS     r1,r1,#0x84
000024  6008              STR      r0,[r1,#0]
;;;128    }
000026  4770              BX       lr
;;;129    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;151    
;;;152      tmpreg = BKP->RTCCR;
000028  4a18              LDR      r2,|L1.140|
00002a  8811              LDRH     r1,[r2,#0]
;;;153    
;;;154      /* Clear CCO, ASOE and ASOS bits */
;;;155      tmpreg &= RTCCR_Mask;
00002c  f421f421          BIC      r1,r1,#0x380
;;;156      
;;;157      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;158      tmpreg |= BKP_RTCOutputSource;
000030  4301              ORRS     r1,r1,r0
;;;159    
;;;160      /* Store the new value */
;;;161      BKP->RTCCR = tmpreg;
000032  8011              STRH     r1,[r2,#0]
;;;162    }
000034  4770              BX       lr
;;;163    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;178    
;;;179      tmpreg = BKP->RTCCR;
000036  4a15              LDR      r2,|L1.140|
000038  8811              LDRH     r1,[r2,#0]
;;;180    
;;;181      /* Clear CAL[6:0] bits */
;;;182      tmpreg &= RTCCR_CAL_Mask;
00003a  f021f021          BIC      r1,r1,#0x7f
;;;183    
;;;184      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;185      tmpreg |= CalibrationValue;
00003e  4301              ORRS     r1,r1,r0
;;;186    
;;;187      /* Store the new value */
;;;188      BKP->RTCCR = tmpreg;
000040  8011              STRH     r1,[r2,#0]
;;;189    }
000042  4770              BX       lr
;;;190    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;204    
;;;205      *(vu16 *) (BKP_BASE + BKP_DR) = Data;
000044  4a12              LDR      r2,|L1.144|
000046  4410              ADD      r0,r0,r2
000048  f8a0f8a0          STRH     r1,[r0,#0xc00]
;;;206    }
00004c  4770              BX       lr
;;;207    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;220    
;;;221      return (*(vu16 *) (BKP_BASE + BKP_DR));
00004e  4910              LDR      r1,|L1.144|
000050  4408              ADD      r0,r0,r1
000052  f8b0f8b0          LDRH     r0,[r0,#0xc00]
;;;222    }
000056  4770              BX       lr
;;;223    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;232    {
;;;233      return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
000058  480b              LDR      r0,|L1.136|
00005a  309c              ADDS     r0,r0,#0x9c
00005c  6800              LDR      r0,[r0,#0]
00005e  b2c0              UXTB     r0,r0
;;;234    }
000060  4770              BX       lr
;;;235    
                          ENDP

                  BKP_ClearFlag PROC
;;;245      /* Set CTE bit to clear Tamper Pin Event flag */
;;;246      BKP->CSR |= CSR_CTE_Set;
000062  480a              LDR      r0,|L1.140|
000064  3008              ADDS     r0,r0,#8
000066  8801              LDRH     r1,[r0,#0]
000068  f041f041          ORR      r1,r1,#1
00006c  8001              STRH     r1,[r0,#0]
;;;247    }
00006e  4770              BX       lr
;;;248    
                          ENDP

                  BKP_GetITStatus PROC
;;;257    {
;;;258      return (ITStatus)(*(vu32 *) CSR_TIF_BB);
000070  4805              LDR      r0,|L1.136|
000072  30a0              ADDS     r0,r0,#0xa0
000074  6800              LDR      r0,[r0,#0]
000076  b2c0              UXTB     r0,r0
;;;259    }
000078  4770              BX       lr
;;;260    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;270      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;271      BKP->CSR |= CSR_CTI_Set;
00007a  4804              LDR      r0,|L1.140|
00007c  3008              ADDS     r0,r0,#8
00007e  8801              LDRH     r1,[r0,#0]
000080  f041f041          ORR      r1,r1,#2
000084  8001              STRH     r1,[r0,#0]
;;;272    }
000086  4770              BX       lr
;;;273    
                          ENDP

                  |L1.136|
000088  420d8604          DCD      0x420d8604
                  |L1.140|
00008c  40006c2c          DCD      0x40006c2c
                  |L1.144|
000090  40006000          DCD      0x40006000
