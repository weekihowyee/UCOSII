; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\lib_str.o --depend=.\output\lib_str.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\lib_str.crf ..\..\..\..\..\uC-LIB\lib_str.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  Str_Len PROC
;;;144    
;;;145        len = 0;
000000  2100              MOVS     r1,#0
;;;146        while (( pstr != (CPU_CHAR *)0) &&                          /* Calc str len until NULL ptr (see Note #2a) ...       */
000002  e001              B        |L1.8|
                  |L1.4|
;;;147               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found      (see Note #2b).          */
;;;148            len++;
000004  1c49              ADDS     r1,r1,#1
;;;149            pstr++;
000006  1c40              ADDS     r0,r0,#1
                  |L1.8|
000008  b110              CBZ      r0,|L1.16|
00000a  7802              LDRB     r2,[r0,#0]            ;147
00000c  2a00              CMP      r2,#0                 ;147
00000e  d1f9              BNE      |L1.4|
                  |L1.16|
;;;150        }
;;;151    
;;;152        return (len);
000010  4608              MOV      r0,r1
;;;153    }
000012  4770              BX       lr
;;;154    
                          ENDP

                  Str_Copy PROC
;;;195                         CPU_CHAR  *psrc)
;;;196    {
000014  b510              PUSH     {r4,lr}
;;;197        CPU_CHAR  *pstr;
;;;198        CPU_CHAR  *pstr_next;
;;;199    
;;;200                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;201        if (pdest == (CPU_CHAR *)0) {
000016  b908              CBNZ     r0,|L1.28|
;;;202            return  ((CPU_CHAR *)0);
000018  2000              MOVS     r0,#0
;;;203        }
;;;204        if (psrc  == (CPU_CHAR *)0) {
;;;205            return  ((CPU_CHAR *)0);
;;;206        }
;;;207    
;;;208    
;;;209        pstr      = pdest;
;;;210        pstr_next = pstr;
;;;211        pstr_next++;
;;;212        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s) (see Note #2b) ...        */
;;;213               ( psrc      != (CPU_CHAR *)0) &&
;;;214               (*psrc      != (CPU_CHAR  )0)) {                     /* ... or NULL char found     (see Note #2c).           */
;;;215           *pstr = *psrc;
;;;216            pstr++;
;;;217            pstr_next++;
;;;218            psrc++;
;;;219        }
;;;220    
;;;221       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
;;;222    
;;;223    
;;;224        return (pdest);
;;;225    }
00001a  bd10              POP      {r4,pc}
                  |L1.28|
00001c  b909              CBNZ     r1,|L1.34|
00001e  2000              MOVS     r0,#0                 ;205
000020  bd10              POP      {r4,pc}
                  |L1.34|
000022  4602              MOV      r2,r0                 ;209
000024  4610              MOV      r0,r2                 ;210
000026  1c43              ADDS     r3,r0,#1              ;211
000028  e003              B        |L1.50|
                  |L1.42|
00002a  7014              STRB     r4,[r2,#0]            ;215
00002c  1c52              ADDS     r2,r2,#1              ;216
00002e  1c5b              ADDS     r3,r3,#1              ;217
000030  1c49              ADDS     r1,r1,#1              ;218
                  |L1.50|
000032  b11b              CBZ      r3,|L1.60|
000034  b111              CBZ      r1,|L1.60|
000036  780c              LDRB     r4,[r1,#0]            ;214
000038  2c00              CMP      r4,#0                 ;214
00003a  d1f6              BNE      |L1.42|
                  |L1.60|
00003c  2100              MOVS     r1,#0                 ;221
00003e  7011              STRB     r1,[r2,#0]            ;221
000040  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  Str_Copy_N PROC
;;;275                           CPU_SIZE_T   len_max)
;;;276    {
000042  b570              PUSH     {r4-r6,lr}
;;;277        CPU_CHAR    *pstr;
;;;278        CPU_CHAR    *pstr_next;
;;;279        CPU_SIZE_T   len_copy;
;;;280    
;;;281                                                                    /* Rtn NULL if str ptr(s) NULL      (see Note #2a).     */
;;;282        if (pdest == (CPU_CHAR *)0) {
000044  b908              CBNZ     r0,|L1.74|
;;;283            return  ((CPU_CHAR *)0);
000046  2000              MOVS     r0,#0
;;;284        }
;;;285        if (psrc  == (CPU_CHAR *)0) {
;;;286            return  ((CPU_CHAR *)0);
;;;287        }
;;;288    
;;;289        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if copy len equals zero (see Note #2d).     */
;;;290            return  ((CPU_CHAR *)0);
;;;291        }
;;;292    
;;;293    
;;;294        pstr      = pdest;
;;;295        pstr_next = pstr;
;;;296        pstr_next++;
;;;297        len_copy  = 0;
;;;298    
;;;299        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s)  (see Note #2b)  ...      */
;;;300               ( psrc      != (CPU_CHAR *)0) &&
;;;301               (*psrc      != (CPU_CHAR  )0) &&                     /* ... or NULL char found      (see Note #2c); ...      */
;;;302               ( len_copy  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars copied (see Note #2d).          */
;;;303           *pstr = *psrc;
;;;304            pstr++;
;;;305            pstr_next++;
;;;306            psrc++;
;;;307            len_copy++;
;;;308        }
;;;309    
;;;310       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
;;;311    
;;;312    
;;;313        return (pdest);
;;;314    }
000048  bd70              POP      {r4-r6,pc}
                  |L1.74|
00004a  b909              CBNZ     r1,|L1.80|
00004c  2000              MOVS     r0,#0                 ;286
00004e  bd70              POP      {r4-r6,pc}
                  |L1.80|
000050  b90a              CBNZ     r2,|L1.86|
000052  2000              MOVS     r0,#0                 ;290
000054  bd70              POP      {r4-r6,pc}
                  |L1.86|
000056  4603              MOV      r3,r0                 ;294
000058  4618              MOV      r0,r3                 ;295
00005a  1c45              ADDS     r5,r0,#1              ;296
00005c  2400              MOVS     r4,#0                 ;297
00005e  e004              B        |L1.106|
                  |L1.96|
000060  701e              STRB     r6,[r3,#0]            ;303
000062  1c5b              ADDS     r3,r3,#1              ;304
000064  1c6d              ADDS     r5,r5,#1              ;305
000066  1c49              ADDS     r1,r1,#1              ;306
000068  1c64              ADDS     r4,r4,#1              ;307
                  |L1.106|
00006a  b125              CBZ      r5,|L1.118|
00006c  b119              CBZ      r1,|L1.118|
00006e  780e              LDRB     r6,[r1,#0]            ;301
000070  b10e              CBZ      r6,|L1.118|
000072  4294              CMP      r4,r2                 ;302
000074  d3f4              BCC      |L1.96|
                  |L1.118|
000076  2100              MOVS     r1,#0                 ;310
000078  7019              STRB     r1,[r3,#0]            ;310
00007a  bd70              POP      {r4-r6,pc}
;;;315    
                          ENDP

                  Str_Cat PROC
;;;359                        CPU_CHAR  *pstr_cat)
;;;360    {
00007c  b510              PUSH     {r4,lr}
;;;361        CPU_CHAR  *pstr;
;;;362        CPU_CHAR  *pstr_next;
;;;363    
;;;364                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;365        if (pdest == (CPU_CHAR *)0) {
00007e  b908              CBNZ     r0,|L1.132|
;;;366            return  ((CPU_CHAR *)0);
000080  2000              MOVS     r0,#0
;;;367        }
;;;368        if (pstr_cat == (CPU_CHAR *)0) {
;;;369            return  ((CPU_CHAR *)0);
;;;370        }
;;;371    
;;;372    
;;;373        pstr = pdest;
;;;374        while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
;;;375               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
;;;376            pstr++;
;;;377        }
;;;378        if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
;;;379            return ((CPU_CHAR *)0);
;;;380        }
;;;381    
;;;382        pstr_next = pstr;
;;;383        pstr_next++;
;;;384        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s) (see Note #2c) ...         */
;;;385               ( pstr_cat  != (CPU_CHAR *)0) &&
;;;386               (*pstr_cat  != (CPU_CHAR  )0)) {                     /* ... or NULL char found    (see Note #2d).            */
;;;387           *pstr = *pstr_cat;
;;;388            pstr++;
;;;389            pstr_next++;
;;;390            pstr_cat++;
;;;391        }
;;;392    
;;;393       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
;;;394    
;;;395    
;;;396        return (pdest);
;;;397    }
000082  bd10              POP      {r4,pc}
                  |L1.132|
000084  b909              CBNZ     r1,|L1.138|
000086  2000              MOVS     r0,#0                 ;369
000088  bd10              POP      {r4,pc}
                  |L1.138|
00008a  4602              MOV      r2,r0                 ;373
00008c  e000              B        |L1.144|
                  |L1.142|
00008e  1c52              ADDS     r2,r2,#1              ;376
                  |L1.144|
000090  b112              CBZ      r2,|L1.152|
000092  7813              LDRB     r3,[r2,#0]            ;375
000094  2b00              CMP      r3,#0                 ;375
000096  d1fa              BNE      |L1.142|
                  |L1.152|
000098  b90a              CBNZ     r2,|L1.158|
00009a  2000              MOVS     r0,#0                 ;379
00009c  bd10              POP      {r4,pc}
                  |L1.158|
00009e  1c53              ADDS     r3,r2,#1              ;383
0000a0  e003              B        |L1.170|
                  |L1.162|
0000a2  7014              STRB     r4,[r2,#0]            ;387
0000a4  1c52              ADDS     r2,r2,#1              ;388
0000a6  1c5b              ADDS     r3,r3,#1              ;389
0000a8  1c49              ADDS     r1,r1,#1              ;390
                  |L1.170|
0000aa  b11b              CBZ      r3,|L1.180|
0000ac  b111              CBZ      r1,|L1.180|
0000ae  780c              LDRB     r4,[r1,#0]            ;386
0000b0  2c00              CMP      r4,#0                 ;386
0000b2  d1f6              BNE      |L1.162|
                  |L1.180|
0000b4  2100              MOVS     r1,#0                 ;393
0000b6  7011              STRB     r1,[r2,#0]            ;393
0000b8  bd10              POP      {r4,pc}
;;;398    
                          ENDP

                  Str_Cat_N PROC
;;;450                          CPU_SIZE_T   len_max)
;;;451    {
0000ba  b570              PUSH     {r4-r6,lr}
;;;452        CPU_CHAR    *pstr;
;;;453        CPU_CHAR    *pstr_next;
;;;454        CPU_SIZE_T   len_cat;
;;;455    
;;;456                                                                    /* Rtn NULL if str ptr(s) NULL     (see Note #2a).      */
;;;457        if (pdest == (CPU_CHAR *)0) {
0000bc  b908              CBNZ     r0,|L1.194|
;;;458            return  ((CPU_CHAR *)0);
0000be  2000              MOVS     r0,#0
;;;459        }
;;;460        if (pstr_cat == (CPU_CHAR *)0) {
;;;461            return  ((CPU_CHAR *)0);
;;;462        }
;;;463    
;;;464        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if cat len equals zero (see Note #2e).      */
;;;465            return  ((CPU_CHAR *)0);
;;;466        }
;;;467    
;;;468    
;;;469        pstr = pdest;
;;;470        while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
;;;471               (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
;;;472            pstr++;
;;;473        }
;;;474        if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
;;;475            return ((CPU_CHAR *)0);
;;;476        }
;;;477    
;;;478        pstr_next = pstr;
;;;479        pstr_next++;
;;;480        len_cat   = 0;
;;;481    
;;;482        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s)  (see Note #2c)  ...       */
;;;483               ( pstr_cat  != (CPU_CHAR *)0) &&
;;;484               (*pstr_cat  != (CPU_CHAR  )0) &&                     /* ... or NULL char found     (see Note #2d); ...       */
;;;485               ( len_cat   <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars cat'd (see Note #2d).           */
;;;486           *pstr = *pstr_cat;
;;;487            pstr++;
;;;488            pstr_next++;
;;;489            pstr_cat++;
;;;490            len_cat++;
;;;491        }
;;;492    
;;;493       *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
;;;494    
;;;495    
;;;496        return (pdest);
;;;497    }
0000c0  bd70              POP      {r4-r6,pc}
                  |L1.194|
0000c2  b909              CBNZ     r1,|L1.200|
0000c4  2000              MOVS     r0,#0                 ;461
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  b90a              CBNZ     r2,|L1.206|
0000ca  2000              MOVS     r0,#0                 ;465
0000cc  bd70              POP      {r4-r6,pc}
                  |L1.206|
0000ce  4603              MOV      r3,r0                 ;469
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  1c5b              ADDS     r3,r3,#1              ;472
                  |L1.212|
0000d4  b113              CBZ      r3,|L1.220|
0000d6  781c              LDRB     r4,[r3,#0]            ;471
0000d8  2c00              CMP      r4,#0                 ;471
0000da  d1fa              BNE      |L1.210|
                  |L1.220|
0000dc  b90b              CBNZ     r3,|L1.226|
0000de  2000              MOVS     r0,#0                 ;475
0000e0  bd70              POP      {r4-r6,pc}
                  |L1.226|
0000e2  1c5d              ADDS     r5,r3,#1              ;479
0000e4  2400              MOVS     r4,#0                 ;480
0000e6  e004              B        |L1.242|
                  |L1.232|
0000e8  701e              STRB     r6,[r3,#0]            ;486
0000ea  1c5b              ADDS     r3,r3,#1              ;487
0000ec  1c6d              ADDS     r5,r5,#1              ;488
0000ee  1c49              ADDS     r1,r1,#1              ;489
0000f0  1c64              ADDS     r4,r4,#1              ;490
                  |L1.242|
0000f2  b125              CBZ      r5,|L1.254|
0000f4  b119              CBZ      r1,|L1.254|
0000f6  780e              LDRB     r6,[r1,#0]            ;484
0000f8  b10e              CBZ      r6,|L1.254|
0000fa  4294              CMP      r4,r2                 ;485
0000fc  d3f4              BCC      |L1.232|
                  |L1.254|
0000fe  2100              MOVS     r1,#0                 ;493
000100  7019              STRB     r1,[r3,#0]            ;493
000102  bd70              POP      {r4-r6,pc}
;;;498    
                          ENDP

                  Str_Cmp PROC
;;;561                         CPU_CHAR  *p2_str)
;;;562    {
000104  b530              PUSH     {r4,r5,lr}
;;;563        CPU_CHAR    *p1_str_next;
;;;564        CPU_CHAR    *p2_str_next;
;;;565        CPU_INT16S   cmp_val;
;;;566    
;;;567    
;;;568        if (p1_str == (CPU_CHAR *)0) {
000106  b928              CBNZ     r0,|L1.276|
;;;569            if (p2_str == (CPU_CHAR *)0) {
000108  b909              CBNZ     r1,|L1.270|
;;;570                return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL, rtn 0 (see Note #2a).         */
00010a  2000              MOVS     r0,#0
;;;571            }
;;;572            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;573            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
;;;574        }
;;;575        if (p2_str == (CPU_CHAR *)0) {
;;;576            cmp_val = (CPU_INT16S)(*p1_str);
;;;577            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
;;;578        }
;;;579    
;;;580    
;;;581        p1_str_next = p1_str;
;;;582        p2_str_next = p2_str;
;;;583        p1_str_next++;
;;;584        p2_str_next++;
;;;585        while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
;;;586               (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
;;;587               ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h). */
;;;588               ( p2_str_next != (CPU_CHAR *)0)) {
;;;589            p1_str_next++;
;;;590            p2_str_next++;
;;;591            p1_str++;
;;;592            p2_str++;
;;;593        }
;;;594    
;;;595    
;;;596        if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
;;;597             cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
;;;598    
;;;599        } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
;;;600             cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
;;;601    
;;;602        } else {
;;;603            if (p1_str_next == (CPU_CHAR *)0) {
;;;604                if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
;;;605                    cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
;;;606                } else {                                                    /* If p1_str_next NULL, ...                     */
;;;607                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
;;;608                }
;;;609            } else {                                                        /* If p2_str_next NULL, ...                     */
;;;610                cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
;;;611            }
;;;612        }
;;;613    
;;;614    
;;;615        return (cmp_val);
;;;616    }
00010c  bd30              POP      {r4,r5,pc}
                  |L1.270|
00010e  7808              LDRB     r0,[r1,#0]            ;572
000110  4240              RSBS     r0,r0,#0              ;572
000112  bd30              POP      {r4,r5,pc}
                  |L1.276|
000114  b909              CBNZ     r1,|L1.282|
000116  7800              LDRB     r0,[r0,#0]            ;576
000118  bd30              POP      {r4,r5,pc}
                  |L1.282|
00011a  1c42              ADDS     r2,r0,#1              ;583
00011c  1c4b              ADDS     r3,r1,#1              ;584
00011e  e003              B        |L1.296|
                  |L1.288|
000120  1c52              ADDS     r2,r2,#1              ;589
000122  1c5b              ADDS     r3,r3,#1              ;590
000124  1c40              ADDS     r0,r0,#1              ;591
000126  1c49              ADDS     r1,r1,#1              ;592
                  |L1.296|
000128  7804              LDRB     r4,[r0,#0]            ;585
00012a  780d              LDRB     r5,[r1,#0]            ;585
00012c  42ac              CMP      r4,r5                 ;585
00012e  d103              BNE      |L1.312|
000130  b114              CBZ      r4,|L1.312|
000132  b10a              CBZ      r2,|L1.312|
000134  2b00              CMP      r3,#0                 ;588
000136  d1f3              BNE      |L1.288|
                  |L1.312|
000138  7805              LDRB     r5,[r0,#0]            ;596
00013a  7808              LDRB     r0,[r1,#0]            ;596
00013c  4285              CMP      r5,r0                 ;596
00013e  d001              BEQ      |L1.324|
000140  1a20              SUBS     r0,r4,r0              ;597
000142  bd30              POP      {r4,r5,pc}
                  |L1.324|
000144  b90c              CBNZ     r4,|L1.330|
000146  2000              MOVS     r0,#0                 ;600
000148  bd30              POP      {r4,r5,pc}
                  |L1.330|
00014a  b92a              CBNZ     r2,|L1.344|
00014c  b90b              CBNZ     r3,|L1.338|
00014e  2000              MOVS     r0,#0                 ;605
000150  bd30              POP      {r4,r5,pc}
                  |L1.338|
000152  7818              LDRB     r0,[r3,#0]            ;607
000154  4240              RSBS     r0,r0,#0              ;607
000156  bd30              POP      {r4,r5,pc}
                  |L1.344|
000158  7810              LDRB     r0,[r2,#0]            ;610
00015a  bd30              POP      {r4,r5,pc}
;;;617    
                          ENDP

                  Str_Cmp_N PROC
;;;689                           CPU_SIZE_T   len_max)
;;;690    {
00015c  b5f0              PUSH     {r4-r7,lr}
;;;691        CPU_CHAR    *p1_str_next;
;;;692        CPU_CHAR    *p2_str_next;
;;;693        CPU_INT16S   cmp_val;
;;;694        CPU_SIZE_T   cmp_len;
;;;695    
;;;696    
;;;697        if (len_max == 0) {                                         /* If cmp len equals zero, rtn 0      (see Note #2i).   */
00015e  b90a              CBNZ     r2,|L1.356|
;;;698            return ((CPU_INT16S)0);
000160  2000              MOVS     r0,#0
;;;699        }
;;;700    
;;;701        if (p1_str == (CPU_CHAR *)0) {
;;;702            if (p2_str == (CPU_CHAR *)0) {
;;;703                return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL,  rtn 0      (see Note #2a).   */
;;;704            }
;;;705            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;706            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
;;;707        }
;;;708        if (p2_str == (CPU_CHAR *)0) {
;;;709            cmp_val = (CPU_INT16S)(*p1_str);
;;;710            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
;;;711        }
;;;712    
;;;713    
;;;714        p1_str_next = p1_str;
;;;715        p2_str_next = p2_str;
;;;716        p1_str_next++;
;;;717        p2_str_next++;
;;;718        cmp_len     = 0;
;;;719        while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
;;;720               (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
;;;721               ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h); */
;;;722               ( p2_str_next != (CPU_CHAR *)0) &&
;;;723               ( cmp_len     <  (CPU_SIZE_T)len_max)) {             /* .. or len nbr chars cmp'd        (see Note #2j).     */
;;;724            p1_str_next++;
;;;725            p2_str_next++;
;;;726            p1_str++;
;;;727            p2_str++;
;;;728            cmp_len++;
;;;729        }
;;;730    
;;;731    
;;;732        if (cmp_len == len_max) {                                           /* If strs     identical for len nbr of chars,  */
;;;733            return ((CPU_INT16S)0);                                         /* ... rtn 0 (see Note #2j).                    */
;;;734        }
;;;735    
;;;736        if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
;;;737             cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
;;;738    
;;;739        } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
;;;740             cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
;;;741    
;;;742        } else {
;;;743            if (p1_str_next == (CPU_CHAR *)0) {
;;;744                if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
;;;745                    cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
;;;746                } else {                                                    /* If p1_str_next NULL, ...                     */
;;;747                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
;;;748                }
;;;749            } else {                                                        /* If p2_str_next NULL, ...                     */
;;;750                cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
;;;751            }
;;;752        }
;;;753    
;;;754    
;;;755        return (cmp_val);
;;;756    }
000162  bdf0              POP      {r4-r7,pc}
                  |L1.356|
000164  b928              CBNZ     r0,|L1.370|
000166  b909              CBNZ     r1,|L1.364|
000168  2000              MOVS     r0,#0                 ;703
00016a  bdf0              POP      {r4-r7,pc}
                  |L1.364|
00016c  7808              LDRB     r0,[r1,#0]            ;705
00016e  4240              RSBS     r0,r0,#0              ;705
000170  bdf0              POP      {r4-r7,pc}
                  |L1.370|
000172  b909              CBNZ     r1,|L1.376|
000174  7800              LDRB     r0,[r0,#0]            ;709
000176  bdf0              POP      {r4-r7,pc}
                  |L1.376|
000178  1c43              ADDS     r3,r0,#1              ;716
00017a  1c4c              ADDS     r4,r1,#1              ;717
00017c  2500              MOVS     r5,#0                 ;718
00017e  e004              B        |L1.394|
                  |L1.384|
000180  1c5b              ADDS     r3,r3,#1              ;724
000182  1c64              ADDS     r4,r4,#1              ;725
000184  1c40              ADDS     r0,r0,#1              ;726
000186  1c49              ADDS     r1,r1,#1              ;727
000188  1c6d              ADDS     r5,r5,#1              ;728
                  |L1.394|
00018a  7806              LDRB     r6,[r0,#0]            ;719
00018c  780f              LDRB     r7,[r1,#0]            ;719
00018e  42be              CMP      r6,r7                 ;719
000190  d104              BNE      |L1.412|
000192  b11e              CBZ      r6,|L1.412|
000194  b113              CBZ      r3,|L1.412|
000196  b10c              CBZ      r4,|L1.412|
000198  4295              CMP      r5,r2                 ;723
00019a  d3f1              BCC      |L1.384|
                  |L1.412|
00019c  4295              CMP      r5,r2                 ;732
00019e  d101              BNE      |L1.420|
0001a0  2000              MOVS     r0,#0                 ;733
0001a2  bdf0              POP      {r4-r7,pc}
                  |L1.420|
0001a4  7802              LDRB     r2,[r0,#0]            ;736
0001a6  7808              LDRB     r0,[r1,#0]            ;736
0001a8  4282              CMP      r2,r0                 ;736
0001aa  d001              BEQ      |L1.432|
0001ac  1a30              SUBS     r0,r6,r0              ;737
0001ae  bdf0              POP      {r4-r7,pc}
                  |L1.432|
0001b0  b90e              CBNZ     r6,|L1.438|
0001b2  2000              MOVS     r0,#0                 ;740
0001b4  bdf0              POP      {r4-r7,pc}
                  |L1.438|
0001b6  b92b              CBNZ     r3,|L1.452|
0001b8  b90c              CBNZ     r4,|L1.446|
0001ba  2000              MOVS     r0,#0                 ;745
0001bc  bdf0              POP      {r4-r7,pc}
                  |L1.446|
0001be  7820              LDRB     r0,[r4,#0]            ;747
0001c0  4240              RSBS     r0,r0,#0              ;747
0001c2  bdf0              POP      {r4-r7,pc}
                  |L1.452|
0001c4  7818              LDRB     r0,[r3,#0]            ;750
0001c6  bdf0              POP      {r4-r7,pc}
;;;757    
                          ENDP

                  Str_Char PROC
;;;801    
;;;802        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
0001c8  b908              CBNZ     r0,|L1.462|
;;;803            return ((CPU_CHAR *)0);
0001ca  2000              MOVS     r0,#0
                  |L1.460|
;;;804        }
;;;805    
;;;806    
;;;807        pstr_next = pstr;
;;;808        pstr_next++;
;;;809        while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
;;;810               (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
;;;811               (*pstr      != (CPU_CHAR  )srch_char)) {             /* ... or srch char found     (see Note #2d).           */
;;;812            pstr++;
;;;813            pstr_next++;
;;;814        }
;;;815    
;;;816    
;;;817        if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
;;;818            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;819        }
;;;820    
;;;821        return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
;;;822    }
0001cc  4770              BX       lr
                  |L1.462|
0001ce  1c42              ADDS     r2,r0,#1              ;808
0001d0  e001              B        |L1.470|
                  |L1.466|
0001d2  1c40              ADDS     r0,r0,#1              ;812
0001d4  1c52              ADDS     r2,r2,#1              ;813
                  |L1.470|
0001d6  b11a              CBZ      r2,|L1.480|
0001d8  7803              LDRB     r3,[r0,#0]            ;810
0001da  b10b              CBZ      r3,|L1.480|
0001dc  428b              CMP      r3,r1                 ;811
0001de  d1f8              BNE      |L1.466|
                  |L1.480|
0001e0  7802              LDRB     r2,[r0,#0]            ;817
0001e2  428a              CMP      r2,r1                 ;817
0001e4  d0f2              BEQ      |L1.460|
0001e6  2000              MOVS     r0,#0                 ;818
0001e8  4770              BX       lr
;;;823    
                          ENDP

                  Str_Char_N PROC
;;;874                           CPU_CHAR     srch_char)
;;;875    {
0001ea  b530              PUSH     {r4,r5,lr}
;;;876        CPU_CHAR    *pstr_next;
;;;877        CPU_SIZE_T   len_srch;
;;;878    
;;;879    
;;;880        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL    (see Note #2a).     */
0001ec  b908              CBNZ     r0,|L1.498|
;;;881            return ((CPU_CHAR *)0);
0001ee  2000              MOVS     r0,#0
;;;882        }
;;;883    
;;;884        if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if srch len equals zero (see Note #2e).     */
;;;885            return ((CPU_CHAR *)0);
;;;886        }
;;;887    
;;;888    
;;;889        pstr_next = pstr;
;;;890        pstr_next++;
;;;891        len_srch  = 0;
;;;892        while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
;;;893               (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
;;;894               (*pstr      != (CPU_CHAR  )srch_char) &&             /* ... or srch char found      (see Note #2d); ...      */
;;;895               ( len_srch  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars srch'd (see Note #2e).          */
;;;896            pstr++;
;;;897            pstr_next++;
;;;898            len_srch++;
;;;899        }
;;;900    
;;;901    
;;;902        if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
;;;903            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;904        }
;;;905    
;;;906        return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
;;;907    }
0001f0  bd30              POP      {r4,r5,pc}
                  |L1.498|
0001f2  b909              CBNZ     r1,|L1.504|
0001f4  2000              MOVS     r0,#0                 ;885
                  |L1.502|
0001f6  bd30              POP      {r4,r5,pc}
                  |L1.504|
0001f8  1c44              ADDS     r4,r0,#1              ;890
0001fa  2300              MOVS     r3,#0                 ;891
0001fc  e002              B        |L1.516|
                  |L1.510|
0001fe  1c40              ADDS     r0,r0,#1              ;896
000200  1c64              ADDS     r4,r4,#1              ;897
000202  1c5b              ADDS     r3,r3,#1              ;898
                  |L1.516|
000204  b12c              CBZ      r4,|L1.530|
000206  7805              LDRB     r5,[r0,#0]            ;893
000208  b11d              CBZ      r5,|L1.530|
00020a  4295              CMP      r5,r2                 ;894
00020c  d001              BEQ      |L1.530|
00020e  428b              CMP      r3,r1                 ;895
000210  d3f5              BCC      |L1.510|
                  |L1.530|
000212  7801              LDRB     r1,[r0,#0]            ;902
000214  4291              CMP      r1,r2                 ;902
000216  d0ee              BEQ      |L1.502|
000218  2000              MOVS     r0,#0                 ;903
00021a  bd30              POP      {r4,r5,pc}
;;;908    
                          ENDP

                  Str_Char_Last PROC
;;;949                              CPU_CHAR   srch_char)
;;;950    {
00021c  b510              PUSH     {r4,lr}
00021e  4603              MOV      r3,r0
000220  460c              MOV      r4,r1
;;;951        CPU_CHAR    *pstr_next;
;;;952        CPU_SIZE_T   str_len;
;;;953    
;;;954    
;;;955        if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
000222  b90b              CBNZ     r3,|L1.552|
;;;956            return ((CPU_CHAR *)0);
000224  2000              MOVS     r0,#0
                  |L1.550|
;;;957        }
;;;958    
;;;959    
;;;960        pstr_next  = pstr;
;;;961        str_len    = Str_Len(pstr);
;;;962        pstr_next += str_len;
;;;963        while (( pstr_next != pstr) &&                              /* Srch str from end until beg (see Note #2c) ...       */
;;;964               (*pstr_next != srch_char)) {                         /* ... until srch char found   (see Note #2d).          */
;;;965            pstr_next--;
;;;966        }
;;;967    
;;;968    
;;;969        if (*pstr_next != srch_char) {                              /* If srch char NOT found, str points to NULL; ...      */
;;;970            return ((CPU_CHAR *)0);                                 /* ... rtn NULL (see Notes #2b & #2c).                  */
;;;971        }
;;;972    
;;;973        return (pstr_next);                                         /* Else rtn ptr to found srch char (see Note #2d).      */
;;;974    }
000226  bd10              POP      {r4,pc}
                  |L1.552|
000228  4618              MOV      r0,r3                 ;961
00022a  f7fff7ff          BL       Str_Len
00022e  4418              ADD      r0,r0,r3              ;962
000230  e000              B        |L1.564|
                  |L1.562|
000232  1e40              SUBS     r0,r0,#1              ;965
                  |L1.564|
000234  4298              CMP      r0,r3                 ;963
000236  d002              BEQ      |L1.574|
000238  7801              LDRB     r1,[r0,#0]            ;964
00023a  42a1              CMP      r1,r4                 ;964
00023c  d1f9              BNE      |L1.562|
                  |L1.574|
00023e  7801              LDRB     r1,[r0,#0]            ;969
000240  42a1              CMP      r1,r4                 ;969
000242  d0f0              BEQ      |L1.550|
000244  2000              MOVS     r0,#0                 ;970
000246  bd10              POP      {r4,pc}
;;;975    
                          ENDP

                  Str_Str PROC
;;;1019                       CPU_CHAR  *psrch_str)
;;;1020   {
000248  e92de92d          PUSH     {r4-r10,lr}
00024c  4606              MOV      r6,r0
00024e  468a              MOV      r10,r1
;;;1021       CPU_SIZE_T    str_len;
;;;1022       CPU_SIZE_T    srch_str_len;
;;;1023       CPU_SIZE_T    srch_len;
;;;1024       CPU_SIZE_T    srch_ix;
;;;1025       CPU_BOOLEAN   srch_done;
;;;1026       CPU_INT16S    srch_cmp1;
;;;1027       CPU_CHAR     *pstr_srch_ix;
;;;1028   
;;;1029                                                                   /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
;;;1030       if (pstr == (CPU_CHAR *)0) {
000250  b916              CBNZ     r6,|L1.600|
;;;1031           return ((CPU_CHAR *)0);
000252  2000              MOVS     r0,#0
                  |L1.596|
;;;1032       }
;;;1033       if (psrch_str == (CPU_CHAR *)0) {
;;;1034           return ((CPU_CHAR *)0);
;;;1035       }
;;;1036   
;;;1037   
;;;1038       str_len      = Str_Len(pstr);
;;;1039       srch_str_len = Str_Len(psrch_str);
;;;1040       if (srch_str_len > str_len) {                               /* If srch str len > str len, rtn NULL  (see Note #2b). */
;;;1041           return ((CPU_CHAR *)0);
;;;1042       }
;;;1043       if (srch_str_len == 0) {                                    /* If srch str len = 0, srch str equal NULL str; ...    */
;;;1044           pstr_srch_ix = (CPU_CHAR *)(pstr + str_len);            /* ... rtn ptr to NULL str found in str (see Note #2c). */
;;;1045           return (pstr_srch_ix);
;;;1046       }
;;;1047   
;;;1048       srch_len  = str_len - srch_str_len;                         /* Determine srch len (see Note #2d1).                  */
;;;1049       srch_ix   = 0;
;;;1050       srch_done = DEF_NO;
;;;1051       while ((srch_done == DEF_NO) && (srch_ix <= srch_len)) {
;;;1052           pstr_srch_ix = (CPU_CHAR *)(pstr + srch_ix);
;;;1053           srch_cmp1     =  Str_Cmp_N(pstr_srch_ix, psrch_str, srch_str_len);
;;;1054           srch_done    = (srch_cmp1 == 0) ? DEF_YES : DEF_NO;
;;;1055           srch_ix++;
;;;1056       }
;;;1057   
;;;1058   
;;;1059       if (srch_cmp1 != 0) {                                        /* If srch str NOT found, rtn NULL  (see Note #2d).     */
;;;1060           return ((CPU_CHAR *)0);
;;;1061       }
;;;1062   
;;;1063       return (pstr_srch_ix);                                      /* Rtn ptr to srch str found in str (see Note #2e).     */
;;;1064   }
000254  e8bde8bd          POP      {r4-r10,pc}
                  |L1.600|
000258  f1baf1ba          CMP      r10,#0                ;1033
00025c  d101              BNE      |L1.610|
00025e  2000              MOVS     r0,#0                 ;1034
000260  e7f8              B        |L1.596|
                  |L1.610|
000262  4630              MOV      r0,r6                 ;1038
000264  f7fff7ff          BL       Str_Len
000268  4604              MOV      r4,r0                 ;1038
00026a  4650              MOV      r0,r10                ;1039
00026c  f7fff7ff          BL       Str_Len
000270  4605              MOV      r5,r0                 ;1039
000272  42a5              CMP      r5,r4                 ;1040
000274  d901              BLS      |L1.634|
000276  2000              MOVS     r0,#0                 ;1041
000278  e7ec              B        |L1.596|
                  |L1.634|
00027a  b90d              CBNZ     r5,|L1.640|
00027c  1930              ADDS     r0,r6,r4              ;1044
00027e  e7e9              B        |L1.596|
                  |L1.640|
000280  1b67              SUBS     r7,r4,r5              ;1048
000282  2400              MOVS     r4,#0                 ;1049
000284  2100              MOVS     r1,#0                 ;1050
000286  f04ff04f          MOV      r9,#1                 ;1051
00028a  e00b              B        |L1.676|
                  |L1.652|
00028c  eb06eb06          ADD      r8,r6,r4              ;1052
000290  462a              MOV      r2,r5                 ;1053
000292  4651              MOV      r1,r10                ;1053
000294  4640              MOV      r0,r8                 ;1053
000296  f7fff7ff          BL       Str_Cmp_N
00029a  4603              MOV      r3,r0                 ;1053
00029c  4649              MOV      r1,r9                 ;1054
00029e  b103              CBZ      r3,|L1.674|
0002a0  2100              MOVS     r1,#0                 ;1054
                  |L1.674|
0002a2  1c64              ADDS     r4,r4,#1              ;1055
                  |L1.676|
0002a4  b909              CBNZ     r1,|L1.682|
0002a6  42bc              CMP      r4,r7                 ;1051
0002a8  d9f0              BLS      |L1.652|
                  |L1.682|
0002aa  b10b              CBZ      r3,|L1.688|
0002ac  2000              MOVS     r0,#0                 ;1060
0002ae  e7d1              B        |L1.596|
                  |L1.688|
0002b0  4640              MOV      r0,r8                 ;1063
0002b2  e7cf              B        |L1.596|
;;;1065   
                          ENDP

