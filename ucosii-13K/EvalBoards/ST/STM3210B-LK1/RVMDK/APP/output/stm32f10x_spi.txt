; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\stm32f10x_spi.o --depend=.\output\stm32f10x_spi.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\stm32f10x_spi.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;64     void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
;;;65     {
000000  b510              PUSH     {r4,lr}
;;;66       /* Check the parameters */
;;;67       assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;68       
;;;69       switch (*(u32*)&SPIx)
000002  49b0              LDR      r1,|L1.708|
000004  1840              ADDS     r0,r0,r1
000006  d010              BEQ      |L1.42|
000008  f5b0f5b0          CMP      r0,#0x400
00000c  d018              BEQ      |L1.64|
00000e  f5b0f5b0          CMP      r0,#0xf800
000012  d120              BNE      |L1.86|
;;;70       {
;;;71         case SPI1_BASE:
;;;72           /* Enable SPI1 reset state */
;;;73           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000014  2101              MOVS     r1,#1
000016  030c              LSLS     r4,r1,#12
000018  4620              MOV      r0,r4
00001a  f7fff7ff          BL       RCC_APB2PeriphResetCmd
;;;74           /* Release SPI1 from reset state */
;;;75           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
00001e  4620              MOV      r0,r4
000020  e8bde8bd          POP      {r4,lr}
000024  2100              MOVS     r1,#0
000026  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.42|
;;;76           break;
;;;77     
;;;78         case SPI2_BASE:
;;;79           /* Enable SPI2 reset state */
;;;80           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  038c              LSLS     r4,r1,#14
00002e  4620              MOV      r0,r4
000030  f7fff7ff          BL       RCC_APB1PeriphResetCmd
;;;81           /* Release SPI2 from reset state */
;;;82           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000034  4620              MOV      r0,r4
000036  e8bde8bd          POP      {r4,lr}
00003a  2100              MOVS     r1,#0
00003c  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.64|
;;;83           break;
;;;84     
;;;85         case SPI3_BASE:
;;;86           /* Enable SPI3 reset state */
;;;87           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
000040  2101              MOVS     r1,#1
000042  03cc              LSLS     r4,r1,#15
000044  4620              MOV      r0,r4
000046  f7fff7ff          BL       RCC_APB1PeriphResetCmd
;;;88           /* Release SPI3 from reset state */
;;;89           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
00004a  4620              MOV      r0,r4
00004c  e8bde8bd          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f7fff7ff          B.W      RCC_APB1PeriphResetCmd
                  |L1.86|
;;;90           break;
;;;91     
;;;92         default:
;;;93           break;
;;;94       }
;;;95     }
000056  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  SPI_Init PROC
;;;108    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
;;;109    {
000058  b530              PUSH     {r4,r5,lr}
;;;110      u16 tmpreg = 0;
;;;111      
;;;112      /* check the parameters */
;;;113      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;114      
;;;115      /* Check the SPI parameters */
;;;116      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;117      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;118      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;119      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;120      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;121      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;122      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;123      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;124      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;125    
;;;126    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;127      /* Get the SPIx CR1 value */
;;;128      tmpreg = SPIx->CR1;
00005a  8802              LDRH     r2,[r0,#0]
;;;129      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;130      tmpreg &= CR1_CLEAR_Mask;
00005c  f402f402          AND      r2,r2,#0x3040
;;;131      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;132         master/salve mode, CPOL and CPHA */
;;;133      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;134      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;135      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;136      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;137      /* Set CPOL bit according to SPI_CPOL value */
;;;138      /* Set CPHA bit according to SPI_CPHA value */
;;;139      tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
000060  880b              LDRH     r3,[r1,#0]
000062  884c              LDRH     r4,[r1,#2]
000064  88cd              LDRH     r5,[r1,#6]
000066  4323              ORRS     r3,r3,r4
000068  888c              LDRH     r4,[r1,#4]
00006a  432c              ORRS     r4,r4,r5
00006c  4323              ORRS     r3,r3,r4
00006e  890c              LDRH     r4,[r1,#8]
000070  4323              ORRS     r3,r3,r4
000072  894c              LDRH     r4,[r1,#0xa]
000074  4323              ORRS     r3,r3,r4
000076  898c              LDRH     r4,[r1,#0xc]
000078  4323              ORRS     r3,r3,r4
00007a  89cc              LDRH     r4,[r1,#0xe]
00007c  4323              ORRS     r3,r3,r4
00007e  4313              ORRS     r3,r3,r2
;;;140                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;141                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;142                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;143      /* Write to SPIx CR1 */
;;;144      SPIx->CR1 = tmpreg;
000080  8003              STRH     r3,[r0,#0]
;;;145      
;;;146      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;147      SPIx->I2SCFGR &= SPI_Mode_Select;		
000082  8b82              LDRH     r2,[r0,#0x1c]
000084  f422f422          BIC      r2,r2,#0x800
000088  8382              STRH     r2,[r0,#0x1c]
;;;148    
;;;149    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;150      /* Write to SPIx CRCPOLY */
;;;151      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
00008a  8a09              LDRH     r1,[r1,#0x10]
00008c  8201              STRH     r1,[r0,#0x10]
;;;152    }
00008e  bd30              POP      {r4,r5,pc}
;;;153    
                          ENDP

                  I2S_Init PROC
;;;166    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
;;;167    {
000090  b5f0              PUSH     {r4-r7,lr}
000092  b085              SUB      sp,sp,#0x14
000094  4605              MOV      r5,r0
000096  460c              MOV      r4,r1
;;;168      u16 tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000098  2002              MOVS     r0,#2
00009a  2100              MOVS     r1,#0
00009c  2601              MOVS     r6,#1
;;;169      u32 tmp = 0;
;;;170      RCC_ClocksTypeDef RCC_Clocks;
;;;171       
;;;172      /* Check the I2S parameters */
;;;173      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;174      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;175      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;176      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;177      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;178      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;179      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;180    
;;;181    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;182    
;;;183      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;184      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00009e  8baa              LDRH     r2,[r5,#0x1c]
0000a0  f24ff24f          MOV      r3,#0xf040
0000a4  401a              ANDS     r2,r2,r3
0000a6  83aa              STRH     r2,[r5,#0x1c]
;;;185      SPIx->I2SPR = 0x0002;
0000a8  2202              MOVS     r2,#2
0000aa  842a              STRH     r2,[r5,#0x20]
;;;186      
;;;187      /* Get the I2SCFGR register value */
;;;188      tmpreg = SPIx->I2SCFGR;
0000ac  8baf              LDRH     r7,[r5,#0x1c]
;;;189      
;;;190      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;191      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
0000ae  8922              LDRH     r2,[r4,#8]
0000b0  2a02              CMP      r2,#2
0000b2  d024              BEQ      |L1.254|
;;;192      {
;;;193        i2sodd = (u16)0;
;;;194        i2sdiv = (u16)2;   
;;;195      }
;;;196      /* If the requested audio frequency is not the default, compute the prescaler */
;;;197      else
;;;198      {
;;;199        /* Check the frame length (For the Prescaler computing) */
;;;200        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
0000b4  88a0              LDRH     r0,[r4,#4]
0000b6  b100              CBZ      r0,|L1.186|
;;;201        {
;;;202          /* Packet length is 16 bits */
;;;203          packetlength = 1;
;;;204        }
;;;205        else
;;;206        {
;;;207          /* Packet length is 32 bits */
;;;208          packetlength = 2;
0000b8  2602              MOVS     r6,#2
                  |L1.186|
;;;209        }
;;;210        /* Get System Clock frequency */
;;;211        RCC_GetClocksFreq(&RCC_Clocks);
0000ba  4668              MOV      r0,sp
0000bc  f7fff7ff          BL       RCC_GetClocksFreq
;;;212        
;;;213        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;214        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
0000c0  88e0              LDRH     r0,[r4,#6]
0000c2  210a              MOVS     r1,#0xa
0000c4  f5b0f5b0          CMP      r0,#0x200
0000c8  d108              BNE      |L1.220|
;;;215        {
;;;216          /* MCLK output is enabled */
;;;217          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
0000ca  9800              LDR      r0,[sp,#0]
0000cc  8922              LDRH     r2,[r4,#8]
0000ce  4348              MULS     r0,r1,r0
0000d0  0212              LSLS     r2,r2,#8
0000d2  fbb0fbb0          UDIV     r0,r0,r2
0000d6  1d40              ADDS     r0,r0,#5
0000d8  b280              UXTH     r0,r0
0000da  e008              B        |L1.238|
                  |L1.220|
;;;218        }
;;;219        else
;;;220        {
;;;221          /* MCLK output is disabled */
;;;222          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
0000dc  8920              LDRH     r0,[r4,#8]
0000de  0172              LSLS     r2,r6,#5
0000e0  4342              MULS     r2,r0,r2
0000e2  9800              LDR      r0,[sp,#0]
0000e4  4348              MULS     r0,r1,r0
0000e6  fbb0fbb0          UDIV     r0,r0,r2
0000ea  1d40              ADDS     r0,r0,#5
0000ec  b280              UXTH     r0,r0
                  |L1.238|
;;;223        }
;;;224        
;;;225        /* Remove the flaoting point */
;;;226        tmp = tmp/10;  
0000ee  fbb0fbb0          UDIV     r0,r0,r1
;;;227          
;;;228        /* Check the parity of the divider */
;;;229        i2sodd = (u16)(tmp & (u16)0x0001);
0000f2  f000f000          AND      r1,r0,#1
;;;230       
;;;231        /* Compute the i2sdiv prescaler */
;;;232        i2sdiv = (u16)((tmp - i2sodd) / 2);
0000f6  1a40              SUBS     r0,r0,r1
0000f8  f3c0f3c0          UBFX     r0,r0,#1,#16
;;;233       
;;;234        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;235        i2sodd = (u16) (i2sodd << 8);
0000fc  0209              LSLS     r1,r1,#8
                  |L1.254|
;;;236      }
;;;237      
;;;238      /* Test if the divider is 1 or 0 */
;;;239      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
0000fe  1e82              SUBS     r2,r0,#2
000100  2afe              CMP      r2,#0xfe
000102  d301              BCC      |L1.264|
;;;240      {
;;;241        /* Set the default values */
;;;242        i2sdiv = 2;
000104  2002              MOVS     r0,#2
;;;243        i2sodd = 0;
000106  2100              MOVS     r1,#0
                  |L1.264|
;;;244      }
;;;245    
;;;246      /* Write to SPIx I2SPR register the computed value */
;;;247      SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
000108  88e2              LDRH     r2,[r4,#6]
00010a  4308              ORRS     r0,r0,r1
00010c  4302              ORRS     r2,r2,r0
00010e  842a              STRH     r2,[r5,#0x20]
;;;248     
;;;249      /* Configure the I2S with the SPI_InitStruct values */
;;;250      tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
000110  8821              LDRH     r1,[r4,#0]
000112  8860              LDRH     r0,[r4,#2]
000114  8962              LDRH     r2,[r4,#0xa]
000116  4301              ORRS     r1,r1,r0
000118  88a0              LDRH     r0,[r4,#4]
00011a  4310              ORRS     r0,r0,r2
00011c  4301              ORRS     r1,r1,r0
00011e  4339              ORRS     r1,r1,r7
000120  f441f441          ORR      r0,r1,#0x800
;;;251                      I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
;;;252                      I2S_InitStruct->I2S_CPOL);
;;;253     
;;;254      /* Write to SPIx I2SCFGR */  
;;;255      SPIx->I2SCFGR = tmpreg;                                    
000124  83a8              STRH     r0,[r5,#0x1c]
;;;256    }
000126  b005              ADD      sp,sp,#0x14
000128  bdf0              POP      {r4-r7,pc}
;;;257    
                          ENDP

                  SPI_StructInit PROC
;;;269      /* Initialize the SPI_Direction member */
;;;270      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00012a  2100              MOVS     r1,#0
00012c  8001              STRH     r1,[r0,#0]
;;;271    
;;;272      /* initialize the SPI_Mode member */
;;;273      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
00012e  8041              STRH     r1,[r0,#2]
;;;274    
;;;275      /* initialize the SPI_DataSize member */
;;;276      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000130  8081              STRH     r1,[r0,#4]
;;;277    
;;;278      /* Initialize the SPI_CPOL member */
;;;279      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000132  80c1              STRH     r1,[r0,#6]
;;;280    
;;;281      /* Initialize the SPI_CPHA member */
;;;282      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
000134  8101              STRH     r1,[r0,#8]
;;;283    
;;;284      /* Initialize the SPI_NSS member */
;;;285      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
000136  8141              STRH     r1,[r0,#0xa]
;;;286    
;;;287      /* Initialize the SPI_BaudRatePrescaler member */
;;;288      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
000138  8181              STRH     r1,[r0,#0xc]
;;;289    
;;;290      /* Initialize the SPI_FirstBit member */
;;;291      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
00013a  81c1              STRH     r1,[r0,#0xe]
;;;292    
;;;293      /* Initialize the SPI_CRCPolynomial member */
;;;294      SPI_InitStruct->SPI_CRCPolynomial = 7;
00013c  2107              MOVS     r1,#7
00013e  8201              STRH     r1,[r0,#0x10]
;;;295    }
000140  4770              BX       lr
;;;296    
                          ENDP

                  I2S_StructInit PROC
;;;308      /* Initialize the I2S_Mode member */
;;;309      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000142  2100              MOVS     r1,#0
000144  8001              STRH     r1,[r0,#0]
;;;310      
;;;311      /* Initialize the I2S_Standard member */
;;;312      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000146  8041              STRH     r1,[r0,#2]
;;;313      
;;;314      /* Initialize the I2S_DataFormat member */
;;;315      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000148  8081              STRH     r1,[r0,#4]
;;;316      
;;;317      /* Initialize the I2S_MCLKOutput member */
;;;318      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
00014a  80c1              STRH     r1,[r0,#6]
;;;319      
;;;320      /* Initialize the I2S_AudioFreq member */
;;;321      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00014c  2202              MOVS     r2,#2
00014e  8102              STRH     r2,[r0,#8]
;;;322      
;;;323      /* Initialize the I2S_CPOL member */
;;;324      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
000150  8141              STRH     r1,[r0,#0xa]
;;;325    }
000152  4770              BX       lr
;;;326    
                          ENDP

                  SPI_Cmd PROC
;;;341    
;;;342      if (NewState != DISABLE)
000154  b121              CBZ      r1,|L1.352|
;;;343      {
;;;344        /* Enable the selected SPI peripheral */
;;;345        SPIx->CR1 |= CR1_SPE_Set;
000156  8801              LDRH     r1,[r0,#0]
000158  f041f041          ORR      r1,r1,#0x40
00015c  8001              STRH     r1,[r0,#0]
;;;346      }
;;;347      else
;;;348      {
;;;349        /* Disable the selected SPI peripheral */
;;;350        SPIx->CR1 &= CR1_SPE_Reset;
;;;351      }
;;;352    }
00015e  4770              BX       lr
                  |L1.352|
000160  8801              LDRH     r1,[r0,#0]            ;350
000162  f021f021          BIC      r1,r1,#0x40           ;350
000166  8001              STRH     r1,[r0,#0]            ;350
000168  4770              BX       lr
;;;353    
                          ENDP

                  I2S_Cmd PROC
;;;368    
;;;369      if (NewState != DISABLE)
00016a  b121              CBZ      r1,|L1.374|
;;;370      {
;;;371        /* Enable the selected SPI peripheral (in I2S mode) */
;;;372        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
00016c  8b81              LDRH     r1,[r0,#0x1c]
00016e  f441f441          ORR      r1,r1,#0x400
000172  8381              STRH     r1,[r0,#0x1c]
;;;373      }
;;;374      else
;;;375      {
;;;376        /* Disable the selected SPI peripheral (in I2S mode) */
;;;377        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
;;;378      }
;;;379    }
000174  4770              BX       lr
                  |L1.374|
000176  8b81              LDRH     r1,[r0,#0x1c]         ;377
000178  f421f421          BIC      r1,r1,#0x400          ;377
00017c  8381              STRH     r1,[r0,#0x1c]         ;377
00017e  4770              BX       lr
;;;380    
                          ENDP

                  SPI_I2S_ITConfig PROC
;;;407      /* Get the SPI/I2S IT index */
;;;408      itpos = SPI_I2S_IT >> 4;
000180  0909              LSRS     r1,r1,#4
;;;409      /* Set the IT mask */
;;;410      itmask = (u16)((u16)1 << itpos);
000182  2301              MOVS     r3,#1
000184  408b              LSLS     r3,r3,r1
000186  b299              UXTH     r1,r3
;;;411    
;;;412      if (NewState != DISABLE)
000188  b11a              CBZ      r2,|L1.402|
;;;413      {
;;;414        /* Enable the selected SPI/I2S interrupt */
;;;415        SPIx->CR2 |= itmask;
00018a  8882              LDRH     r2,[r0,#4]
00018c  430a              ORRS     r2,r2,r1
00018e  8082              STRH     r2,[r0,#4]
;;;416      }
;;;417      else
;;;418      {
;;;419        /* Disable the selected SPI/I2S interrupt */
;;;420        SPIx->CR2 &= (u16)~itmask;
;;;421      }
;;;422    }
000190  4770              BX       lr
                  |L1.402|
000192  8882              LDRH     r2,[r0,#4]            ;420
000194  438a              BICS     r2,r2,r1              ;420
000196  8082              STRH     r2,[r0,#4]            ;420
000198  4770              BX       lr
;;;423    
                          ENDP

                  SPI_I2S_DMACmd PROC
;;;447    
;;;448      if (NewState != DISABLE)
00019a  b11a              CBZ      r2,|L1.420|
;;;449      {
;;;450        /* Enable the selected SPI/I2S DMA requests */
;;;451        SPIx->CR2 |= SPI_I2S_DMAReq;
00019c  8882              LDRH     r2,[r0,#4]
00019e  430a              ORRS     r2,r2,r1
0001a0  8082              STRH     r2,[r0,#4]
;;;452      }
;;;453      else
;;;454      {
;;;455        /* Disable the selected SPI/I2S DMA requests */
;;;456        SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
;;;457      }
;;;458    }
0001a2  4770              BX       lr
                  |L1.420|
0001a4  8882              LDRH     r2,[r0,#4]            ;456
0001a6  438a              BICS     r2,r2,r1              ;456
0001a8  8082              STRH     r2,[r0,#4]            ;456
0001aa  4770              BX       lr
;;;459    
                          ENDP

                  SPI_I2S_SendData PROC
;;;475      /* Write in the DR register the data to be sent */
;;;476      SPIx->DR = Data;
0001ac  8181              STRH     r1,[r0,#0xc]
;;;477    }
0001ae  4770              BX       lr
;;;478    
                          ENDP

                  SPI_I2S_ReceiveData PROC
;;;493      /* Return the data in the DR register */
;;;494      return SPIx->DR;
0001b0  8980              LDRH     r0,[r0,#0xc]
;;;495    }
0001b2  4770              BX       lr
;;;496    
                          ENDP

                  SPI_NSSInternalSoftwareConfig PROC
;;;514    
;;;515      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
0001b4  f5a1f5a1          SUB      r2,r1,#0xfe00
0001b8  3aff              SUBS     r2,r2,#0xff
0001ba  d004              BEQ      |L1.454|
;;;516      {
;;;517        /* Set NSS pin internally by software */
;;;518        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
0001bc  8801              LDRH     r1,[r0,#0]
0001be  f441f441          ORR      r1,r1,#0x100
0001c2  8001              STRH     r1,[r0,#0]
;;;519      }
;;;520      else
;;;521      {
;;;522        /* Reset NSS pin internally by software */
;;;523        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
;;;524      }
;;;525    }
0001c4  4770              BX       lr
                  |L1.454|
0001c6  8801              LDRH     r1,[r0,#0]            ;523
0001c8  f421f421          BIC      r1,r1,#0x100          ;523
0001cc  8001              STRH     r1,[r0,#0]            ;523
0001ce  4770              BX       lr
;;;526    
                          ENDP

                  SPI_SSOutputCmd PROC
;;;541    
;;;542      if (NewState != DISABLE)
0001d0  b121              CBZ      r1,|L1.476|
;;;543      {
;;;544        /* Enable the selected SPI SS output */
;;;545        SPIx->CR2 |= CR2_SSOE_Set;
0001d2  8881              LDRH     r1,[r0,#4]
0001d4  f041f041          ORR      r1,r1,#4
0001d8  8081              STRH     r1,[r0,#4]
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected SPI SS output */
;;;550        SPIx->CR2 &= CR2_SSOE_Reset;
;;;551      }
;;;552    }
0001da  4770              BX       lr
                  |L1.476|
0001dc  8881              LDRH     r1,[r0,#4]            ;550
0001de  f021f021          BIC      r1,r1,#4              ;550
0001e2  8081              STRH     r1,[r0,#4]            ;550
0001e4  4770              BX       lr
;;;553    
                          ENDP

                  SPI_DataSizeConfig PROC
;;;571      /* Clear DFF bit */
;;;572      SPIx->CR1 &= (u16)~SPI_DataSize_16b;
0001e6  8802              LDRH     r2,[r0,#0]
0001e8  f422f422          BIC      r2,r2,#0x800
0001ec  8002              STRH     r2,[r0,#0]
;;;573      /* Set new DFF bit value */
;;;574      SPIx->CR1 |= SPI_DataSize;
0001ee  8802              LDRH     r2,[r0,#0]
0001f0  430a              ORRS     r2,r2,r1
0001f2  8002              STRH     r2,[r0,#0]
;;;575    }
0001f4  4770              BX       lr
;;;576    
                          ENDP

                  SPI_TransmitCRC PROC
;;;589      /* Enable the selected SPI CRC transmission */
;;;590      SPIx->CR1 |= CR1_CRCNext_Set;
0001f6  8801              LDRH     r1,[r0,#0]
0001f8  f441f441          ORR      r1,r1,#0x1000
0001fc  8001              STRH     r1,[r0,#0]
;;;591    }
0001fe  4770              BX       lr
;;;592    
                          ENDP

                  SPI_CalculateCRC PROC
;;;608    
;;;609      if (NewState != DISABLE)
000200  b121              CBZ      r1,|L1.524|
;;;610      {
;;;611        /* Enable the selected SPI CRC calculation */
;;;612        SPIx->CR1 |= CR1_CRCEN_Set;
000202  8801              LDRH     r1,[r0,#0]
000204  f441f441          ORR      r1,r1,#0x2000
000208  8001              STRH     r1,[r0,#0]
;;;613      }
;;;614      else
;;;615      {
;;;616        /* Disable the selected SPI CRC calculation */
;;;617        SPIx->CR1 &= CR1_CRCEN_Reset;
;;;618      }
;;;619    }
00020a  4770              BX       lr
                  |L1.524|
00020c  8801              LDRH     r1,[r0,#0]            ;617
00020e  f421f421          BIC      r1,r1,#0x2000         ;617
000212  8001              STRH     r1,[r0,#0]            ;617
000214  4770              BX       lr
;;;620    
                          ENDP

                  SPI_GetCRC PROC
;;;640    
;;;641      if (SPI_CRC != SPI_CRC_Rx)
000216  2901              CMP      r1,#1
000218  d001              BEQ      |L1.542|
;;;642      {
;;;643        /* Get the Tx CRC register */
;;;644        crcreg = SPIx->TXCRCR;
00021a  8b00              LDRH     r0,[r0,#0x18]
;;;645      }
;;;646      else
;;;647      {
;;;648        /* Get the Rx CRC register */
;;;649        crcreg = SPIx->RXCRCR;
;;;650      }
;;;651    
;;;652      /* Return the selected CRC register */
;;;653      return crcreg;
;;;654    }
00021c  4770              BX       lr
                  |L1.542|
00021e  8a80              LDRH     r0,[r0,#0x14]         ;649
000220  4770              BX       lr
;;;655    
                          ENDP

                  SPI_GetCRCPolynomial PROC
;;;668      /* Return the CRC polynomial register */
;;;669      return SPIx->CRCPR;
000222  8a00              LDRH     r0,[r0,#0x10]
;;;670    }
000224  4770              BX       lr
;;;671    
                          ENDP

                  SPI_BiDirectionalLineConfig PROC
;;;690    
;;;691      if (SPI_Direction == SPI_Direction_Tx)
000226  f5b1f5b1          CMP      r1,#0x4000
00022a  d104              BNE      |L1.566|
;;;692      {
;;;693        /* Set the Tx only mode */
;;;694        SPIx->CR1 |= SPI_Direction_Tx;
00022c  8801              LDRH     r1,[r0,#0]
00022e  f441f441          ORR      r1,r1,#0x4000
000232  8001              STRH     r1,[r0,#0]
;;;695      }
;;;696      else
;;;697      {
;;;698        /* Set the Rx only mode */
;;;699        SPIx->CR1 &= SPI_Direction_Rx;
;;;700      }
;;;701    }
000234  4770              BX       lr
                  |L1.566|
000236  8801              LDRH     r1,[r0,#0]            ;699
000238  f421f421          BIC      r1,r1,#0x4000         ;699
00023c  8001              STRH     r1,[r0,#0]            ;699
00023e  4770              BX       lr
;;;702    
                          ENDP

                  SPI_I2S_GetFlagStatus PROC
;;;722    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
;;;723    {
000240  4602              MOV      r2,r0
;;;724      FlagStatus bitstatus = RESET;
000242  2000              MOVS     r0,#0
;;;725    
;;;726      /* Check the parameters */
;;;727      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;728      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;729    
;;;730      /* Check the status of the specified SPI/I2S flag */
;;;731      if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
000244  8912              LDRH     r2,[r2,#8]
000246  420a              TST      r2,r1
000248  d000              BEQ      |L1.588|
;;;732      {
;;;733        /* SPI_I2S_FLAG is set */
;;;734        bitstatus = SET;
00024a  2001              MOVS     r0,#1
                  |L1.588|
;;;735      }
;;;736      else
;;;737      {
;;;738        /* SPI_I2S_FLAG is reset */
;;;739        bitstatus = RESET;
;;;740      }
;;;741      /* Return the SPI_I2S_FLAG status */
;;;742      return  bitstatus;
;;;743    }
00024c  4770              BX       lr
;;;744    
                          ENDP

                  SPI_I2S_ClearFlag PROC
;;;768      /* SPI_FLAG_MODF flag clear */
;;;769      if(SPI_I2S_FLAG == SPI_FLAG_MODF)
00024e  2920              CMP      r1,#0x20
000250  d105              BNE      |L1.606|
;;;770      {
;;;771        /* Read SR register */
;;;772        (void)SPIx->SR;
000252  8901              LDRH     r1,[r0,#8]
;;;773        
;;;774        /* Write on CR1 register */
;;;775        SPIx->CR1 |= CR1_SPE_Set; 
000254  8801              LDRH     r1,[r0,#0]
000256  f041f041          ORR      r1,r1,#0x40
00025a  8001              STRH     r1,[r0,#0]
;;;776      }
;;;777      /* SPI_I2S_FLAG_OVR flag or I2S_FLAG_UDR flag clear */
;;;778      else if ((SPI_I2S_FLAG == SPI_I2S_FLAG_OVR) || (SPI_I2S_FLAG == I2S_FLAG_UDR))  
;;;779      {
;;;780        /* Read SR register  (Before clearing OVR flag, it is mandatory to read 
;;;781           SPI_I2S_DR register)*/
;;;782        (void)SPIx->SR;
;;;783      }
;;;784      else /* SPI_FLAG_CRCERR flag clear */
;;;785      {
;;;786        /* Clear the selected SPI flag */
;;;787        SPIx->SR = (u16)~SPI_I2S_FLAG;
;;;788      }
;;;789    }
00025c  4770              BX       lr
                  |L1.606|
00025e  2940              CMP      r1,#0x40              ;778
000260  d001              BEQ      |L1.614|
000262  2908              CMP      r1,#8                 ;778
000264  d101              BNE      |L1.618|
                  |L1.614|
000266  8900              LDRH     r0,[r0,#8]            ;782
000268  4770              BX       lr
                  |L1.618|
00026a  43c9              MVNS     r1,r1                 ;787
00026c  8101              STRH     r1,[r0,#8]            ;787
00026e  4770              BX       lr
;;;790    
                          ENDP

                  SPI_I2S_GetITStatus PROC
;;;808    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
;;;809    {
000270  b530              PUSH     {r4,r5,lr}
000272  4602              MOV      r2,r0
;;;810      ITStatus bitstatus = RESET;
000274  2000              MOVS     r0,#0
;;;811      u16 itpos = 0, itmask = 0, enablestatus = 0;
;;;812    
;;;813      /* Check the parameters */
;;;814      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;815      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;816    
;;;817      /* Get the SPI/I2S IT index */
;;;818      itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
000276  f001f001          AND      r5,r1,#0xf
00027a  2401              MOVS     r4,#1
00027c  fa04fa04          LSL      r3,r4,r5
000280  b29b              UXTH     r3,r3
;;;819    
;;;820      /* Get the SPI/I2S IT mask */
;;;821      itmask = SPI_I2S_IT >> 4;
000282  0909              LSRS     r1,r1,#4
;;;822      /* Set the IT mask */
;;;823      itmask = (u16)((u16)0x01 << itmask);
000284  408c              LSLS     r4,r4,r1
000286  b2a4              UXTH     r4,r4
;;;824      /* Get the SPI_I2S_IT enable bit status */
;;;825      enablestatus = (SPIx->CR2 & itmask) ;
000288  8891              LDRH     r1,[r2,#4]
00028a  4021              ANDS     r1,r1,r4
;;;826    
;;;827      /* Check the status of the specified SPI/I2S interrupt */
;;;828      if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
00028c  8912              LDRH     r2,[r2,#8]
00028e  421a              TST      r2,r3
000290  d002              BEQ      |L1.664|
000292  2900              CMP      r1,#0
000294  d000              BEQ      |L1.664|
;;;829      {
;;;830        /* SPI_I2S_IT is set */
;;;831        bitstatus = SET;
000296  2001              MOVS     r0,#1
                  |L1.664|
;;;832      }
;;;833      else
;;;834      {
;;;835        /* SPI_I2S_IT is reset */
;;;836        bitstatus = RESET;
;;;837      }
;;;838      /* Return the SPI_I2S_IT status */
;;;839      return bitstatus;
;;;840    }
000298  bd30              POP      {r4,r5,pc}
;;;841    
                          ENDP

                  SPI_I2S_ClearITPendingBit PROC
;;;865      /* SPI_IT_MODF pending bit clear */
;;;866      if(SPI_I2S_IT == SPI_IT_MODF)
00029a  2955              CMP      r1,#0x55
00029c  d105              BNE      |L1.682|
;;;867      {
;;;868        /* Read SR register */
;;;869        (void)SPIx->SR;
00029e  8901              LDRH     r1,[r0,#8]
;;;870        /* Write on CR1 register */
;;;871        SPIx->CR1 |= CR1_SPE_Set; 
0002a0  8801              LDRH     r1,[r0,#0]
0002a2  f041f041          ORR      r1,r1,#0x40
0002a6  8001              STRH     r1,[r0,#0]
;;;872      }
;;;873      /* SPI_I2S_IT_OVR or I2S_IT_UDR pending bit clear */ 
;;;874      else if((SPI_I2S_IT == SPI_I2S_IT_OVR) || (SPI_I2S_IT == I2S_IT_UDR))    
;;;875      {
;;;876        /* Read SR register */
;;;877        (void)(SPIx->SR);
;;;878      }  
;;;879      else   /* SPI_IT_CRCERR pending bit clear */
;;;880      {
;;;881        /* Get the SPI/I2S IT index */
;;;882        itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
;;;883        /* Clear the selected SPI/I2S interrupt pending bits */
;;;884        SPIx->SR = (u16)~itpos;
;;;885      }
;;;886    }
0002a8  4770              BX       lr
                  |L1.682|
0002aa  2956              CMP      r1,#0x56              ;874
0002ac  d001              BEQ      |L1.690|
0002ae  2953              CMP      r1,#0x53              ;874
0002b0  d101              BNE      |L1.694|
                  |L1.690|
0002b2  8900              LDRH     r0,[r0,#8]            ;877
0002b4  4770              BX       lr
                  |L1.694|
0002b6  f001f001          AND      r2,r1,#0xf            ;882
0002ba  2101              MOVS     r1,#1                 ;882
0002bc  4091              LSLS     r1,r1,r2              ;882
0002be  43c9              MVNS     r1,r1                 ;884
0002c0  8101              STRH     r1,[r0,#8]            ;884
0002c2  4770              BX       lr
;;;887    
                          ENDP

                  |L1.708|
0002c4  bfffc800          DCD      0xbfffc800
