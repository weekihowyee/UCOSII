; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\os_mbox.o --depend=.\output\os_mbox.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\os_mbox.crf ..\..\..\..\..\uCOS-II\Source\os_mbox.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMboxAccept PROC
;;;47     void  *OSMboxAccept (OS_EVENT *pevent)
;;;48     {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;49         void      *pmsg;
;;;50     #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
;;;51         OS_CPU_SR  cpu_sr = 0;
;;;52     #endif
;;;53     
;;;54     
;;;55     
;;;56     #if OS_ARG_CHK_EN > 0
;;;57         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
;;;58             return ((void *)0);
;;;59         }
;;;60     #endif
;;;61         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
000004  7820              LDRB     r0,[r4,#0]
000006  2801              CMP      r0,#1
000008  d001              BEQ      |L1.14|
;;;62             return ((void *)0);
00000a  2000              MOVS     r0,#0
;;;63         }
;;;64         OS_ENTER_CRITICAL();
;;;65         pmsg               = pevent->OSEventPtr;
;;;66         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;67         OS_EXIT_CRITICAL();
;;;68         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;69     }
00000c  bd70              POP      {r4-r6,pc}
                  |L1.14|
00000e  f7fff7ff          BL       OS_CPU_SR_Save
000012  6865              LDR      r5,[r4,#4]            ;65
000014  2100              MOVS     r1,#0                 ;66
000016  6061              STR      r1,[r4,#4]            ;66
000018  f7fff7ff          BL       OS_CPU_SR_Restore
00001c  4628              MOV      r0,r5                 ;68
00001e  bd70              POP      {r4-r6,pc}
;;;70     #endif
                          ENDP

                  OSMboxCreate PROC
;;;88     OS_EVENT  *OSMboxCreate (void *pmsg)
;;;89     {
000020  b570              PUSH     {r4-r6,lr}
000022  4605              MOV      r5,r0
;;;90         OS_EVENT  *pevent;
;;;91     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;92         OS_CPU_SR  cpu_sr = 0;
;;;93     #endif
;;;94     
;;;95     
;;;96     
;;;97         if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000024  48d2              LDR      r0,|L1.880|
000026  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000028  b108              CBZ      r0,|L1.46|
;;;98             return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00002a  2000              MOVS     r0,#0
;;;99         }
;;;100        OS_ENTER_CRITICAL();
;;;101        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;102        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;103            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;104        }
;;;105        OS_EXIT_CRITICAL();
;;;106        if (pevent != (OS_EVENT *)0) {
;;;107            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;108            pevent->OSEventCnt     = 0;
;;;109            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;110    #if OS_EVENT_NAME_SIZE > 1
;;;111            pevent->OSEventName[0] = '?';
;;;112            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;113    #endif
;;;114            OS_EventWaitListInit(pevent);
;;;115        }
;;;116        return (pevent);                             /* Return pointer to event control block              */
;;;117    }
00002c  bd70              POP      {r4-r6,pc}
                  |L1.46|
00002e  f7fff7ff          BL       OS_CPU_SR_Save
000032  49d0              LDR      r1,|L1.884|
000034  680c              LDR      r4,[r1,#0]            ;101  ; OSEventFreeList
000036  b10c              CBZ      r4,|L1.60|
000038  6862              LDR      r2,[r4,#4]            ;103
00003a  600a              STR      r2,[r1,#0]            ;103  ; OSEventFreeList
                  |L1.60|
00003c  f7fff7ff          BL       OS_CPU_SR_Restore
000040  b154              CBZ      r4,|L1.88|
000042  2001              MOVS     r0,#1                 ;107
000044  7020              STRB     r0,[r4,#0]            ;107
000046  2000              MOVS     r0,#0                 ;108
000048  8120              STRH     r0,[r4,#8]            ;108
00004a  6065              STR      r5,[r4,#4]            ;109
00004c  213f              MOVS     r1,#0x3f              ;111
00004e  73e1              STRB     r1,[r4,#0xf]          ;111
000050  7420              STRB     r0,[r4,#0x10]         ;112
000052  4620              MOV      r0,r4                 ;114
000054  f7fff7ff          BL       OS_EventWaitListInit
                  |L1.88|
000058  4620              MOV      r0,r4                 ;116
00005a  bd70              POP      {r4-r6,pc}
;;;118    /*$PAGE*/
                          ENDP

                  OSMboxDel PROC
;;;156    OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
;;;157    {
00005c  e92de92d          PUSH     {r4-r12,lr}
000060  4604              MOV      r4,r0
000062  468b              MOV      r11,r1
000064  4615              MOV      r5,r2
;;;158        BOOLEAN    tasks_waiting;
;;;159        OS_EVENT  *pevent_return;
;;;160    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;161        OS_CPU_SR  cpu_sr = 0;
;;;162    #endif
;;;163    
;;;164    
;;;165    
;;;166    #if OS_ARG_CHK_EN > 0
;;;167        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;168            return (pevent);
;;;169        }
;;;170        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;171            *perr = OS_ERR_PEVENT_NULL;
;;;172            return (pevent);
;;;173        }
;;;174    #endif
;;;175        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
000066  7820              LDRB     r0,[r4,#0]
000068  2801              CMP      r0,#1
00006a  d004              BEQ      |L1.118|
;;;176            *perr = OS_ERR_EVENT_TYPE;
00006c  2001              MOVS     r0,#1
00006e  7028              STRB     r0,[r5,#0]
;;;177            return (pevent);
000070  4620              MOV      r0,r4
                  |L1.114|
;;;178        }
;;;179        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;180            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;181            return (pevent);
;;;182        }
;;;183        OS_ENTER_CRITICAL();
;;;184        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
;;;185            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;186        } else {
;;;187            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;188        }
;;;189        switch (opt) {
;;;190            case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;191                 if (tasks_waiting == OS_FALSE) {
;;;192    #if OS_EVENT_NAME_SIZE > 1
;;;193                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;194                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;195    #endif
;;;196                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;197                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;198                     pevent->OSEventCnt  = 0;
;;;199                     OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;200                     OS_EXIT_CRITICAL();
;;;201                     *perr               = OS_ERR_NONE;
;;;202                     pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;203                 } else {
;;;204                     OS_EXIT_CRITICAL();
;;;205                     *perr               = OS_ERR_TASK_WAITING;
;;;206                     pevent_return       = pevent;
;;;207                 }
;;;208                 break;
;;;209    
;;;210            case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;211                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
;;;212                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;213                 }
;;;214    #if OS_EVENT_NAME_SIZE > 1
;;;215                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;216                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;217    #endif
;;;218                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;219                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;220                 pevent->OSEventCnt     = 0;
;;;221                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;222                 OS_EXIT_CRITICAL();
;;;223                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;224                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;225                 }
;;;226                 *perr         = OS_ERR_NONE;
;;;227                 pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;228                 break;
;;;229    
;;;230            default:
;;;231                 OS_EXIT_CRITICAL();
;;;232                 *perr         = OS_ERR_INVALID_OPT;
;;;233                 pevent_return = pevent;
;;;234                 break;
;;;235        }
;;;236        return (pevent_return);
;;;237    }
000072  e8bde8bd          POP      {r4-r12,pc}
                  |L1.118|
000076  48be              LDR      r0,|L1.880|
000078  7800              LDRB     r0,[r0,#0]            ;179  ; OSIntNesting
00007a  b118              CBZ      r0,|L1.132|
00007c  200f              MOVS     r0,#0xf               ;180
00007e  7028              STRB     r0,[r5,#0]            ;180
000080  4620              MOV      r0,r4                 ;181
000082  e7f6              B        |L1.114|
                  |L1.132|
000084  f7fff7ff          BL       OS_CPU_SR_Save
000088  4607              MOV      r7,r0                 ;183
00008a  7aa0              LDRB     r0,[r4,#0xa]          ;184
00008c  b108              CBZ      r0,|L1.146|
00008e  2601              MOVS     r6,#1                 ;185
000090  e000              B        |L1.148|
                  |L1.146|
000092  2600              MOVS     r6,#0                 ;187
                  |L1.148|
000094  f8dff8df          LDR      r9,|L1.884|
000098  f04ff04f          MOV      r8,#0x3f              ;189
00009c  f04ff04f          MOV      r10,#0                ;189
0000a0  f1bbf1bb          CMP      r11,#0                ;189
0000a4  d003              BEQ      |L1.174|
0000a6  f1bbf1bb          CMP      r11,#1                ;189
0000aa  d13d              BNE      |L1.296|
0000ac  e021              B        |L1.242|
                  |L1.174|
0000ae  b99e              CBNZ     r6,|L1.216|
0000b0  f884f884          STRB     r8,[r4,#0xf]          ;193
0000b4  f884f884          STRB     r10,[r4,#0x10]        ;194
0000b8  f884f884          STRB     r10,[r4,#0]           ;196
0000bc  f8d9f8d9          LDR      r0,[r9,#0]            ;197  ; OSEventFreeList
0000c0  6060              STR      r0,[r4,#4]            ;197
0000c2  f8a4f8a4          STRH     r10,[r4,#8]           ;198
0000c6  f8c9f8c9          STR      r4,[r9,#0]            ;199  ; OSEventFreeList
0000ca  4638              MOV      r0,r7                 ;200
0000cc  f7fff7ff          BL       OS_CPU_SR_Restore
0000d0  f885f885          STRB     r10,[r5,#0]           ;201
0000d4  2000              MOVS     r0,#0                 ;202
0000d6  e7cc              B        |L1.114|
                  |L1.216|
0000d8  4638              MOV      r0,r7                 ;204
0000da  f7fff7ff          BL       OS_CPU_SR_Restore
0000de  2049              MOVS     r0,#0x49              ;205
0000e0  7028              STRB     r0,[r5,#0]            ;205
0000e2  4620              MOV      r0,r4                 ;206
0000e4  e7c5              B        |L1.114|
                  |L1.230|
0000e6  2300              MOVS     r3,#0                 ;212
0000e8  2202              MOVS     r2,#2                 ;212
0000ea  4619              MOV      r1,r3                 ;212
0000ec  4620              MOV      r0,r4                 ;212
0000ee  f7fff7ff          BL       OS_EventTaskRdy
                  |L1.242|
0000f2  7aa0              LDRB     r0,[r4,#0xa]          ;211
0000f4  2800              CMP      r0,#0                 ;211
0000f6  d1f6              BNE      |L1.230|
0000f8  f884f884          STRB     r8,[r4,#0xf]          ;215
0000fc  f884f884          STRB     r10,[r4,#0x10]        ;216
000100  f884f884          STRB     r10,[r4,#0]           ;218
000104  f8d9f8d9          LDR      r0,[r9,#0]            ;219  ; OSEventFreeList
000108  6060              STR      r0,[r4,#4]            ;219
00010a  f8a4f8a4          STRH     r10,[r4,#8]           ;220
00010e  f8c9f8c9          STR      r4,[r9,#0]            ;221  ; OSEventFreeList
000112  4638              MOV      r0,r7                 ;222
000114  f7fff7ff          BL       OS_CPU_SR_Restore
000118  2e01              CMP      r6,#1                 ;223
00011a  d101              BNE      |L1.288|
00011c  f7fff7ff          BL       OS_Sched
                  |L1.288|
000120  f885f885          STRB     r10,[r5,#0]           ;226
000124  2000              MOVS     r0,#0                 ;227
000126  e7a4              B        |L1.114|
                  |L1.296|
000128  4638              MOV      r0,r7                 ;231
00012a  f7fff7ff          BL       OS_CPU_SR_Restore
00012e  2007              MOVS     r0,#7                 ;232
000130  7028              STRB     r0,[r5,#0]            ;232
000132  4620              MOV      r0,r4                 ;233
000134  e79d              B        |L1.114|
;;;238    #endif
                          ENDP

                  OSMboxPend PROC
;;;274    void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
;;;275    {
000136  e92de92d          PUSH     {r4-r10,lr}
00013a  4607              MOV      r7,r0
00013c  468a              MOV      r10,r1
00013e  4614              MOV      r4,r2
;;;276        void      *pmsg;
;;;277    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;278        OS_CPU_SR  cpu_sr = 0;
;;;279    #endif
;;;280    
;;;281    
;;;282    
;;;283    #if OS_ARG_CHK_EN > 0
;;;284        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;285            return ((void *)0);
;;;286        }
;;;287        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;288            *perr = OS_ERR_PEVENT_NULL;
;;;289            return ((void *)0);
;;;290        }
;;;291    #endif
;;;292        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
000140  7838              LDRB     r0,[r7,#0]
000142  2801              CMP      r0,#1
000144  d004              BEQ      |L1.336|
;;;293            *perr = OS_ERR_EVENT_TYPE;
000146  2001              MOVS     r0,#1
000148  7020              STRB     r0,[r4,#0]
;;;294            return ((void *)0);
00014a  2000              MOVS     r0,#0
                  |L1.332|
;;;295        }
;;;296        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;297            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;298            return ((void *)0);
;;;299        }
;;;300        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;301            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;302            return ((void *)0);
;;;303        }
;;;304        OS_ENTER_CRITICAL();
;;;305        pmsg = pevent->OSEventPtr;
;;;306        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;307            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;308            OS_EXIT_CRITICAL();
;;;309            *perr = OS_ERR_NONE;
;;;310            return (pmsg);                                /* Return the message received (or NULL)         */
;;;311        }
;;;312        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;313        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;314        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;315        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;316        OS_EXIT_CRITICAL();
;;;317        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;318        OS_ENTER_CRITICAL();
;;;319        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;320            case OS_STAT_PEND_OK:
;;;321                 pmsg =  OSTCBCur->OSTCBMsg;
;;;322                *perr =  OS_ERR_NONE;
;;;323                 break;
;;;324    
;;;325            case OS_STAT_PEND_ABORT:
;;;326                 pmsg = (void *)0;
;;;327                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_TO:
;;;331            default:
;;;332                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;333                 pmsg = (void *)0;
;;;334                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;335                 break;
;;;336        }
;;;337        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;338        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;339        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;340    #if (OS_EVENT_MULTI_EN > 0)
;;;341        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;342    #endif
;;;343        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;344        OS_EXIT_CRITICAL();
;;;345        return (pmsg);                                    /* Return received message                       */
;;;346    }
00014c  e8bde8bd          POP      {r4-r10,pc}
                  |L1.336|
000150  4887              LDR      r0,|L1.880|
000152  7800              LDRB     r0,[r0,#0]            ;296  ; OSIntNesting
000154  b118              CBZ      r0,|L1.350|
000156  2002              MOVS     r0,#2                 ;297
000158  7020              STRB     r0,[r4,#0]            ;297
00015a  2000              MOVS     r0,#0                 ;298
00015c  e7f6              B        |L1.332|
                  |L1.350|
00015e  4886              LDR      r0,|L1.888|
000160  7800              LDRB     r0,[r0,#0]            ;300  ; OSLockNesting
000162  b118              CBZ      r0,|L1.364|
000164  200d              MOVS     r0,#0xd               ;301
000166  7020              STRB     r0,[r4,#0]            ;301
000168  2000              MOVS     r0,#0                 ;302
00016a  e7ef              B        |L1.332|
                  |L1.364|
00016c  f7fff7ff          BL       OS_CPU_SR_Save
000170  4606              MOV      r6,r0                 ;304
000172  687d              LDR      r5,[r7,#4]            ;305
000174  f04ff04f          MOV      r8,#0                 ;306
000178  b145              CBZ      r5,|L1.396|
00017a  f8c7f8c7          STR      r8,[r7,#4]            ;307
00017e  4630              MOV      r0,r6                 ;308
000180  f7fff7ff          BL       OS_CPU_SR_Restore
000184  f884f884          STRB     r8,[r4,#0]            ;309
000188  4628              MOV      r0,r5                 ;310
00018a  e7df              B        |L1.332|
                  |L1.396|
00018c  f8dff8df          LDR      r9,|L1.892|
000190  f8d9f8d9          LDR      r0,[r9,#0]            ;312  ; OSTCBCur
000194  f810f810          LDRB     r1,[r0,#0x30]!        ;312
000198  f041f041          ORR      r1,r1,#2              ;312
00019c  7001              STRB     r1,[r0,#0]            ;312
00019e  f880f880          STRB     r8,[r0,#1]            ;313
0001a2  f820f820          STRH     r10,[r0,#-2]          ;314
0001a6  4638              MOV      r0,r7                 ;315
0001a8  f7fff7ff          BL       OS_EventTaskWait
0001ac  4630              MOV      r0,r6                 ;316
0001ae  f7fff7ff          BL       OS_CPU_SR_Restore
0001b2  f7fff7ff          BL       OS_Sched
0001b6  f7fff7ff          BL       OS_CPU_SR_Save
0001ba  4606              MOV      r6,r0                 ;318
0001bc  f8d9f8d9          LDR      r0,[r9,#0]            ;319  ; OSTCBCur
0001c0  f890f890          LDRB     r1,[r0,#0x31]         ;319
0001c4  b121              CBZ      r1,|L1.464|
0001c6  2902              CMP      r1,#2                 ;319
0001c8  d106              BNE      |L1.472|
0001ca  200e              MOVS     r0,#0xe               ;327
0001cc  7020              STRB     r0,[r4,#0]            ;327
0001ce  e008              B        |L1.482|
                  |L1.464|
0001d0  6a45              LDR      r5,[r0,#0x24]         ;321
0001d2  f884f884          STRB     r8,[r4,#0]            ;322
0001d6  e004              B        |L1.482|
                  |L1.472|
0001d8  4639              MOV      r1,r7                 ;332
0001da  f7fff7ff          BL       OS_EventTaskRemove
0001de  200a              MOVS     r0,#0xa               ;334
0001e0  7020              STRB     r0,[r4,#0]            ;334
                  |L1.482|
0001e2  f8d9f8d9          LDR      r1,[r9,#0]            ;337  ; OSTCBCur
0001e6  f881f881          STRB     r8,[r1,#0x30]         ;337
0001ea  f881f881          STRB     r8,[r1,#0x31]         ;338
0001ee  f8c1f8c1          STR      r8,[r1,#0x1c]         ;339
0001f2  f8c1f8c1          STR      r8,[r1,#0x20]         ;341
0001f6  f8c1f8c1          STR      r8,[r1,#0x24]         ;343
0001fa  4630              MOV      r0,r6                 ;344
0001fc  f7fff7ff          BL       OS_CPU_SR_Restore
000200  4628              MOV      r0,r5                 ;345
000202  e7a3              B        |L1.332|
;;;347    /*$PAGE*/
                          ENDP

                  OSMboxPendAbort PROC
;;;381    INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
;;;382    {
000204  e92de92d          PUSH     {r4-r8,lr}
000208  4605              MOV      r5,r0
00020a  4688              MOV      r8,r1
00020c  4616              MOV      r6,r2
;;;383        INT8U      nbr_tasks;
;;;384    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;385        OS_CPU_SR  cpu_sr = 0;
;;;386    #endif
;;;387    
;;;388    
;;;389    
;;;390    #if OS_ARG_CHK_EN > 0
;;;391        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;392            return (0);
;;;393        }
;;;394        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;395            *perr = OS_ERR_PEVENT_NULL;
;;;396            return (0);
;;;397        }
;;;398    #endif
;;;399        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00020e  7829              LDRB     r1,[r5,#0]
000210  2001              MOVS     r0,#1
000212  2901              CMP      r1,#1
000214  d003              BEQ      |L1.542|
;;;400            *perr = OS_ERR_EVENT_TYPE;
000216  7030              STRB     r0,[r6,#0]
;;;401            return (0);
000218  2000              MOVS     r0,#0
                  |L1.538|
;;;402        }
;;;403        OS_ENTER_CRITICAL();
;;;404        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
;;;405            nbr_tasks = 0;
;;;406            switch (opt) {
;;;407                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;408                     while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
;;;409                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;410                         nbr_tasks++;
;;;411                     }
;;;412                     break;
;;;413                 
;;;414                case OS_PEND_OPT_NONE:
;;;415                default:                                       /* No,  ready HPT       waiting on mailbox  */
;;;416                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;417                     nbr_tasks++;
;;;418                     break;
;;;419            }
;;;420            OS_EXIT_CRITICAL();
;;;421            OS_Sched();                                        /* Find HPT ready to run                    */
;;;422            *perr = OS_ERR_PEND_ABORT;
;;;423            return (nbr_tasks);
;;;424        }
;;;425        OS_EXIT_CRITICAL();
;;;426        *perr = OS_ERR_NONE;
;;;427        return (0);                                            /* No tasks waiting on mailbox              */
;;;428    }
00021a  e8bde8bd          POP      {r4-r8,pc}
                  |L1.542|
00021e  f7fff7ff          BL       OS_CPU_SR_Save
000222  4607              MOV      r7,r0                 ;403
000224  7aa8              LDRB     r0,[r5,#0xa]          ;404
000226  b300              CBZ      r0,|L1.618|
000228  2400              MOVS     r4,#0                 ;405
00022a  f1b8f1b8          CMP      r8,#1                 ;406
00022e  d10c              BNE      |L1.586|
000230  e007              B        |L1.578|
                  |L1.562|
000232  2302              MOVS     r3,#2                 ;409
000234  461a              MOV      r2,r3                 ;409
000236  2100              MOVS     r1,#0                 ;409
000238  4628              MOV      r0,r5                 ;409
00023a  f7fff7ff          BL       OS_EventTaskRdy
00023e  1c64              ADDS     r4,r4,#1              ;410
000240  b2e4              UXTB     r4,r4                 ;410
                  |L1.578|
000242  7aa8              LDRB     r0,[r5,#0xa]          ;408
000244  2800              CMP      r0,#0                 ;408
000246  d1f4              BNE      |L1.562|
000248  e006              B        |L1.600|
                  |L1.586|
00024a  2302              MOVS     r3,#2                 ;416
00024c  461a              MOV      r2,r3                 ;416
00024e  2100              MOVS     r1,#0                 ;416
000250  4628              MOV      r0,r5                 ;416
000252  f7fff7ff          BL       OS_EventTaskRdy
000256  2401              MOVS     r4,#1                 ;417
                  |L1.600|
000258  4638              MOV      r0,r7                 ;420
00025a  f7fff7ff          BL       OS_CPU_SR_Restore
00025e  f7fff7ff          BL       OS_Sched
000262  200e              MOVS     r0,#0xe               ;422
000264  7030              STRB     r0,[r6,#0]            ;422
000266  4620              MOV      r0,r4                 ;423
000268  e7d7              B        |L1.538|
                  |L1.618|
00026a  4638              MOV      r0,r7                 ;425
00026c  f7fff7ff          BL       OS_CPU_SR_Restore
000270  2000              MOVS     r0,#0                 ;426
000272  7030              STRB     r0,[r6,#0]            ;426
000274  e7d1              B        |L1.538|
;;;429    #endif
                          ENDP

                  OSMboxPost PROC
;;;455    INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
;;;456    {
000276  b570              PUSH     {r4-r6,lr}
000278  4604              MOV      r4,r0
00027a  460e              MOV      r6,r1
;;;457    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;458        OS_CPU_SR  cpu_sr = 0;
;;;459    #endif
;;;460    
;;;461    
;;;462    
;;;463    #if OS_ARG_CHK_EN > 0
;;;464        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;465            return (OS_ERR_PEVENT_NULL);
;;;466        }
;;;467        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;468            return (OS_ERR_POST_NULL_PTR);
;;;469        }
;;;470    #endif
;;;471        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00027c  7820              LDRB     r0,[r4,#0]
00027e  2801              CMP      r0,#1
000280  d001              BEQ      |L1.646|
;;;472            return (OS_ERR_EVENT_TYPE);
000282  2001              MOVS     r0,#1
;;;473        }
;;;474        OS_ENTER_CRITICAL();
;;;475        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;476                                                          /* Ready HPT waiting on event                    */
;;;477            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;478            OS_EXIT_CRITICAL();
;;;479            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;483            OS_EXIT_CRITICAL();
;;;484            return (OS_ERR_MBOX_FULL);
;;;485        }
;;;486        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;487        OS_EXIT_CRITICAL();
;;;488        return (OS_ERR_NONE);
;;;489    }
000284  bd70              POP      {r4-r6,pc}
                  |L1.646|
000286  f7fff7ff          BL       OS_CPU_SR_Save
00028a  4605              MOV      r5,r0                 ;474
00028c  7aa0              LDRB     r0,[r4,#0xa]          ;475
00028e  b160              CBZ      r0,|L1.682|
000290  2300              MOVS     r3,#0                 ;477
000292  2202              MOVS     r2,#2                 ;477
000294  4631              MOV      r1,r6                 ;477
000296  4620              MOV      r0,r4                 ;477
000298  f7fff7ff          BL       OS_EventTaskRdy
00029c  4628              MOV      r0,r5                 ;478
00029e  f7fff7ff          BL       OS_CPU_SR_Restore
0002a2  f7fff7ff          BL       OS_Sched
0002a6  2000              MOVS     r0,#0                 ;480
0002a8  bd70              POP      {r4-r6,pc}
                  |L1.682|
0002aa  6860              LDR      r0,[r4,#4]            ;482
0002ac  b120              CBZ      r0,|L1.696|
0002ae  4628              MOV      r0,r5                 ;483
0002b0  f7fff7ff          BL       OS_CPU_SR_Restore
0002b4  2014              MOVS     r0,#0x14              ;484
0002b6  bd70              POP      {r4-r6,pc}
                  |L1.696|
0002b8  6066              STR      r6,[r4,#4]            ;486
0002ba  4628              MOV      r0,r5                 ;487
0002bc  f7fff7ff          BL       OS_CPU_SR_Restore
0002c0  2000              MOVS     r0,#0                 ;488
0002c2  bd70              POP      {r4-r6,pc}
;;;490    #endif
                          ENDP

                  OSMboxPostOpt PROC
;;;526    INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
;;;527    {
0002c4  e92de92d          PUSH     {r4-r8,lr}
0002c8  4604              MOV      r4,r0
0002ca  460e              MOV      r6,r1
0002cc  4615              MOV      r5,r2
;;;528    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;529        OS_CPU_SR  cpu_sr = 0;
;;;530    #endif
;;;531    
;;;532    
;;;533    
;;;534    #if OS_ARG_CHK_EN > 0
;;;535        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;536            return (OS_ERR_PEVENT_NULL);
;;;537        }
;;;538        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;539            return (OS_ERR_POST_NULL_PTR);
;;;540        }
;;;541    #endif
;;;542        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
0002ce  7820              LDRB     r0,[r4,#0]
0002d0  2801              CMP      r0,#1
0002d2  d001              BEQ      |L1.728|
;;;543            return (OS_ERR_EVENT_TYPE);
0002d4  2001              MOVS     r0,#1
;;;544        }
;;;545        OS_ENTER_CRITICAL();
;;;546        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;547            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;548                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
;;;549                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;550                }
;;;551            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;552                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;553            }
;;;554            OS_EXIT_CRITICAL();
;;;555            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;556                OS_Sched();                               /* Find HPT ready to run                         */
;;;557            }
;;;558            return (OS_ERR_NONE);
;;;559        }
;;;560        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;561            OS_EXIT_CRITICAL();
;;;562            return (OS_ERR_MBOX_FULL);
;;;563        }
;;;564        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;565        OS_EXIT_CRITICAL();
;;;566        return (OS_ERR_NONE);
;;;567    }
0002d6  e7a0              B        |L1.538|
                  |L1.728|
0002d8  f7fff7ff          BL       OS_CPU_SR_Save
0002dc  4607              MOV      r7,r0                 ;545
0002de  7aa0              LDRB     r0,[r4,#0xa]          ;546
0002e0  b1d8              CBZ      r0,|L1.794|
0002e2  07e8              LSLS     r0,r5,#31             ;547
0002e4  d00a              BEQ      |L1.764|
0002e6  e005              B        |L1.756|
                  |L1.744|
0002e8  2300              MOVS     r3,#0                 ;549
0002ea  2202              MOVS     r2,#2                 ;549
0002ec  4631              MOV      r1,r6                 ;549
0002ee  4620              MOV      r0,r4                 ;549
0002f0  f7fff7ff          BL       OS_EventTaskRdy
                  |L1.756|
0002f4  7aa0              LDRB     r0,[r4,#0xa]          ;548
0002f6  2800              CMP      r0,#0                 ;548
0002f8  d1f6              BNE      |L1.744|
0002fa  e005              B        |L1.776|
                  |L1.764|
0002fc  2300              MOVS     r3,#0                 ;552
0002fe  2202              MOVS     r2,#2                 ;552
000300  4631              MOV      r1,r6                 ;552
000302  4620              MOV      r0,r4                 ;552
000304  f7fff7ff          BL       OS_EventTaskRdy
                  |L1.776|
000308  4638              MOV      r0,r7                 ;554
00030a  f7fff7ff          BL       OS_CPU_SR_Restore
00030e  0768              LSLS     r0,r5,#29             ;555
000310  d401              BMI      |L1.790|
000312  f7fff7ff          BL       OS_Sched
                  |L1.790|
000316  2000              MOVS     r0,#0                 ;558
000318  e77f              B        |L1.538|
                  |L1.794|
00031a  6860              LDR      r0,[r4,#4]            ;560
00031c  b120              CBZ      r0,|L1.808|
00031e  4638              MOV      r0,r7                 ;561
000320  f7fff7ff          BL       OS_CPU_SR_Restore
000324  2014              MOVS     r0,#0x14              ;562
000326  e778              B        |L1.538|
                  |L1.808|
000328  6066              STR      r6,[r4,#4]            ;564
00032a  4638              MOV      r0,r7                 ;565
00032c  f7fff7ff          BL       OS_CPU_SR_Restore
000330  2000              MOVS     r0,#0                 ;566
000332  e772              B        |L1.538|
;;;568    #endif
                          ENDP

                  OSMboxQuery PROC
;;;590    INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
;;;591    {
000334  b570              PUSH     {r4-r6,lr}
000336  4605              MOV      r5,r0
000338  460e              MOV      r6,r1
;;;592        INT8U      i;
;;;593    #if OS_LOWEST_PRIO <= 63
;;;594        INT8U     *psrc;
;;;595        INT8U     *pdest;
;;;596    #else
;;;597        INT16U    *psrc;
;;;598        INT16U    *pdest;
;;;599    #endif
;;;600    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;601        OS_CPU_SR  cpu_sr = 0;
;;;602    #endif
;;;603    
;;;604    
;;;605    
;;;606    #if OS_ARG_CHK_EN > 0
;;;607        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;608            return (OS_ERR_PEVENT_NULL);
;;;609        }
;;;610        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;611            return (OS_ERR_PDATA_NULL);
;;;612        }
;;;613    #endif
;;;614        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00033a  7828              LDRB     r0,[r5,#0]
00033c  2801              CMP      r0,#1
00033e  d001              BEQ      |L1.836|
;;;615            return (OS_ERR_EVENT_TYPE);
000340  2001              MOVS     r0,#1
;;;616        }
;;;617        OS_ENTER_CRITICAL();
;;;618        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;619        psrc                    = &pevent->OSEventTbl[0];
;;;620        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;621        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;622            *pdest++ = *psrc++;
;;;623        }
;;;624        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;625        OS_EXIT_CRITICAL();
;;;626        return (OS_ERR_NONE);
;;;627    }
000342  bd70              POP      {r4-r6,pc}
                  |L1.836|
000344  f7fff7ff          BL       OS_CPU_SR_Save
000348  7aa9              LDRB     r1,[r5,#0xa]          ;618
00034a  7231              STRB     r1,[r6,#8]            ;618
00034c  f105f105          ADD      r4,r5,#0xb            ;619
000350  1d32              ADDS     r2,r6,#4              ;620
000352  2100              MOVS     r1,#0                 ;621
                  |L1.852|
000354  f814f814          LDRB     r3,[r4],#1            ;622
000358  f802f802          STRB     r3,[r2],#1            ;622
00035c  1c49              ADDS     r1,r1,#1              ;621
00035e  b2c9              UXTB     r1,r1                 ;621
000360  2904              CMP      r1,#4                 ;621
000362  d3f7              BCC      |L1.852|
000364  6869              LDR      r1,[r5,#4]            ;624
000366  6031              STR      r1,[r6,#0]            ;624
000368  f7fff7ff          BL       OS_CPU_SR_Restore
00036c  2000              MOVS     r0,#0                 ;626
00036e  bd70              POP      {r4-r6,pc}
;;;628    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

                  |L1.880|
000370  00000000          DCD      OSIntNesting
                  |L1.884|
000374  00000000          DCD      OSEventFreeList
                  |L1.888|
000378  00000000          DCD      OSLockNesting
                  |L1.892|
00037c  00000000          DCD      OSTCBCur
