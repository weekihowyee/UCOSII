; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\os_task.o --depend=.\output\os_task.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\os_task.crf ..\..\..\..\..\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;51     INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
;;;52     {
000000  e92de92d          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;53     #if (OS_EVENT_EN)
;;;54         OS_EVENT  *pevent;
;;;55     #if (OS_EVENT_MULTI_EN > 0)
;;;56         OS_EVENT **pevents;
;;;57     #endif
;;;58     #endif
;;;59         OS_TCB    *ptcb;
;;;60         INT8U      y_new;
;;;61         INT8U      x_new;
;;;62         INT8U      y_old;
;;;63     #if OS_LOWEST_PRIO <= 63
;;;64         INT8U      bity_new;
;;;65         INT8U      bitx_new;
;;;66         INT8U      bity_old;
;;;67         INT8U      bitx_old;
;;;68     #else
;;;69         INT16U     bity_new;
;;;70         INT16U     bitx_new;
;;;71         INT16U     bity_old;
;;;72         INT16U     bitx_old;
;;;73     #endif
;;;74     #if OS_CRITICAL_METHOD == 3
;;;75         OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
;;;76     #endif
;;;77     
;;;78     
;;;79     /*$PAGE*/
;;;80     #if OS_ARG_CHK_EN > 0
;;;81         if (oldprio >= OS_LOWEST_PRIO) {
;;;82             if (oldprio != OS_PRIO_SELF) {
;;;83                 return (OS_ERR_PRIO_INVALID);
;;;84             }
;;;85         }
;;;86         if (newprio >= OS_LOWEST_PRIO) {
;;;87             return (OS_ERR_PRIO_INVALID);
;;;88         }
;;;89     #endif
;;;90         OS_ENTER_CRITICAL();
000008  f7fff7ff          BL       OS_CPU_SR_Save
;;;91         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
00000c  49fa              LDR      r1,|L1.1016|
00000e  f851f851          LDR      r2,[r1,r7,LSL #2]
000012  b122              CBZ      r2,|L1.30|
;;;92             OS_EXIT_CRITICAL();
000014  f7fff7ff          BL       OS_CPU_SR_Restore
;;;93             return (OS_ERR_PRIO_EXIST);
000018  2028              MOVS     r0,#0x28
                  |L1.26|
;;;94         }
;;;95         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;96             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;97         }
;;;98         ptcb = OSTCBPrioTbl[oldprio];
;;;99         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_PRIO);
;;;102        }
;;;103        if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;104            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;105            return (OS_ERR_TASK_NOT_EXIST);
;;;106        }
;;;107    #if OS_LOWEST_PRIO <= 63
;;;108        y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
;;;109        x_new                 = (INT8U)(newprio & 0x07);
;;;110        bity_new              = (INT8U)(1 << y_new);
;;;111        bitx_new              = (INT8U)(1 << x_new);
;;;112    #else
;;;113        y_new                 = (INT8U)((newprio >> 4) & 0x0F);
;;;114        x_new                 = (INT8U)( newprio & 0x0F);
;;;115        bity_new              = (INT16U)(1 << y_new);
;;;116        bitx_new              = (INT16U)(1 << x_new);
;;;117    #endif
;;;118    
;;;119        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;120        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;121        y_old                 =  ptcb->OSTCBY;
;;;122        bity_old              =  ptcb->OSTCBBitY;
;;;123        bitx_old              =  ptcb->OSTCBBitX;
;;;124        if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
;;;125             OSRdyTbl[y_old] &= ~bitx_old;
;;;126             if (OSRdyTbl[y_old] == 0) {
;;;127                 OSRdyGrp &= ~bity_old;
;;;128             }
;;;129             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;130             OSRdyTbl[y_new] |= bitx_new;
;;;131        }
;;;132    
;;;133    #if (OS_EVENT_EN)
;;;134        pevent = ptcb->OSTCBEventPtr;
;;;135        if (pevent != (OS_EVENT *)0) {
;;;136            pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
;;;137            if (pevent->OSEventTbl[y_old] == 0) {
;;;138                pevent->OSEventGrp    &= ~bity_old;
;;;139            }
;;;140            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;141            pevent->OSEventTbl[y_new] |= bitx_new;
;;;142        }
;;;143    #if (OS_EVENT_MULTI_EN > 0)
;;;144        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;145            pevents =  ptcb->OSTCBEventMultiPtr;
;;;146            pevent  = *pevents;
;;;147            while (pevent != (OS_EVENT *)0) {
;;;148                pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
;;;149                if (pevent->OSEventTbl[y_old] == 0) {
;;;150                    pevent->OSEventGrp    &= ~bity_old;
;;;151                }
;;;152                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;153                pevent->OSEventTbl[y_new] |= bitx_new;
;;;154                pevents++;
;;;155                pevent                     = *pevents;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #endif
;;;160    
;;;161        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;162        ptcb->OSTCBY    = y_new;
;;;163        ptcb->OSTCBX    = x_new;
;;;164        ptcb->OSTCBBitY = bity_new;
;;;165        ptcb->OSTCBBitX = bitx_new;
;;;166        OS_EXIT_CRITICAL();
;;;167        if (OSRunning == OS_TRUE) {
;;;168            OS_Sched();                                         /* Find new highest priority task          */
;;;169        }
;;;170        return (OS_ERR_NONE);
;;;171    }
00001a  e8bde8bd          POP      {r4-r12,pc}
                  |L1.30|
00001e  2cff              CMP      r4,#0xff              ;95
000020  d103              BNE      |L1.42|
000022  4af6              LDR      r2,|L1.1020|
000024  6812              LDR      r2,[r2,#0]            ;96  ; OSTCBCur
000026  f892f892          LDRB     r4,[r2,#0x32]         ;96
                  |L1.42|
00002a  f851f851          LDR      r2,[r1,r4,LSL #2]     ;98
00002e  b91a              CBNZ     r2,|L1.56|
000030  f7fff7ff          BL       OS_CPU_SR_Restore
000034  2029              MOVS     r0,#0x29              ;101
000036  e7f0              B        |L1.26|
                  |L1.56|
000038  2a01              CMP      r2,#1                 ;103
00003a  d103              BNE      |L1.68|
00003c  f7fff7ff          BL       OS_CPU_SR_Restore
000040  2043              MOVS     r0,#0x43              ;105
000042  e7ea              B        |L1.26|
                  |L1.68|
000044  08fb              LSRS     r3,r7,#3              ;108
000046  f007f007          AND      r10,r7,#7             ;109
00004a  2501              MOVS     r5,#1                 ;110
00004c  fa05fa05          LSL      r6,r5,r3              ;110
000050  b2f6              UXTB     r6,r6                 ;110
000052  fa05fa05          LSL      r5,r5,r10             ;111
000056  f005f005          AND      r12,r5,#0xff          ;111
00005a  2500              MOVS     r5,#0                 ;119
00005c  f841f841          STR      r5,[r1,r4,LSL #2]     ;119
000060  f841f841          STR      r2,[r1,r7,LSL #2]     ;120
000064  f892f892          LDRB     r5,[r2,#0x34]         ;121
000068  f892f892          LDRB     r9,[r2,#0x36]         ;122
00006c  f892f892          LDRB     lr,[r2,#0x35]         ;123
000070  4ce3              LDR      r4,|L1.1024|
000072  5d61              LDRB     r1,[r4,r5]            ;124
000074  ea11ea11          TST      r1,lr                 ;124
000078  d015              BEQ      |L1.166|
00007a  ea21ea21          BIC      r1,r1,lr              ;125
00007e  5561              STRB     r1,[r4,r5]            ;125
000080  5d61              LDRB     r1,[r4,r5]            ;126
000082  f8dff8df          LDR      r8,|L1.1028|
000086  b929              CBNZ     r1,|L1.148|
000088  f898f898          LDRB     r1,[r8,#0]            ;127  ; OSRdyGrp
00008c  ea21ea21          BIC      r1,r1,r9              ;127
000090  f888f888          STRB     r1,[r8,#0]            ;127  ; OSRdyGrp
                  |L1.148|
000094  f898f898          LDRB     r1,[r8,#0]            ;129  ; OSRdyGrp
000098  4331              ORRS     r1,r1,r6              ;129
00009a  f888f888          STRB     r1,[r8,#0]            ;129  ; OSRdyGrp
00009e  5ce1              LDRB     r1,[r4,r3]            ;130
0000a0  ea41ea41          ORR      r1,r1,r12             ;130
0000a4  54e1              STRB     r1,[r4,r3]            ;130
                  |L1.166|
0000a6  69d1              LDR      r1,[r2,#0x1c]         ;134
0000a8  b1a1              CBZ      r1,|L1.212|
0000aa  194c              ADDS     r4,r1,r5              ;136
0000ac  f894f894          LDRB     r8,[r4,#0xb]          ;136
0000b0  ea28ea28          BIC      r8,r8,lr              ;136
0000b4  f884f884          STRB     r8,[r4,#0xb]          ;136
0000b8  7ae4              LDRB     r4,[r4,#0xb]          ;137
0000ba  b91c              CBNZ     r4,|L1.196|
0000bc  7a8c              LDRB     r4,[r1,#0xa]          ;138
0000be  ea24ea24          BIC      r4,r4,r9              ;138
0000c2  728c              STRB     r4,[r1,#0xa]          ;138
                  |L1.196|
0000c4  7a8c              LDRB     r4,[r1,#0xa]          ;140
0000c6  4334              ORRS     r4,r4,r6              ;140
0000c8  728c              STRB     r4,[r1,#0xa]          ;140
0000ca  4419              ADD      r1,r1,r3              ;141
0000cc  7acc              LDRB     r4,[r1,#0xb]          ;141
0000ce  ea44ea44          ORR      r4,r4,r12             ;141
0000d2  72cc              STRB     r4,[r1,#0xb]          ;141
                  |L1.212|
0000d4  6a14              LDR      r4,[r2,#0x20]         ;144
0000d6  b32c              CBZ      r4,|L1.292|
0000d8  6821              LDR      r1,[r4,#0]            ;146
0000da  e021              B        |L1.288|
                  |L1.220|
0000dc  eb01eb01          ADD      r8,r1,r5              ;148
0000e0  f898f898          LDRB     r11,[r8,#0xb]         ;148
0000e4  ea2bea2b          BIC      r11,r11,lr            ;148
0000e8  f888f888          STRB     r11,[r8,#0xb]         ;148
0000ec  f898f898          LDRB     r8,[r8,#0xb]          ;149
0000f0  f1b8f1b8          CMP      r8,#0                 ;149
0000f4  d105              BNE      |L1.258|
0000f6  f891f891          LDRB     r8,[r1,#0xa]          ;150
0000fa  ea28ea28          BIC      r8,r8,r9              ;150
0000fe  f881f881          STRB     r8,[r1,#0xa]          ;150
                  |L1.258|
000102  f891f891          LDRB     r8,[r1,#0xa]          ;152
000106  ea48ea48          ORR      r8,r8,r6              ;152
00010a  f881f881          STRB     r8,[r1,#0xa]          ;152
00010e  4419              ADD      r1,r1,r3              ;153
000110  f891f891          LDRB     r8,[r1,#0xb]          ;153
000114  ea48ea48          ORR      r8,r8,r12             ;153
000118  f881f881          STRB     r8,[r1,#0xb]          ;153
00011c  f854f854          LDR      r1,[r4,#4]!           ;155
                  |L1.288|
000120  2900              CMP      r1,#0                 ;147
000122  d1db              BNE      |L1.220|
                  |L1.292|
000124  f802f802          STRB     r7,[r2,#0x32]!        ;161
000128  7093              STRB     r3,[r2,#2]            ;162
00012a  f882f882          STRB     r10,[r2,#1]           ;163
00012e  7116              STRB     r6,[r2,#4]            ;164
000130  f882f882          STRB     r12,[r2,#3]           ;165
000134  f7fff7ff          BL       OS_CPU_SR_Restore
000138  48b3              LDR      r0,|L1.1032|
00013a  7800              LDRB     r0,[r0,#0]            ;167  ; OSRunning
00013c  2801              CMP      r0,#1                 ;167
00013e  d101              BNE      |L1.324|
000140  f7fff7ff          BL       OS_Sched
                  |L1.324|
000144  2000              MOVS     r0,#0                 ;170
000146  e768              B        |L1.26|
;;;172    #endif
                          ENDP

                  OSTaskCreate PROC
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
;;;216    {
000148  e92de92d          PUSH     {r1-r9,lr}
00014c  4605              MOV      r5,r0
00014e  460f              MOV      r7,r1
000150  4690              MOV      r8,r2
000152  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;227            return (OS_ERR_PRIO_INVALID);
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
000154  f7fff7ff          BL       OS_CPU_SR_Save
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
000158  49ac              LDR      r1,|L1.1036|
00015a  7809              LDRB     r1,[r1,#0]  ; OSIntNesting
00015c  b121              CBZ      r1,|L1.360|
;;;232            OS_EXIT_CRITICAL();
00015e  f7fff7ff          BL       OS_CPU_SR_Restore
;;;233            return (OS_ERR_TASK_CREATE_ISR);
000162  203c              MOVS     r0,#0x3c
                  |L1.356|
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
000164  e8bde8bd          POP      {r1-r9,pc}
                  |L1.360|
000168  4ea3              LDR      r6,|L1.1016|
00016a  f856f856          LDR      r1,[r6,r4,LSL #2]     ;235
00016e  bb29              CBNZ     r1,|L1.444|
000170  2101              MOVS     r1,#1                 ;236
000172  f846f846          STR      r1,[r6,r4,LSL #2]     ;236
000176  f7fff7ff          BL       OS_CPU_SR_Restore
00017a  2300              MOVS     r3,#0                 ;239
00017c  4642              MOV      r2,r8                 ;239
00017e  4639              MOV      r1,r7                 ;239
000180  4628              MOV      r0,r5                 ;239
000182  f7fff7ff          BL       OSTaskStkInit
000186  2300              MOVS     r3,#0                 ;240
000188  4601              MOV      r1,r0                 ;240
00018a  9300              STR      r3,[sp,#0]            ;240
00018c  9301              STR      r3,[sp,#4]            ;240
00018e  461a              MOV      r2,r3                 ;240
000190  4620              MOV      r0,r4                 ;240
000192  9302              STR      r3,[sp,#8]            ;240
000194  f7fff7ff          BL       OS_TCBInit
000198  4605              MOV      r5,r0                 ;240
00019a  b935              CBNZ     r5,|L1.426|
00019c  489a              LDR      r0,|L1.1032|
00019e  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
0001a0  2801              CMP      r0,#1                 ;242
0001a2  d109              BNE      |L1.440|
0001a4  f7fff7ff          BL       OS_Sched
0001a8  e006              B        |L1.440|
                  |L1.426|
0001aa  f7fff7ff          BL       OS_CPU_SR_Save
0001ae  2100              MOVS     r1,#0                 ;247
0001b0  f846f846          STR      r1,[r6,r4,LSL #2]     ;247
0001b4  f7fff7ff          BL       OS_CPU_SR_Restore
                  |L1.440|
0001b8  4628              MOV      r0,r5                 ;250
0001ba  e7d3              B        |L1.356|
                  |L1.444|
0001bc  f7fff7ff          BL       OS_CPU_SR_Restore
0001c0  2028              MOVS     r0,#0x28              ;253
0001c2  e7cf              B        |L1.356|
;;;255    #endif
                          ENDP

                  OS_TaskStkClr PROC
;;;1077   {
;;;1078       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
0001c4  07d3              LSLS     r3,r2,#31
0001c6  d007              BEQ      |L1.472|
;;;1079           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
0001c8  0792              LSLS     r2,r2,#30
0001ca  d505              BPL      |L1.472|
0001cc  2200              MOVS     r2,#0
0001ce  e001              B        |L1.468|
                  |L1.464|
;;;1080   #if OS_STK_GROWTH == 1
;;;1081               while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
;;;1082                   size--;
0001d0  1e49              SUBS     r1,r1,#1
;;;1083                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
0001d2  c004              STM      r0!,{r2}
                  |L1.468|
0001d4  2900              CMP      r1,#0                 ;1081
0001d6  d1fb              BNE      |L1.464|
                  |L1.472|
;;;1084               }
;;;1085   #else
;;;1086               while (size > 0) {                         /* Stack grows from LOW to HIGH memory          */
;;;1087                   size--;
;;;1088                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1089               }
;;;1090   #endif
;;;1091           }
;;;1092       }
;;;1093   }
0001d8  4770              BX       lr
;;;1094   
                          ENDP

                  OSTaskCreateExt PROC
;;;336                            INT16U   opt)
;;;337    {
0001da  e92de92d          PUSH     {r1-r11,lr}
0001de  e9dde9dd          LDRD     r10,r11,[sp,#0x34]
0001e2  4606              MOV      r6,r0
0001e4  460f              MOV      r7,r1
0001e6  4690              MOV      r8,r2
0001e8  461c              MOV      r4,r3
0001ea  f8ddf8dd          LDR      r9,[sp,#0x30]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;348            return (OS_ERR_PRIO_INVALID);
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
0001ee  f7fff7ff          BL       OS_CPU_SR_Save
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
0001f2  4986              LDR      r1,|L1.1036|
0001f4  7809              LDRB     r1,[r1,#0]  ; OSIntNesting
0001f6  b121              CBZ      r1,|L1.514|
;;;353            OS_EXIT_CRITICAL();
0001f8  f7fff7ff          BL       OS_CPU_SR_Restore
;;;354            return (OS_ERR_TASK_CREATE_ISR);
0001fc  203c              MOVS     r0,#0x3c
                  |L1.510|
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
0001fe  e8bde8bd          POP      {r1-r11,pc}
                  |L1.514|
000202  4d7d              LDR      r5,|L1.1016|
000204  f855f855          LDR      r1,[r5,r4,LSL #2]     ;356
000208  bb61              CBNZ     r1,|L1.612|
00020a  2101              MOVS     r1,#1                 ;357
00020c  f845f845          STR      r1,[r5,r4,LSL #2]     ;357
000210  f7fff7ff          BL       OS_CPU_SR_Restore
000214  4659              MOV      r1,r11                ;362
000216  4650              MOV      r0,r10                ;362
000218  9a10              LDR      r2,[sp,#0x40]         ;362
00021a  f7fff7ff          BL       OS_TaskStkClr
00021e  4642              MOV      r2,r8                 ;365
000220  4639              MOV      r1,r7                 ;365
000222  4630              MOV      r0,r6                 ;365
000224  9b10              LDR      r3,[sp,#0x40]         ;365
000226  f7fff7ff          BL       OSTaskStkInit
00022a  e9dde9dd          LDRD     r2,r3,[sp,#0x3c]      ;366
00022e  e9cde9cd          STRD     r11,r2,[sp,#0]        ;366
000232  9302              STR      r3,[sp,#8]            ;366
000234  4601              MOV      r1,r0                 ;366
000236  464b              MOV      r3,r9                 ;366
000238  4652              MOV      r2,r10                ;366
00023a  4620              MOV      r0,r4                 ;366
00023c  f7fff7ff          BL       OS_TCBInit
000240  4606              MOV      r6,r0                 ;366
000242  b936              CBNZ     r6,|L1.594|
000244  4870              LDR      r0,|L1.1032|
000246  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
000248  2801              CMP      r0,#1                 ;368
00024a  d109              BNE      |L1.608|
00024c  f7fff7ff          BL       OS_Sched
000250  e006              B        |L1.608|
                  |L1.594|
000252  f7fff7ff          BL       OS_CPU_SR_Save
000256  2100              MOVS     r1,#0                 ;373
000258  f845f845          STR      r1,[r5,r4,LSL #2]     ;373
00025c  f7fff7ff          BL       OS_CPU_SR_Restore
                  |L1.608|
000260  4630              MOV      r0,r6                 ;376
000262  e7cc              B        |L1.510|
                  |L1.612|
000264  f7fff7ff          BL       OS_CPU_SR_Restore
000268  2028              MOVS     r0,#0x28              ;379
00026a  e7c8              B        |L1.510|
;;;381    #endif
                          ENDP

                  OSTaskDel PROC
;;;420    INT8U  OSTaskDel (INT8U prio)
;;;421    {
00026c  e92de92d          PUSH     {r4-r10,lr}
000270  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
000272  4866              LDR      r0,|L1.1036|
000274  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000276  b110              CBZ      r0,|L1.638|
;;;433            return (OS_ERR_TASK_DEL_ISR);
000278  2040              MOVS     r0,#0x40
                  |L1.634|
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
00027a  e8bde8bd          POP      {r4-r10,pc}
                  |L1.638|
00027e  2d1f              CMP      r5,#0x1f              ;435
000280  d101              BNE      |L1.646|
000282  203e              MOVS     r0,#0x3e              ;436
000284  e7f9              B        |L1.634|
                  |L1.646|
000286  f7fff7ff          BL       OS_CPU_SR_Save
00028a  4606              MOV      r6,r0                 ;447
00028c  2dff              CMP      r5,#0xff              ;448
00028e  d103              BNE      |L1.664|
000290  485a              LDR      r0,|L1.1020|
000292  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
000294  f890f890          LDRB     r5,[r0,#0x32]         ;449
                  |L1.664|
000298  4f57              LDR      r7,|L1.1016|
00029a  f857f857          LDR      r4,[r7,r5,LSL #2]     ;451
00029e  b924              CBNZ     r4,|L1.682|
0002a0  4630              MOV      r0,r6                 ;453
0002a2  f7fff7ff          BL       OS_CPU_SR_Restore
0002a6  2043              MOVS     r0,#0x43              ;454
0002a8  e7e7              B        |L1.634|
                  |L1.682|
0002aa  2c01              CMP      r4,#1                 ;456
0002ac  d104              BNE      |L1.696|
0002ae  4630              MOV      r0,r6                 ;457
0002b0  f7fff7ff          BL       OS_CPU_SR_Restore
0002b4  203d              MOVS     r0,#0x3d              ;458
0002b6  e7e0              B        |L1.634|
                  |L1.696|
0002b8  f814f814          LDRB     r0,[r4,#0x34]!        ;461
0002bc  4950              LDR      r1,|L1.1024|
0002be  7863              LDRB     r3,[r4,#1]            ;461
0002c0  5c0a              LDRB     r2,[r1,r0]            ;461
0002c2  439a              BICS     r2,r2,r3              ;461
0002c4  540a              STRB     r2,[r1,r0]            ;461
0002c6  f814f814          LDRB     r0,[r4],#-0x34        ;462
0002ca  5c08              LDRB     r0,[r1,r0]            ;462
0002cc  b928              CBNZ     r0,|L1.730|
0002ce  494d              LDR      r1,|L1.1028|
0002d0  f894f894          LDRB     r2,[r4,#0x36]         ;463
0002d4  7808              LDRB     r0,[r1,#0]            ;463  ; OSRdyGrp
0002d6  4390              BICS     r0,r0,r2              ;463
0002d8  7008              STRB     r0,[r1,#0]            ;463  ; OSRdyGrp
                  |L1.730|
0002da  69e1              LDR      r1,[r4,#0x1c]         ;467
0002dc  b111              CBZ      r1,|L1.740|
0002de  4620              MOV      r0,r4                 ;468
0002e0  f7fff7ff          BL       OS_EventTaskRemove
                  |L1.740|
0002e4  6a21              LDR      r1,[r4,#0x20]         ;471
0002e6  b111              CBZ      r1,|L1.750|
0002e8  4620              MOV      r0,r4                 ;472
0002ea  f7fff7ff          BL       OS_EventTaskRemoveMulti
                  |L1.750|
0002ee  6aa0              LDR      r0,[r4,#0x28]         ;478
0002f0  b108              CBZ      r0,|L1.758|
0002f2  f7fff7ff          BL       OS_FlagUnlink
                  |L1.758|
0002f6  f04ff04f          MOV      r8,#0                 ;484
0002fa  f8a4f8a4          STRH     r8,[r4,#0x2e]         ;484
0002fe  f884f884          STRB     r8,[r4,#0x30]         ;485
000302  f884f884          STRB     r8,[r4,#0x31]         ;486
000306  f8dff8df          LDR      r9,|L1.1040|
00030a  f899f899          LDRB     r0,[r9,#0]            ;487  ; OSLockNesting
00030e  28ff              CMP      r0,#0xff              ;487
000310  d202              BCS      |L1.792|
000312  1c40              ADDS     r0,r0,#1              ;488
000314  f889f889          STRB     r0,[r9,#0]            ;488  ; OSLockNesting
                  |L1.792|
000318  4630              MOV      r0,r6                 ;490
00031a  f7fff7ff          BL       OS_CPU_SR_Restore
00031e  f7fff7ff          BL       OS_Dummy
000322  f7fff7ff          BL       OS_CPU_SR_Save
000326  4606              MOV      r6,r0                 ;492
000328  f899f899          LDRB     r1,[r9,#0]            ;493  ; OSLockNesting
00032c  b111              CBZ      r1,|L1.820|
00032e  1e49              SUBS     r1,r1,#1              ;494
000330  f889f889          STRB     r1,[r9,#0]            ;494  ; OSLockNesting
                  |L1.820|
000334  4620              MOV      r0,r4                 ;496
000336  f7fff7ff          BL       OSTaskDelHook
00033a  4936              LDR      r1,|L1.1044|
00033c  7808              LDRB     r0,[r1,#0]            ;497  ; OSTaskCtr
00033e  1e40              SUBS     r0,r0,#1              ;497
000340  7008              STRB     r0,[r1,#0]            ;497  ; OSTaskCtr
000342  f847f847          STR      r8,[r7,r5,LSL #2]     ;498
000346  69a1              LDR      r1,[r4,#0x18]         ;499
000348  b931              CBNZ     r1,|L1.856|
00034a  6960              LDR      r0,[r4,#0x14]         ;500
00034c  f8c0f8c0          STR      r8,[r0,#0x18]         ;500
000350  4931              LDR      r1,|L1.1048|
000352  6960              LDR      r0,[r4,#0x14]         ;501
000354  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
000356  e004              B        |L1.866|
                  |L1.856|
000358  6960              LDR      r0,[r4,#0x14]         ;503
00035a  6148              STR      r0,[r1,#0x14]         ;503
00035c  e9d4e9d4          LDRD     r1,r0,[r4,#0x14]      ;504
000360  6188              STR      r0,[r1,#0x18]         ;504
                  |L1.866|
000362  482e              LDR      r0,|L1.1052|
000364  6801              LDR      r1,[r0,#0]            ;506  ; OSTCBFreeList
000366  6161              STR      r1,[r4,#0x14]         ;506
000368  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
00036a  203f              MOVS     r0,#0x3f              ;509
00036c  f884f884          STRB     r0,[r4,#0x4c]         ;509
000370  f884f884          STRB     r8,[r4,#0x4d]         ;510
000374  4630              MOV      r0,r6                 ;512
000376  f7fff7ff          BL       OS_CPU_SR_Restore
00037a  4823              LDR      r0,|L1.1032|
00037c  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
00037e  2801              CMP      r0,#1                 ;513
000380  d101              BNE      |L1.902|
000382  f7fff7ff          BL       OS_Sched
                  |L1.902|
000386  2000              MOVS     r0,#0                 ;516
000388  e777              B        |L1.634|
;;;518    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;567    INT8U  OSTaskDelReq (INT8U prio)
;;;568    {
00038a  b510              PUSH     {r4,lr}
00038c  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
00038e  2c1f              CMP      r4,#0x1f
000390  d101              BNE      |L1.918|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
000392  203e              MOVS     r0,#0x3e
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        ptcb = OSTCBPrioTbl[prio];
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;604        OS_EXIT_CRITICAL();
;;;605        return (OS_ERR_NONE);
;;;606    }
000394  bd10              POP      {r4,pc}
                  |L1.918|
000396  2cff              CMP      r4,#0xff              ;587
000398  d109              BNE      |L1.942|
00039a  f7fff7ff          BL       OS_CPU_SR_Save
00039e  4917              LDR      r1,|L1.1020|
0003a0  6809              LDR      r1,[r1,#0]            ;589  ; OSTCBCur
0003a2  f891f891          LDRB     r4,[r1,#0x37]         ;589
0003a6  f7fff7ff          BL       OS_CPU_SR_Restore
0003aa  4620              MOV      r0,r4                 ;591
0003ac  bd10              POP      {r4,pc}
                  |L1.942|
0003ae  f7fff7ff          BL       OS_CPU_SR_Save
0003b2  4911              LDR      r1,|L1.1016|
0003b4  f851f851          LDR      r1,[r1,r4,LSL #2]     ;594
0003b8  b919              CBNZ     r1,|L1.962|
0003ba  f7fff7ff          BL       OS_CPU_SR_Restore
0003be  2043              MOVS     r0,#0x43              ;597
0003c0  bd10              POP      {r4,pc}
                  |L1.962|
0003c2  2901              CMP      r1,#1                 ;599
0003c4  d103              BNE      |L1.974|
0003c6  f7fff7ff          BL       OS_CPU_SR_Restore
0003ca  203d              MOVS     r0,#0x3d              ;601
0003cc  bd10              POP      {r4,pc}
                  |L1.974|
0003ce  223f              MOVS     r2,#0x3f              ;603
0003d0  f881f881          STRB     r2,[r1,#0x37]         ;603
0003d4  f7fff7ff          BL       OS_CPU_SR_Restore
0003d8  2000              MOVS     r0,#0                 ;605
0003da  bd10              POP      {r4,pc}
;;;607    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
;;;636    {
0003dc  e92de92d          PUSH     {r4-r8,lr}
0003e0  4606              MOV      r6,r0
0003e2  460f              MOV      r7,r1
0003e4  4615              MOV      r5,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
;;;647            return (0);
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
0003e6  4809              LDR      r0,|L1.1036|
0003e8  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0003ea  b1c8              CBZ      r0,|L1.1056|
;;;661            *perr = OS_ERR_NAME_GET_ISR;
0003ec  2011              MOVS     r0,#0x11
0003ee  7028              STRB     r0,[r5,#0]
;;;662            return (0);
0003f0  2000              MOVS     r0,#0
                  |L1.1010|
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
0003f2  e8bde8bd          POP      {r4-r8,pc}
0003f6  0000              DCW      0x0000
                  |L1.1016|
0003f8  00000000          DCD      OSTCBPrioTbl
                  |L1.1020|
0003fc  00000000          DCD      OSTCBCur
                  |L1.1024|
000400  00000000          DCD      OSRdyTbl
                  |L1.1028|
000404  00000000          DCD      OSRdyGrp
                  |L1.1032|
000408  00000000          DCD      OSRunning
                  |L1.1036|
00040c  00000000          DCD      OSIntNesting
                  |L1.1040|
000410  00000000          DCD      OSLockNesting
                  |L1.1044|
000414  00000000          DCD      OSTaskCtr
                  |L1.1048|
000418  00000000          DCD      OSTCBList
                  |L1.1052|
00041c  00000000          DCD      OSTCBFreeList
                  |L1.1056|
000420  f7fff7ff          BL       OS_CPU_SR_Save
000424  4604              MOV      r4,r0                 ;664
000426  2eff              CMP      r6,#0xff              ;665
000428  d103              BNE      |L1.1074|
00042a  489c              LDR      r0,|L1.1692|
00042c  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
00042e  f890f890          LDRB     r6,[r0,#0x32]         ;666
                  |L1.1074|
000432  489b              LDR      r0,|L1.1696|
000434  f850f850          LDR      r1,[r0,r6,LSL #2]     ;668
000438  2643              MOVS     r6,#0x43              ;669
00043a  b929              CBNZ     r1,|L1.1096|
00043c  4620              MOV      r0,r4                 ;670
00043e  f7fff7ff          BL       OS_CPU_SR_Restore
000442  702e              STRB     r6,[r5,#0]            ;671
000444  2000              MOVS     r0,#0                 ;672
000446  e7d4              B        |L1.1010|
                  |L1.1096|
000448  2901              CMP      r1,#1                 ;674
00044a  d105              BNE      |L1.1112|
00044c  4620              MOV      r0,r4                 ;675
00044e  f7fff7ff          BL       OS_CPU_SR_Restore
000452  702e              STRB     r6,[r5,#0]            ;676
000454  2000              MOVS     r0,#0                 ;677
000456  e7cc              B        |L1.1010|
                  |L1.1112|
000458  314c              ADDS     r1,r1,#0x4c           ;679
00045a  4638              MOV      r0,r7                 ;679
00045c  f7fff7ff          BL       OS_StrCopy
000460  4606              MOV      r6,r0                 ;679
000462  4620              MOV      r0,r4                 ;680
000464  f7fff7ff          BL       OS_CPU_SR_Restore
000468  2000              MOVS     r0,#0                 ;681
00046a  7028              STRB     r0,[r5,#0]            ;681
00046c  4630              MOV      r0,r6                 ;682
00046e  e7c0              B        |L1.1010|
;;;684    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
;;;715    {
000470  e92de92d          PUSH     {r4-r8,lr}
000474  4605              MOV      r5,r0
000476  460f              MOV      r7,r1
000478  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
00047a  488a              LDR      r0,|L1.1700|
00047c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00047e  b110              CBZ      r0,|L1.1158|
;;;740            *perr = OS_ERR_NAME_SET_ISR;
000480  2012              MOVS     r0,#0x12
000482  7020              STRB     r0,[r4,#0]
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
000484  e7b5              B        |L1.1010|
                  |L1.1158|
000486  f7fff7ff          BL       OS_CPU_SR_Save
00048a  4606              MOV      r6,r0                 ;743
00048c  2dff              CMP      r5,#0xff              ;744
00048e  d103              BNE      |L1.1176|
000490  4882              LDR      r0,|L1.1692|
000492  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
000494  f890f890          LDRB     r5,[r0,#0x32]         ;745
                  |L1.1176|
000498  4881              LDR      r0,|L1.1696|
00049a  f850f850          LDR      r5,[r0,r5,LSL #2]     ;747
00049e  f04ff04f          MOV      r8,#0x43              ;748
0004a2  b92d              CBNZ     r5,|L1.1200|
0004a4  4630              MOV      r0,r6                 ;749
0004a6  f7fff7ff          BL       OS_CPU_SR_Restore
0004aa  f884f884          STRB     r8,[r4,#0]            ;750
0004ae  e7a0              B        |L1.1010|
                  |L1.1200|
0004b0  2d01              CMP      r5,#1                 ;753
0004b2  d105              BNE      |L1.1216|
0004b4  4630              MOV      r0,r6                 ;754
0004b6  f7fff7ff          BL       OS_CPU_SR_Restore
0004ba  f884f884          STRB     r8,[r4,#0]            ;755
0004be  e798              B        |L1.1010|
                  |L1.1216|
0004c0  4638              MOV      r0,r7                 ;758
0004c2  f7fff7ff          BL       OS_StrLen
0004c6  280f              CMP      r0,#0xf               ;759
0004c8  d905              BLS      |L1.1238|
0004ca  4630              MOV      r0,r6                 ;760
0004cc  f7fff7ff          BL       OS_CPU_SR_Restore
0004d0  2041              MOVS     r0,#0x41              ;761
0004d2  7020              STRB     r0,[r4,#0]            ;761
0004d4  e78d              B        |L1.1010|
                  |L1.1238|
0004d6  4639              MOV      r1,r7                 ;764
0004d8  f105f105          ADD      r0,r5,#0x4c           ;764
0004dc  f7fff7ff          BL       OS_StrCopy
0004e0  4630              MOV      r0,r6                 ;765
0004e2  f7fff7ff          BL       OS_CPU_SR_Restore
0004e6  2000              MOVS     r0,#0                 ;766
0004e8  7020              STRB     r0,[r4,#0]            ;766
0004ea  e782              B        |L1.1010|
;;;768    #endif
                          ENDP

                  OSTaskResume PROC
;;;790    INT8U  OSTaskResume (INT8U prio)
;;;791    {
0004ec  b510              PUSH     {r4,lr}
0004ee  4604              MOV      r4,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;801            return (OS_ERR_PRIO_INVALID);
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
0004f0  f7fff7ff          BL       OS_CPU_SR_Save
;;;805        ptcb = OSTCBPrioTbl[prio];
0004f4  496a              LDR      r1,|L1.1696|
0004f6  f851f851          LDR      r1,[r1,r4,LSL #2]
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
0004fa  b919              CBNZ     r1,|L1.1284|
;;;807            OS_EXIT_CRITICAL();
0004fc  f7fff7ff          BL       OS_CPU_SR_Restore
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
000500  2046              MOVS     r0,#0x46
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
;;;829            }
;;;830            return (OS_ERR_NONE);
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
000502  bd10              POP      {r4,pc}
                  |L1.1284|
000504  2901              CMP      r1,#1                 ;810
000506  d103              BNE      |L1.1296|
000508  f7fff7ff          BL       OS_CPU_SR_Restore
00050c  2043              MOVS     r0,#0x43              ;812
00050e  bd10              POP      {r4,pc}
                  |L1.1296|
000510  f891f891          LDRB     r2,[r1,#0x30]         ;814
000514  0713              LSLS     r3,r2,#28             ;814
000516  d524              BPL      |L1.1378|
000518  f022f022          BIC      r2,r2,#8              ;815
00051c  f881f881          STRB     r2,[r1,#0x30]         ;815
000520  f891f891          LDRB     r2,[r1,#0x30]         ;816
000524  b9ca              CBNZ     r2,|L1.1370|
000526  8dca              LDRH     r2,[r1,#0x2e]         ;817
000528  b9a2              CBNZ     r2,|L1.1364|
00052a  4b5f              LDR      r3,|L1.1704|
00052c  3134              ADDS     r1,r1,#0x34           ;818
00052e  788a              LDRB     r2,[r1,#2]            ;818
000530  781c              LDRB     r4,[r3,#0]            ;818  ; OSRdyGrp
000532  4322              ORRS     r2,r2,r4              ;818
000534  701a              STRB     r2,[r3,#0]            ;818  ; OSRdyGrp
000536  780a              LDRB     r2,[r1,#0]            ;819
000538  4b5c              LDR      r3,|L1.1708|
00053a  7849              LDRB     r1,[r1,#1]            ;819
00053c  5c9c              LDRB     r4,[r3,r2]            ;819
00053e  430c              ORRS     r4,r4,r1              ;819
000540  549c              STRB     r4,[r3,r2]            ;819
000542  f7fff7ff          BL       OS_CPU_SR_Restore
000546  485a              LDR      r0,|L1.1712|
000548  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
00054a  2801              CMP      r0,#1                 ;821
00054c  d107              BNE      |L1.1374|
00054e  f7fff7ff          BL       OS_Sched
000552  e004              B        |L1.1374|
                  |L1.1364|
000554  f7fff7ff          BL       OS_CPU_SR_Restore
000558  e001              B        |L1.1374|
                  |L1.1370|
00055a  f7fff7ff          BL       OS_CPU_SR_Restore
                  |L1.1374|
00055e  2000              MOVS     r0,#0                 ;830
000560  bd10              POP      {r4,pc}
                  |L1.1378|
000562  f7fff7ff          BL       OS_CPU_SR_Restore
000566  2044              MOVS     r0,#0x44              ;833
000568  bd10              POP      {r4,pc}
;;;835    #endif
                          ENDP

                  OSTaskStkChk PROC
;;;857    INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
;;;858    {
00056a  e92de92d          PUSH     {r4-r8,lr}
00056e  4604              MOV      r4,r0
000570  460e              MOV      r6,r1
;;;859        OS_TCB    *ptcb;
;;;860        OS_STK    *pchk;
;;;861        INT32U     nfree;
;;;862        INT32U     size;
;;;863    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;864        OS_CPU_SR  cpu_sr = 0;
;;;865    #endif
;;;866    
;;;867    
;;;868    
;;;869    #if OS_ARG_CHK_EN > 0
;;;870        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;871            if (prio != OS_PRIO_SELF) {
;;;872                return (OS_ERR_PRIO_INVALID);
;;;873            }
;;;874        }
;;;875        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;876            return (OS_ERR_PDATA_NULL);
;;;877        }
;;;878    #endif
;;;879        p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
000572  2000              MOVS     r0,#0
000574  6030              STR      r0,[r6,#0]
;;;880        p_stk_data->OSUsed = 0;
000576  6070              STR      r0,[r6,#4]
;;;881        OS_ENTER_CRITICAL();
000578  f7fff7ff          BL       OS_CPU_SR_Save
;;;882        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
00057c  2cff              CMP      r4,#0xff
00057e  d103              BNE      |L1.1416|
;;;883            prio = OSTCBCur->OSTCBPrio;
000580  4946              LDR      r1,|L1.1692|
000582  6809              LDR      r1,[r1,#0]  ; OSTCBCur
000584  f891f891          LDRB     r4,[r1,#0x32]
                  |L1.1416|
;;;884        }
;;;885        ptcb = OSTCBPrioTbl[prio];
000588  4945              LDR      r1,|L1.1696|
00058a  f851f851          LDR      r1,[r1,r4,LSL #2]
;;;886        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
00058e  b919              CBNZ     r1,|L1.1432|
;;;887            OS_EXIT_CRITICAL();
000590  f7fff7ff          BL       OS_CPU_SR_Restore
;;;888            return (OS_ERR_TASK_NOT_EXIST);
000594  2043              MOVS     r0,#0x43
;;;889        }
;;;890        if (ptcb == OS_TCB_RESERVED) {
;;;891            OS_EXIT_CRITICAL();
;;;892            return (OS_ERR_TASK_NOT_EXIST);
;;;893        }
;;;894        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
;;;895            OS_EXIT_CRITICAL();
;;;896            return (OS_ERR_TASK_OPT);
;;;897        }
;;;898        nfree = 0;
;;;899        size  = ptcb->OSTCBStkSize;
;;;900        pchk  = ptcb->OSTCBStkBottom;
;;;901        OS_EXIT_CRITICAL();
;;;902    #if OS_STK_GROWTH == 1
;;;903        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;904            nfree++;
;;;905        }
;;;906    #else
;;;907        while (*pchk-- == (OS_STK)0) {
;;;908            nfree++;
;;;909        }
;;;910    #endif
;;;911        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;912        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;913        return (OS_ERR_NONE);
;;;914    }
000596  e72c              B        |L1.1010|
                  |L1.1432|
000598  2901              CMP      r1,#1                 ;890
00059a  d103              BNE      |L1.1444|
00059c  f7fff7ff          BL       OS_CPU_SR_Restore
0005a0  2043              MOVS     r0,#0x43              ;892
0005a2  e726              B        |L1.1010|
                  |L1.1444|
0005a4  8a0a              LDRH     r2,[r1,#0x10]         ;894
0005a6  07d2              LSLS     r2,r2,#31             ;894
0005a8  d103              BNE      |L1.1458|
0005aa  f7fff7ff          BL       OS_CPU_SR_Restore
0005ae  2045              MOVS     r0,#0x45              ;896
0005b0  e71f              B        |L1.1010|
                  |L1.1458|
0005b2  2400              MOVS     r4,#0                 ;898
0005b4  68cf              LDR      r7,[r1,#0xc]          ;899
0005b6  688d              LDR      r5,[r1,#8]            ;900
0005b8  f7fff7ff          BL       OS_CPU_SR_Restore
0005bc  e000              B        |L1.1472|
                  |L1.1470|
0005be  1c64              ADDS     r4,r4,#1              ;904
                  |L1.1472|
0005c0  cd01              LDM      r5!,{r0}              ;903
0005c2  2800              CMP      r0,#0                 ;903
0005c4  d0fb              BEQ      |L1.1470|
0005c6  00a0              LSLS     r0,r4,#2              ;911
0005c8  6030              STR      r0,[r6,#0]            ;911
0005ca  1b38              SUBS     r0,r7,r4              ;912
0005cc  0080              LSLS     r0,r0,#2              ;912
0005ce  6070              STR      r0,[r6,#4]            ;912
0005d0  2000              MOVS     r0,#0                 ;913
0005d2  e70e              B        |L1.1010|
;;;915    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;941    INT8U  OSTaskSuspend (INT8U prio)
;;;942    {
0005d4  b570              PUSH     {r4-r6,lr}
0005d6  4605              MOV      r5,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
0005d8  f7fff7ff          BL       OS_CPU_SR_Save
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
0005dc  492f              LDR      r1,|L1.1692|
0005de  2dff              CMP      r5,#0xff
0005e0  d104              BNE      |L1.1516|
;;;964            prio = OSTCBCur->OSTCBPrio;
0005e2  6809              LDR      r1,[r1,#0]  ; OSTCBCur
0005e4  f891f891          LDRB     r5,[r1,#0x32]
;;;965            self = OS_TRUE;
0005e8  2401              MOVS     r4,#1
0005ea  e007              B        |L1.1532|
                  |L1.1516|
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
0005ec  6809              LDR      r1,[r1,#0]  ; OSTCBCur
0005ee  f891f891          LDRB     r1,[r1,#0x32]
0005f2  42a9              CMP      r1,r5
0005f4  d101              BNE      |L1.1530|
;;;967            self = OS_TRUE;
0005f6  2401              MOVS     r4,#1
0005f8  e000              B        |L1.1532|
                  |L1.1530|
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
0005fa  2400              MOVS     r4,#0
                  |L1.1532|
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
0005fc  4928              LDR      r1,|L1.1696|
0005fe  f851f851          LDR      r1,[r1,r5,LSL #2]
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000602  b919              CBNZ     r1,|L1.1548|
;;;973            OS_EXIT_CRITICAL();
000604  f7fff7ff          BL       OS_CPU_SR_Restore
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
000608  2048              MOVS     r0,#0x48
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
;;;982        if (OSRdyTbl[y] == 0) {
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
00060a  bd70              POP      {r4-r6,pc}
                  |L1.1548|
00060c  2901              CMP      r1,#1                 ;976
00060e  d103              BNE      |L1.1560|
000610  f7fff7ff          BL       OS_CPU_SR_Restore
000614  2043              MOVS     r0,#0x43              ;978
000616  bd70              POP      {r4-r6,pc}
                  |L1.1560|
000618  f891f891          LDRB     r2,[r1,#0x34]         ;980
00061c  4b23              LDR      r3,|L1.1708|
00061e  f891f891          LDRB     r6,[r1,#0x35]         ;981
000622  5c9d              LDRB     r5,[r3,r2]            ;981
000624  43b5              BICS     r5,r5,r6              ;981
000626  549d              STRB     r5,[r3,r2]            ;981
000628  5c9a              LDRB     r2,[r3,r2]            ;982
00062a  b92a              CBNZ     r2,|L1.1592|
00062c  4a1e              LDR      r2,|L1.1704|
00062e  f891f891          LDRB     r5,[r1,#0x36]         ;983
000632  7813              LDRB     r3,[r2,#0]            ;983  ; OSRdyGrp
000634  43ab              BICS     r3,r3,r5              ;983
000636  7013              STRB     r3,[r2,#0]            ;983  ; OSRdyGrp
                  |L1.1592|
000638  f811f811          LDRB     r2,[r1,#0x30]!        ;985
00063c  f042f042          ORR      r2,r2,#8              ;985
000640  700a              STRB     r2,[r1,#0]            ;985
000642  f7fff7ff          BL       OS_CPU_SR_Restore
000646  2c01              CMP      r4,#1                 ;987
000648  d101              BNE      |L1.1614|
00064a  f7fff7ff          BL       OS_Sched
                  |L1.1614|
00064e  2000              MOVS     r0,#0                 ;990
000650  bd70              POP      {r4-r6,pc}
;;;992    #endif
                          ENDP

                  OSTaskQuery PROC
;;;1014   INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
;;;1015   {
000652  b570              PUSH     {r4-r6,lr}
000654  4605              MOV      r5,r0
000656  460e              MOV      r6,r1
;;;1016       OS_TCB    *ptcb;
;;;1017   #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;1018       OS_CPU_SR  cpu_sr = 0;
;;;1019   #endif
;;;1020   
;;;1021   
;;;1022   
;;;1023   #if OS_ARG_CHK_EN > 0
;;;1024       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1025           if (prio != OS_PRIO_SELF) {
;;;1026               return (OS_ERR_PRIO_INVALID);
;;;1027           }
;;;1028       }
;;;1029       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1030           return (OS_ERR_PDATA_NULL);
;;;1031       }
;;;1032   #endif
;;;1033       OS_ENTER_CRITICAL();
000658  f7fff7ff          BL       OS_CPU_SR_Save
00065c  4604              MOV      r4,r0
;;;1034       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
00065e  2dff              CMP      r5,#0xff
000660  d103              BNE      |L1.1642|
;;;1035           prio = OSTCBCur->OSTCBPrio;
000662  480e              LDR      r0,|L1.1692|
000664  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000666  f890f890          LDRB     r5,[r0,#0x32]
                  |L1.1642|
;;;1036       }
;;;1037       ptcb = OSTCBPrioTbl[prio];
00066a  480d              LDR      r0,|L1.1696|
00066c  f850f850          LDR      r1,[r0,r5,LSL #2]
;;;1038       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
000670  b921              CBNZ     r1,|L1.1660|
;;;1039           OS_EXIT_CRITICAL();
000672  4620              MOV      r0,r4
000674  f7fff7ff          BL       OS_CPU_SR_Restore
;;;1040           return (OS_ERR_PRIO);
000678  2029              MOVS     r0,#0x29
;;;1041       }
;;;1042       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1043           OS_EXIT_CRITICAL();
;;;1044           return (OS_ERR_TASK_NOT_EXIST);
;;;1045       }
;;;1046                                                    /* Copy TCB into user storage area                    */
;;;1047       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1048       OS_EXIT_CRITICAL();
;;;1049       return (OS_ERR_NONE);
;;;1050   }
00067a  bd70              POP      {r4-r6,pc}
                  |L1.1660|
00067c  2901              CMP      r1,#1                 ;1042
00067e  d104              BNE      |L1.1674|
000680  4620              MOV      r0,r4                 ;1043
000682  f7fff7ff          BL       OS_CPU_SR_Restore
000686  2043              MOVS     r0,#0x43              ;1044
000688  bd70              POP      {r4-r6,pc}
                  |L1.1674|
00068a  225c              MOVS     r2,#0x5c              ;1047
00068c  4630              MOV      r0,r6                 ;1047
00068e  f7fff7ff          BL       OS_MemCopy
000692  4620              MOV      r0,r4                 ;1048
000694  f7fff7ff          BL       OS_CPU_SR_Restore
000698  2000              MOVS     r0,#0                 ;1049
00069a  bd70              POP      {r4-r6,pc}
;;;1051   #endif
                          ENDP

                  |L1.1692|
00069c  00000000          DCD      OSTCBCur
                  |L1.1696|
0006a0  00000000          DCD      OSTCBPrioTbl
                  |L1.1700|
0006a4  00000000          DCD      OSIntNesting
                  |L1.1704|
0006a8  00000000          DCD      OSRdyGrp
                  |L1.1708|
0006ac  00000000          DCD      OSRdyTbl
                  |L1.1712|
0006b0  00000000          DCD      OSRunning
