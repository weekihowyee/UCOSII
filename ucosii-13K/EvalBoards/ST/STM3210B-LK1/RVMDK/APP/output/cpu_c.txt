; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\cpu_c.o --depend=.\output\cpu_c.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\cpu_c.crf ..\..\..\..\..\uC-CPU\ARM-Cortex-M3\RealView\cpu_c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CPU_BitBandClr PROC
;;;131                          CPU_INT08U  bit_nbr)
;;;132    {
000000  b510              PUSH     {r4,lr}
;;;133        CPU_ADDR  bit_word_off;
;;;134        CPU_ADDR  bit_word_addr;
;;;135    
;;;136    
;;;137        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
000002  f1a0f1a0          SUB      r2,r0,#0x20000000
000006  f44ff44f          MOV      r4,#0x100000
00000a  2300              MOVS     r3,#0
00000c  42a2              CMP      r2,r4
00000e  d206              BCS      |L1.30|
;;;138            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;139            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO) * 32) + (bit_nbr * 4);
000010  0150              LSLS     r0,r2,#5
000012  eb00eb00          ADD      r0,r0,r1,LSL #2
;;;140            bit_word_addr = CPU_BIT_BAND_SRAM_BASE + bit_word_off;
000016  f100f100          ADD      r0,r0,#0x22000000
;;;141    
;;;142           *(volatile CPU_INT32U *)(bit_word_addr) = 0;
00001a  6003              STR      r3,[r0,#0]
                  |L1.28|
;;;143    
;;;144        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
;;;145                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;146            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
;;;147            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
;;;148    
;;;149           *(volatile CPU_INT32U *)(bit_word_addr) = 0;
;;;150        }
;;;151    }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  f1a0f1a0          SUB      r0,r0,#0x40000000     ;144
000022  42a0              CMP      r0,r4                 ;144
000024  d2fa              BCS      |L1.28|
000026  0140              LSLS     r0,r0,#5              ;146
000028  eb00eb00          ADD      r0,r0,r1,LSL #2       ;146
00002c  f100f100          ADD      r0,r0,#0x42000000     ;147
000030  6003              STR      r3,[r0,#0]            ;149
000032  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  CPU_BitBandSet PROC
;;;173                          CPU_INT08U  bit_nbr)
;;;174    {
000034  b510              PUSH     {r4,lr}
;;;175        CPU_ADDR  bit_word_off;
;;;176        CPU_ADDR  bit_word_addr;
;;;177    
;;;178    
;;;179        if ((addr >= CPU_BIT_BAND_SRAM_REG_LO) &&
000036  f1a0f1a0          SUB      r2,r0,#0x20000000
00003a  f44ff44f          MOV      r4,#0x100000
00003e  2301              MOVS     r3,#1
000040  42a2              CMP      r2,r4
000042  d206              BCS      |L1.82|
;;;180            (addr <= CPU_BIT_BAND_SRAM_REG_HI)) {
;;;181            bit_word_off  = ((addr - CPU_BIT_BAND_SRAM_REG_LO) * 32) + (bit_nbr * 4);
000044  0150              LSLS     r0,r2,#5
000046  eb00eb00          ADD      r0,r0,r1,LSL #2
;;;182            bit_word_addr = CPU_BIT_BAND_SRAM_BASE + bit_word_off;
00004a  f100f100          ADD      r0,r0,#0x22000000
;;;183    
;;;184           *(volatile CPU_INT32U *)(bit_word_addr) = 1;
00004e  6003              STR      r3,[r0,#0]
                  |L1.80|
;;;185    
;;;186        } else if ((addr >= CPU_BIT_BAND_PERIPH_REG_LO) &&
;;;187                   (addr <= CPU_BIT_BAND_PERIPH_REG_HI)) {
;;;188            bit_word_off  = ((addr - CPU_BIT_BAND_PERIPH_REG_LO) * 32) + (bit_nbr * 4);
;;;189            bit_word_addr = CPU_BIT_BAND_PERIPH_BASE + bit_word_off;
;;;190    
;;;191           *(volatile CPU_INT32U *)(bit_word_addr) = 1;
;;;192        }
;;;193    }
000050  bd10              POP      {r4,pc}
                  |L1.82|
000052  f1a0f1a0          SUB      r0,r0,#0x40000000     ;186
000056  42a0              CMP      r0,r4                 ;186
000058  d2fa              BCS      |L1.80|
00005a  0140              LSLS     r0,r0,#5              ;188
00005c  eb00eb00          ADD      r0,r0,r1,LSL #2       ;188
000060  f100f100          ADD      r0,r0,#0x42000000     ;189
000064  6003              STR      r3,[r0,#0]            ;191
000066  bd10              POP      {r4,pc}
;;;194    
                          ENDP

                  CPU_IntSrcDis PROC
;;;245    void  CPU_IntSrcDis (CPU_INT08U  pos)
;;;246    {
000068  e92de92d          PUSH     {r4-r8,lr}
;;;247    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;248        CPU_SR      cpu_sr;
;;;249    #endif
;;;250        CPU_INT08U  group;
;;;251        CPU_INT08U  pos_max;
;;;252        CPU_INT08U  nbr;
;;;253    
;;;254    
;;;255        switch (pos) {
00006c  f04ff04f          MOV      r4,#0xe000e000
000070  2810              CMP      r0,#0x10
000072  d237              BCS      |L1.228|
000074  e8dfe8df          TBB      [pc,r0]
000078  52525252          DCB      0x52,0x52,0x52,0x52
00007c  08142052          DCB      0x08,0x14,0x20,0x52
000080  52525252          DCB      0x52,0x52,0x52,0x52
000084  5252522c          DCB      0x52,0x52,0x52,0x2c
;;;256            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;257            case CPU_INT_RSVD_07:
;;;258            case CPU_INT_RSVD_08:
;;;259            case CPU_INT_RSVD_09:
;;;260            case CPU_INT_RSVD_10:
;;;261            case CPU_INT_RSVD_13:
;;;262                 break;
;;;263    
;;;264    
;;;265                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;266            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;267            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;268            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;269            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;270            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;271            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;272                 break;
;;;273    
;;;274            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;275                 CPU_CRITICAL_ENTER();
000088  f7fff7ff          BL       CPU_SR_Save
;;;276                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_MEMFAULTENA;
00008c  f8d4f8d4          LDR      r1,[r4,#0xd24]
000090  f421f421          BIC      r1,r1,#0x10000
000094  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;277                 CPU_CRITICAL_EXIT();
000098  e8bde8bd          POP      {r4-r8,lr}
00009c  f7fff7ff          B.W      CPU_SR_Restore
;;;278                 break;
;;;279    
;;;280            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;281                 CPU_CRITICAL_ENTER();
0000a0  f7fff7ff          BL       CPU_SR_Save
;;;282                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_BUSFAULTENA;
0000a4  f8d4f8d4          LDR      r1,[r4,#0xd24]
0000a8  f421f421          BIC      r1,r1,#0x20000
0000ac  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;283                 CPU_CRITICAL_EXIT();
0000b0  e8bde8bd          POP      {r4-r8,lr}
0000b4  f7fff7ff          B.W      CPU_SR_Restore
;;;284                 break;
;;;285    
;;;286            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;287                 CPU_CRITICAL_ENTER();
0000b8  f7fff7ff          BL       CPU_SR_Save
;;;288                 CPU_REG_NVIC_SHCSR &= ~CPU_REG_NVIC_SHCSR_USGFAULTENA;
0000bc  f8d4f8d4          LDR      r1,[r4,#0xd24]
0000c0  f421f421          BIC      r1,r1,#0x40000
0000c4  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;289                 CPU_CRITICAL_EXIT();
0000c8  e8bde8bd          POP      {r4-r8,lr}
0000cc  f7fff7ff          B.W      CPU_SR_Restore
;;;290                 break;
;;;291    
;;;292            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;293                 CPU_CRITICAL_ENTER();
0000d0  f7fff7ff          BL       CPU_SR_Save
;;;294                 CPU_REG_NVIC_ST_CTRL &= ~CPU_REG_NVIC_ST_CTRL_ENABLE;
0000d4  6921              LDR      r1,[r4,#0x10]
0000d6  f021f021          BIC      r1,r1,#1
0000da  6121              STR      r1,[r4,#0x10]
;;;295                 CPU_CRITICAL_EXIT();
0000dc  e8bde8bd          POP      {r4-r8,lr}
0000e0  f7fff7ff          B.W      CPU_SR_Restore
                  |L1.228|
;;;296                 break;
;;;297    
;;;298    
;;;299                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;300            default:
;;;301                pos_max = CPU_INT_SRC_POS_MAX;
0000e4  6861              LDR      r1,[r4,#4]
0000e6  1c49              ADDS     r1,r1,#1
0000e8  2501              MOVS     r5,#1
0000ea  eb05eb05          ADD      r1,r5,r1,LSL #5
0000ee  b2c9              UXTB     r1,r1
;;;302                if (pos < pos_max) {                                /* See Note #3.                                         */
0000f0  4288              CMP      r0,r1
0000f2  d213              BCS      |L1.284|
;;;303                     group = (pos - 16) / 32;
0000f4  3810              SUBS     r0,r0,#0x10
0000f6  17c1              ASRS     r1,r0,#31
0000f8  eb00eb00          ADD      r1,r0,r1,LSR #27
0000fc  f3c1f3c1          UBFX     r6,r1,#5,#8
;;;304                     nbr   = (pos - 16) % 32;
000100  f021f021          BIC      r1,r1,#0x1f
000104  1a47              SUBS     r7,r0,r1
;;;305    
;;;306                     CPU_CRITICAL_ENTER();
000106  f7fff7ff          BL       CPU_SR_Save
;;;307                     CPU_REG_NVIC_CLREN(group) = DEF_BIT(nbr);
00010a  40bd              LSLS     r5,r5,r7
00010c  eb04eb04          ADD      r1,r4,r6,LSL #2
000110  f8c1f8c1          STR      r5,[r1,#0x180]
;;;308                     CPU_CRITICAL_EXIT();
000114  e8bde8bd          POP      {r4-r8,lr}
000118  f7fff7ff          B.W      CPU_SR_Restore
                  |L1.284|
;;;309                 }
;;;310                 break;
;;;311        }
;;;312    }
00011c  e8bde8bd          POP      {r4-r8,pc}
;;;313    
                          ENDP

                  CPU_IntSrcEn PROC
;;;335    void  CPU_IntSrcEn (CPU_INT08U  pos)
;;;336    {
000120  e92de92d          PUSH     {r4-r8,lr}
;;;337    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;338        CPU_SR      cpu_sr;
;;;339    #endif
;;;340        CPU_INT08U  group;
;;;341        CPU_INT08U  nbr;
;;;342        CPU_INT08U  pos_max;
;;;343    
;;;344    
;;;345        switch (pos) {
000124  f04ff04f          MOV      r4,#0xe000e000
000128  2810              CMP      r0,#0x10
00012a  d237              BCS      |L1.412|
00012c  e8dfe8df          TBB      [pc,r0]
000130  52525252          DCB      0x52,0x52,0x52,0x52
000134  08142052          DCB      0x08,0x14,0x20,0x52
000138  52525252          DCB      0x52,0x52,0x52,0x52
00013c  5252522c          DCB      0x52,0x52,0x52,0x2c
;;;346            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;347            case CPU_INT_RSVD_07:
;;;348            case CPU_INT_RSVD_08:
;;;349            case CPU_INT_RSVD_09:
;;;350            case CPU_INT_RSVD_10:
;;;351            case CPU_INT_RSVD_13:
;;;352                 break;
;;;353    
;;;354    
;;;355                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;356            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;357            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;358            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;359            case CPU_INT_SVCALL:                                    /* SVCall (see Note #2).                                */
;;;360            case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
;;;361            case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
;;;362                 break;
;;;363    
;;;364            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;365                 CPU_CRITICAL_ENTER();
000140  f7fff7ff          BL       CPU_SR_Save
;;;366                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
000144  f8d4f8d4          LDR      r1,[r4,#0xd24]
000148  f441f441          ORR      r1,r1,#0x10000
00014c  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;367                 CPU_CRITICAL_EXIT();
000150  e8bde8bd          POP      {r4-r8,lr}
000154  f7fff7ff          B.W      CPU_SR_Restore
;;;368                 break;
;;;369    
;;;370            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;371                 CPU_CRITICAL_ENTER();
000158  f7fff7ff          BL       CPU_SR_Save
;;;372                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
00015c  f8d4f8d4          LDR      r1,[r4,#0xd24]
000160  f441f441          ORR      r1,r1,#0x20000
000164  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;373                 CPU_CRITICAL_EXIT();
000168  e8bde8bd          POP      {r4-r8,lr}
00016c  f7fff7ff          B.W      CPU_SR_Restore
;;;374                 break;
;;;375    
;;;376            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;377                 CPU_CRITICAL_ENTER();
000170  f7fff7ff          BL       CPU_SR_Save
;;;378                 CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
000174  f8d4f8d4          LDR      r1,[r4,#0xd24]
000178  f441f441          ORR      r1,r1,#0x40000
00017c  f8c4f8c4          STR      r1,[r4,#0xd24]
;;;379                 CPU_CRITICAL_EXIT();
000180  e8bde8bd          POP      {r4-r8,lr}
000184  f7fff7ff          B.W      CPU_SR_Restore
;;;380                 break;
;;;381    
;;;382            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;383                 CPU_CRITICAL_ENTER();
000188  f7fff7ff          BL       CPU_SR_Save
;;;384                 CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
00018c  6921              LDR      r1,[r4,#0x10]
00018e  f041f041          ORR      r1,r1,#1
000192  6121              STR      r1,[r4,#0x10]
;;;385                 CPU_CRITICAL_EXIT();
000194  e8bde8bd          POP      {r4-r8,lr}
000198  f7fff7ff          B.W      CPU_SR_Restore
                  |L1.412|
;;;386                 break;
;;;387    
;;;388    
;;;389                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;390            default:
;;;391                pos_max = CPU_INT_SRC_POS_MAX;
00019c  6861              LDR      r1,[r4,#4]
00019e  1c49              ADDS     r1,r1,#1
0001a0  2501              MOVS     r5,#1
0001a2  eb05eb05          ADD      r1,r5,r1,LSL #5
0001a6  b2c9              UXTB     r1,r1
;;;392                if (pos < pos_max) {                                /* See Note #3.                                         */
0001a8  4288              CMP      r0,r1
0001aa  d2b7              BCS      |L1.284|
;;;393                     group = (pos - 16) / 32;
0001ac  3810              SUBS     r0,r0,#0x10
0001ae  17c1              ASRS     r1,r0,#31
0001b0  eb00eb00          ADD      r1,r0,r1,LSR #27
0001b4  f3c1f3c1          UBFX     r6,r1,#5,#8
;;;394                     nbr   = (pos - 16) % 32;
0001b8  f021f021          BIC      r1,r1,#0x1f
0001bc  1a47              SUBS     r7,r0,r1
;;;395    
;;;396                     CPU_CRITICAL_ENTER();
0001be  f7fff7ff          BL       CPU_SR_Save
;;;397                     CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
0001c2  40bd              LSLS     r5,r5,r7
0001c4  eb04eb04          ADD      r1,r4,r6,LSL #2
0001c8  f8c1f8c1          STR      r5,[r1,#0x100]
;;;398                     CPU_CRITICAL_EXIT();
0001cc  e8bde8bd          POP      {r4-r8,lr}
0001d0  f7fff7ff          B.W      CPU_SR_Restore
;;;399                 }
;;;400                 break;
;;;401        }
;;;402    }
0001d4  e7a2              B        |L1.284|
;;;403    
                          ENDP

                  CPU_IntSrcPrioSet PROC
;;;432                             CPU_INT08U  prio)
;;;433    {
0001d6  e92de92d          PUSH     {r4-r8,lr}
0001da  4606              MOV      r6,r0
0001dc  4608              MOV      r0,r1
;;;434    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;435        CPU_SR      cpu_sr;
;;;436    #endif
;;;437        CPU_INT08U  group;
;;;438        CPU_INT08U  nbr;
;;;439        CPU_INT08U  pos_max;
;;;440        CPU_INT32U  prio_32;
;;;441        CPU_INT32U  temp;
;;;442    
;;;443    
;;;444        prio_32 = CPU_RevBits((CPU_INT08U)prio);
0001de  f7fff7ff          BL       CPU_RevBits
;;;445        prio    = (CPU_INT08U)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
0001e2  0e04              LSRS     r4,r0,#24
;;;446    
;;;447        switch (pos) {
0001e4  f04ff04f          MOV      r5,#0xe000e000
0001e8  2e10              CMP      r6,#0x10
0001ea  d269              BCS      |L1.704|
0001ec  e8dfe8df          TBB      [pc,r6]
0001f0  8b8b8b8b          DCB      0x8b,0x8b,0x8b,0x8b
0001f4  0815238b          DCB      0x08,0x15,0x23,0x8b
0001f8  8b8b8b31          DCB      0x8b,0x8b,0x8b,0x31
0001fc  3f8b4c5a          DCB      0x3f,0x8b,0x4c,0x5a
;;;448            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;449            case CPU_INT_RSVD_07:
;;;450            case CPU_INT_RSVD_08:
;;;451            case CPU_INT_RSVD_09:
;;;452            case CPU_INT_RSVD_10:
;;;453            case CPU_INT_RSVD_13:
;;;454                 break;
;;;455    
;;;456    
;;;457                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;458            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;459            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;460            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;461                 break;
;;;462    
;;;463            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;464                 CPU_CRITICAL_ENTER();
000200  f7fff7ff          BL       CPU_SR_Save
;;;465                 temp                 = CPU_REG_NVIC_SHPRI1;
000204  f8d5f8d5          LDR      r1,[r5,#0xd18]
;;;466                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
000208  f021f021          BIC      r1,r1,#0xff
;;;467                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
00020c  4321              ORRS     r1,r1,r4
;;;468                 CPU_REG_NVIC_SHPRI1  = temp;
00020e  f8c5f8c5          STR      r1,[r5,#0xd18]
;;;469                 CPU_CRITICAL_EXIT();
000212  e8bde8bd          POP      {r4-r8,lr}
000216  f7fff7ff          B.W      CPU_SR_Restore
;;;470                 break;
;;;471    
;;;472            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;473                 CPU_CRITICAL_ENTER();
00021a  f7fff7ff          BL       CPU_SR_Save
;;;474                 temp                 = CPU_REG_NVIC_SHPRI1;
00021e  f8d5f8d5          LDR      r1,[r5,#0xd18]
;;;475                 temp                &= ~(DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
000222  f421f421          BIC      r1,r1,#0xff00
;;;476                 temp                |=  (prio           << (1 * DEF_OCTET_NBR_BITS));
000226  ea41ea41          ORR      r1,r1,r4,LSL #8
;;;477                 CPU_REG_NVIC_SHPRI1  = temp;
00022a  f8c5f8c5          STR      r1,[r5,#0xd18]
;;;478                 CPU_CRITICAL_EXIT();
00022e  e8bde8bd          POP      {r4-r8,lr}
000232  f7fff7ff          B.W      CPU_SR_Restore
;;;479                 break;
;;;480    
;;;481            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;482                 CPU_CRITICAL_ENTER();
000236  f7fff7ff          BL       CPU_SR_Save
;;;483                 temp                 = CPU_REG_NVIC_SHPRI1;
00023a  f8d5f8d5          LDR      r1,[r5,#0xd18]
;;;484                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
00023e  f421f421          BIC      r1,r1,#0xff0000
;;;485                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
000242  ea41ea41          ORR      r1,r1,r4,LSL #16
;;;486                 CPU_REG_NVIC_SHPRI1  = temp;
000246  f8c5f8c5          STR      r1,[r5,#0xd18]
;;;487                 CPU_CRITICAL_EXIT();
00024a  e8bde8bd          POP      {r4-r8,lr}
00024e  f7fff7ff          B.W      CPU_SR_Restore
;;;488                 break;
;;;489    
;;;490            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;491                 CPU_CRITICAL_ENTER();
000252  f7fff7ff          BL       CPU_SR_Save
;;;492                 temp                 = CPU_REG_NVIC_SHPRI2;
000256  f8d5f8d5          LDR      r1,[r5,#0xd1c]
;;;493                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
00025a  f021f021          BIC      r1,r1,#0xff000000
;;;494                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
00025e  ea41ea41          ORR      r1,r1,r4,LSL #24
;;;495                 CPU_REG_NVIC_SHPRI2  = temp;
000262  f8c5f8c5          STR      r1,[r5,#0xd1c]
;;;496                 CPU_CRITICAL_EXIT();
000266  e8bde8bd          POP      {r4-r8,lr}
00026a  f7fff7ff          B.W      CPU_SR_Restore
;;;497                 break;
;;;498    
;;;499            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;500                 CPU_CRITICAL_ENTER();
00026e  f7fff7ff          BL       CPU_SR_Save
;;;501                 temp                = CPU_REG_NVIC_SHPRI3;
000272  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;502                 temp                &= ~(DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
000276  f021f021          BIC      r1,r1,#0xff
;;;503                 temp                |=  (prio           << (0 * DEF_OCTET_NBR_BITS));
00027a  4321              ORRS     r1,r1,r4
;;;504                 CPU_REG_NVIC_SHPRI3  = temp;
00027c  f8c5f8c5          STR      r1,[r5,#0xd20]
;;;505                 CPU_CRITICAL_EXIT();
000280  e8bde8bd          POP      {r4-r8,lr}
000284  f7fff7ff          B.W      CPU_SR_Restore
;;;506                 break;
;;;507    
;;;508            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;509                 CPU_CRITICAL_ENTER();
000288  f7fff7ff          BL       CPU_SR_Save
;;;510                 temp                 = CPU_REG_NVIC_SHPRI3;
00028c  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;511                 temp                &= ~(DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
000290  f421f421          BIC      r1,r1,#0xff0000
;;;512                 temp                |=  (prio           << (2 * DEF_OCTET_NBR_BITS));
000294  ea41ea41          ORR      r1,r1,r4,LSL #16
;;;513                 CPU_REG_NVIC_SHPRI3  = temp;
000298  f8c5f8c5          STR      r1,[r5,#0xd20]
;;;514                 CPU_CRITICAL_EXIT();
00029c  e8bde8bd          POP      {r4-r8,lr}
0002a0  f7fff7ff          B.W      CPU_SR_Restore
;;;515                 break;
;;;516    
;;;517            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;518                 CPU_CRITICAL_ENTER();
0002a4  f7fff7ff          BL       CPU_SR_Save
;;;519                 temp                 = CPU_REG_NVIC_SHPRI3;
0002a8  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;520                 temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
0002ac  f021f021          BIC      r1,r1,#0xff000000
;;;521                 temp                |=  (prio                       << (3 * DEF_OCTET_NBR_BITS));
0002b0  ea41ea41          ORR      r1,r1,r4,LSL #24
;;;522                 CPU_REG_NVIC_SHPRI3  = temp;
0002b4  f8c5f8c5          STR      r1,[r5,#0xd20]
;;;523                 CPU_CRITICAL_EXIT();
0002b8  e8bde8bd          POP      {r4-r8,lr}
0002bc  f7fff7ff          B.W      CPU_SR_Restore
                  |L1.704|
;;;524                 break;
;;;525    
;;;526    
;;;527                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;528            default:
;;;529                pos_max = CPU_INT_SRC_POS_MAX;
0002c0  6868              LDR      r0,[r5,#4]
0002c2  1c40              ADDS     r0,r0,#1
0002c4  2101              MOVS     r1,#1
0002c6  eb01eb01          ADD      r0,r1,r0,LSL #5
0002ca  b2c0              UXTB     r0,r0
;;;530                if (pos < pos_max) {                                /* See Note #3.                                         */
0002cc  4286              CMP      r6,r0
0002ce  d21a              BCS      |L1.774|
;;;531                     group                    = (pos - 16) / 4;
0002d0  3e10              SUBS     r6,r6,#0x10
0002d2  17f0              ASRS     r0,r6,#31
0002d4  eb06eb06          ADD      r0,r6,r0,LSR #30
0002d8  f3c0f3c0          UBFX     r7,r0,#2,#8
;;;532                     nbr                      = (pos - 16) % 4;
0002dc  f020f020          BIC      r0,r0,#3
0002e0  1a36              SUBS     r6,r6,r0
;;;533    
;;;534                     CPU_CRITICAL_ENTER();
0002e2  f7fff7ff          BL       CPU_SR_Save
;;;535                     temp                     = CPU_REG_NVIC_PRIO(group);
0002e6  eb05eb05          ADD      r1,r5,r7,LSL #2
0002ea  f8d1f8d1          LDR      r3,[r1,#0x400]
;;;536                     temp                    &= ~(DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
0002ee  00f2              LSLS     r2,r6,#3
0002f0  25ff              MOVS     r5,#0xff
0002f2  4095              LSLS     r5,r5,r2
0002f4  43ab              BICS     r3,r3,r5
;;;537                     temp                    |=  (prio           << (nbr * DEF_OCTET_NBR_BITS));
0002f6  4094              LSLS     r4,r4,r2
0002f8  431c              ORRS     r4,r4,r3
;;;538                     CPU_REG_NVIC_PRIO(group) = temp;
0002fa  f8c1f8c1          STR      r4,[r1,#0x400]
;;;539                     CPU_CRITICAL_EXIT();
0002fe  e8bde8bd          POP      {r4-r8,lr}
000302  f7fff7ff          B.W      CPU_SR_Restore
                  |L1.774|
;;;540                 }
;;;541                 break;
;;;542        }
;;;543    }
000306  e709              B        |L1.284|
;;;544    
                          ENDP

                  CPU_IntSrcPrioGet PROC
;;;567    CPU_INT16S  CPU_IntSrcPrioGet (CPU_INT08U  pos)
;;;568    {
000308  b570              PUSH     {r4-r6,lr}
;;;569    #if (CPU_CFG_CRITICAL_METHOD == CPU_CRITICAL_METHOD_STATUS_LOCAL)
;;;570        CPU_SR      cpu_sr;
;;;571    #endif
;;;572        CPU_INT08U  group;
;;;573        CPU_INT08U  nbr;
;;;574        CPU_INT08U  pos_max;
;;;575        CPU_INT16S  prio;
;;;576        CPU_INT32U  prio_32;
;;;577        CPU_INT32U  temp;
;;;578    
;;;579    
;;;580        switch (pos) {
00030a  4c3a              LDR      r4,|L1.1012|
00030c  f04ff04f          MOV      r5,#0xe000e000
000310  2810              CMP      r0,#0x10
000312  d24b              BCS      |L1.940|
000314  e8dfe8df          TBB      [pc,r0]
000318  66080b0e          DCB      0x66,0x08,0x0b,0x0e
00031c  11192266          DCB      0x11,0x19,0x22,0x66
000320  66666629          DCB      0x66,0x66,0x66,0x29
000324  31663942          DCB      0x31,0x66,0x39,0x42
;;;581            case CPU_INT_STK_PTR:                                   /* ---------------- INVALID OR RESERVED --------------- */
;;;582            case CPU_INT_RSVD_07:
;;;583            case CPU_INT_RSVD_08:
;;;584            case CPU_INT_RSVD_09:
;;;585            case CPU_INT_RSVD_10:
;;;586            case CPU_INT_RSVD_13:
;;;587                 prio = DEF_INT_16S_MIN_VAL;
;;;588                 break;
;;;589    
;;;590    
;;;591                                                                    /* ----------------- SYSTEM EXCEPTIONS ---------------- */
;;;592            case CPU_INT_RESET:                                     /* Reset (see Note #2).                                 */
;;;593                 prio = -3;
000328  f06ff06f          MVN      r4,#2
;;;594                 break;
00032c  e05a              B        |L1.996|
;;;595    
;;;596            case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
;;;597                 prio = -2;
00032e  f06ff06f          MVN      r4,#1
;;;598                 break;
000332  e057              B        |L1.996|
;;;599    
;;;600            case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
;;;601                 prio = -1;
000334  f04ff04f          MOV      r4,#0xffffffff
;;;602                 break;
000338  e054              B        |L1.996|
;;;603    
;;;604    
;;;605            case CPU_INT_MEM:                                       /* Memory management.                                   */
;;;606                 CPU_CRITICAL_ENTER();
00033a  f7fff7ff          BL       CPU_SR_Save
;;;607                 temp = CPU_REG_NVIC_SHPRI1;
00033e  f8d5f8d5          LDR      r1,[r5,#0xd18]
;;;608                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000342  b2cc              UXTB     r4,r1
;;;609                 CPU_CRITICAL_EXIT();
000344  f7fff7ff          BL       CPU_SR_Restore
;;;610                 break;
000348  e04c              B        |L1.996|
;;;611    
;;;612    
;;;613            case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
;;;614                 CPU_CRITICAL_ENTER();
00034a  f7fff7ff          BL       CPU_SR_Save
;;;615                 temp = CPU_REG_NVIC_SHPRI1;
00034e  f8d5f8d5          LDR      r1,[r5,#0xd18]
;;;616                 prio = (temp >> (1 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000352  f3c1f3c1          UBFX     r4,r1,#8,#8
;;;617                 CPU_CRITICAL_EXIT();
000356  f7fff7ff          BL       CPU_SR_Restore
;;;618                 break;
00035a  e043              B        |L1.996|
;;;619    
;;;620    
;;;621            case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
;;;622                 CPU_CRITICAL_ENTER();
00035c  f7fff7ff          BL       CPU_SR_Save
;;;623                 temp = CPU_REG_NVIC_SHPRI1;
000360  f8d5f8d5          LDR      r0,[r5,#0xd18]
;;;624                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000364  f3c0f3c0          UBFX     r4,r0,#16,#8
;;;625                 break;
000368  e03c              B        |L1.996|
;;;626    
;;;627            case CPU_INT_SVCALL:                                    /* SVCall.                                              */
;;;628                 CPU_CRITICAL_ENTER();
00036a  f7fff7ff          BL       CPU_SR_Save
;;;629                 temp = CPU_REG_NVIC_SHPRI2;
00036e  f8d5f8d5          LDR      r1,[r5,#0xd1c]
;;;630                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000372  0e0c              LSRS     r4,r1,#24
;;;631                 CPU_CRITICAL_EXIT();
000374  f7fff7ff          BL       CPU_SR_Restore
;;;632                 break;
000378  e034              B        |L1.996|
;;;633    
;;;634            case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
;;;635                 CPU_CRITICAL_ENTER();
00037a  f7fff7ff          BL       CPU_SR_Save
;;;636                 temp = CPU_REG_NVIC_SHPRI3;
00037e  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;637                 prio = (temp >> (0 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000382  b2cc              UXTB     r4,r1
;;;638                 CPU_CRITICAL_EXIT();
000384  f7fff7ff          BL       CPU_SR_Restore
;;;639                 break;
000388  e02c              B        |L1.996|
;;;640    
;;;641            case CPU_INT_PENDSV:                                    /* PendSV.                                              */
;;;642                 CPU_CRITICAL_ENTER();
00038a  f7fff7ff          BL       CPU_SR_Save
;;;643                 temp = CPU_REG_NVIC_SHPRI3;
00038e  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;644                 prio = (temp >> (2 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
000392  f3c1f3c1          UBFX     r4,r1,#16,#8
;;;645                 CPU_CRITICAL_EXIT();
000396  f7fff7ff          BL       CPU_SR_Restore
;;;646                 break;
00039a  e023              B        |L1.996|
;;;647    
;;;648            case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
;;;649                 CPU_CRITICAL_ENTER();
00039c  f7fff7ff          BL       CPU_SR_Save
;;;650                 temp = CPU_REG_NVIC_SHPRI3;
0003a0  f8d5f8d5          LDR      r1,[r5,#0xd20]
;;;651                 prio = (temp >> (3 * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
0003a4  0e0c              LSRS     r4,r1,#24
;;;652                 CPU_CRITICAL_EXIT();
0003a6  f7fff7ff          BL       CPU_SR_Restore
;;;653                 break;
0003aa  e01b              B        |L1.996|
                  |L1.940|
;;;654    
;;;655    
;;;656                                                                    /* ---------------- EXTERNAL INTERRUPT ---------------- */
;;;657            default:
;;;658                pos_max = CPU_INT_SRC_POS_MAX;
0003ac  6869              LDR      r1,[r5,#4]
0003ae  1c49              ADDS     r1,r1,#1
0003b0  2201              MOVS     r2,#1
0003b2  eb02eb02          ADD      r1,r2,r1,LSL #5
0003b6  b2c9              UXTB     r1,r1
;;;659                if (pos < pos_max) {                                /* See Note #3.                                         */
0003b8  4288              CMP      r0,r1
0003ba  d213              BCS      |L1.996|
;;;660                     group = (pos - 16) / 4;
0003bc  3810              SUBS     r0,r0,#0x10
0003be  17c1              ASRS     r1,r0,#31
0003c0  eb00eb00          ADD      r1,r0,r1,LSR #30
0003c4  f3c1f3c1          UBFX     r4,r1,#2,#8
;;;661                     nbr   = (pos - 16) % 4;
0003c8  f021f021          BIC      r1,r1,#3
0003cc  1a46              SUBS     r6,r0,r1
;;;662    
;;;663                     CPU_CRITICAL_ENTER();
0003ce  f7fff7ff          BL       CPU_SR_Save
;;;664                     temp  = CPU_REG_NVIC_PRIO(group);
0003d2  eb05eb05          ADD      r1,r5,r4,LSL #2
0003d6  f8d1f8d1          LDR      r4,[r1,#0x400]
;;;665                     CPU_CRITICAL_EXIT();
0003da  f7fff7ff          BL       CPU_SR_Restore
;;;666    
;;;667                     prio  = (temp >> (nbr * DEF_OCTET_NBR_BITS)) & DEF_OCTET_MASK;
0003de  00f0              LSLS     r0,r6,#3
0003e0  40c4              LSRS     r4,r4,r0
0003e2  b2e4              UXTB     r4,r4
                  |L1.996|
;;;668                 } else {
;;;669                     prio  = DEF_INT_16S_MIN_VAL;
;;;670                 }
;;;671                 break;
;;;672        }
;;;673    
;;;674        if (prio >= 0) {
0003e4  2c00              CMP      r4,#0
0003e6  db03              BLT      |L1.1008|
;;;675            prio_32 = CPU_RevBits((CPU_INT32U)prio);
0003e8  4620              MOV      r0,r4
0003ea  f7fff7ff          BL       CPU_RevBits
;;;676            prio    = (CPU_INT16S)(prio_32 >> (3 * DEF_OCTET_NBR_BITS));
0003ee  0e04              LSRS     r4,r0,#24
                  |L1.1008|
;;;677        }
;;;678    
;;;679        return (prio);
0003f0  4620              MOV      r0,r4
;;;680    }
0003f2  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L1.1012|
0003f4  ffff8000          DCD      0xffff8000
