; generated by ARM/Thumb C/C++ Compiler with , RVCT3.1 [Build 919] for uVision
; commandline ArmCC [--debug -c --asm --interleave -o.\output\stm32f10x_gpio.o --depend=.\output\stm32f10x_gpio.d --device=DARMSTM --apcs=interwork -O1 -I. -I..\BSP -I..\..\..\..\..\uCOS-II\Ports\arm-cortex-m3\Generic\RealView -I..\..\..\..\..\uCOS-II\Source -I..\..\..\..\..\CPU\ST\STM32\inc -I..\..\..\..\..\uC-CPU -I..\..\..\..\..\uC-CPU\Arm-Cortex-M3\RealView -I..\..\..\..\..\uC-LIB -IC:\Keil\ARM\INC\ST\STM32F10x --omf_browse=.\output\stm32f10x_gpio.crf ..\..\..\..\..\CPU\ST\STM32\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;53     void GPIO_DeInit(GPIO_TypeDef* GPIOx)
;;;54     {
000000  b510              PUSH     {r4,lr}
;;;55       /* Check the parameters */
;;;56       assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;57       
;;;58       switch (*(u32*)&GPIOx)
000002  4a94              LDR      r2,|L1.596|
000004  1a81              SUBS     r1,r0,r2
000006  1513              ASRS     r3,r2,#20
000008  14d4              ASRS     r4,r2,#19
00000a  4290              CMP      r0,r2
00000c  d037              BEQ      |L1.126|
00000e  dc10              BGT      |L1.50|
000010  4991              LDR      r1,|L1.600|
000012  1840              ADDS     r0,r0,r1
000014  d01f              BEQ      |L1.86|
000016  4298              CMP      r0,r3
000018  d027              BEQ      |L1.106|
00001a  42a0              CMP      r0,r4
00001c  d14d              BNE      |L1.186|
;;;59       {
;;;60         case GPIOA_BASE:
;;;61           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
;;;62           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
;;;63           break;
;;;64     
;;;65         case GPIOB_BASE:
;;;66           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
;;;67           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
;;;68           break;
;;;69     
;;;70         case GPIOC_BASE:
;;;71           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00001e  2101              MOVS     r1,#1
000020  2010              MOVS     r0,#0x10
000022  f7fff7ff          BL       RCC_APB2PeriphResetCmd
;;;72           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000026  2100              MOVS     r1,#0
000028  e8bde8bd          POP      {r4,lr}
00002c  2010              MOVS     r0,#0x10
00002e  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.50|
000032  4299              CMP      r1,r3                 ;58
000034  d02d              BEQ      |L1.146|
000036  42a1              CMP      r1,r4                 ;58
000038  d035              BEQ      |L1.166|
00003a  f5b1f5b1          CMP      r1,#0xc00             ;58
00003e  d13c              BNE      |L1.186|
;;;73           break;
;;;74     
;;;75         case GPIOD_BASE:
;;;76           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
;;;77           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
;;;78           break;
;;;79           
;;;80         case GPIOE_BASE:
;;;81           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
;;;82           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
;;;83           break; 
;;;84     
;;;85         case GPIOF_BASE:
;;;86           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
;;;87           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
;;;88           break;
;;;89     
;;;90         case GPIOG_BASE:
;;;91           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000040  2101              MOVS     r1,#1
000042  020c              LSLS     r4,r1,#8
000044  4620              MOV      r0,r4
000046  f7fff7ff          BL       RCC_APB2PeriphResetCmd
;;;92           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00004a  4620              MOV      r0,r4
00004c  e8bde8bd          POP      {r4,lr}
000050  2100              MOVS     r1,#0
000052  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.86|
000056  2101              MOVS     r1,#1                 ;61
000058  2004              MOVS     r0,#4                 ;61
00005a  f7fff7ff          BL       RCC_APB2PeriphResetCmd
00005e  2100              MOVS     r1,#0                 ;62
000060  e8bde8bd          POP      {r4,lr}               ;62
000064  2004              MOVS     r0,#4                 ;62
000066  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.106|
00006a  2101              MOVS     r1,#1                 ;66
00006c  2008              MOVS     r0,#8                 ;66
00006e  f7fff7ff          BL       RCC_APB2PeriphResetCmd
000072  2100              MOVS     r1,#0                 ;67
000074  e8bde8bd          POP      {r4,lr}               ;67
000078  2008              MOVS     r0,#8                 ;67
00007a  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.126|
00007e  2101              MOVS     r1,#1                 ;76
000080  2020              MOVS     r0,#0x20              ;76
000082  f7fff7ff          BL       RCC_APB2PeriphResetCmd
000086  2100              MOVS     r1,#0                 ;77
000088  e8bde8bd          POP      {r4,lr}               ;77
00008c  2020              MOVS     r0,#0x20              ;77
00008e  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.146|
000092  2101              MOVS     r1,#1                 ;81
000094  2040              MOVS     r0,#0x40              ;81
000096  f7fff7ff          BL       RCC_APB2PeriphResetCmd
00009a  2100              MOVS     r1,#0                 ;82
00009c  e8bde8bd          POP      {r4,lr}               ;82
0000a0  2040              MOVS     r0,#0x40              ;82
0000a2  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.166|
0000a6  2101              MOVS     r1,#1                 ;86
0000a8  2080              MOVS     r0,#0x80              ;86
0000aa  f7fff7ff          BL       RCC_APB2PeriphResetCmd
0000ae  2100              MOVS     r1,#0                 ;87
0000b0  e8bde8bd          POP      {r4,lr}               ;87
0000b4  2080              MOVS     r0,#0x80              ;87
0000b6  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
                  |L1.186|
;;;93           break;                       
;;;94     
;;;95         default:
;;;96           break;
;;;97       }
;;;98     }
0000ba  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  GPIO_AFIODeInit PROC
;;;109    void GPIO_AFIODeInit(void)
;;;110    {
0000bc  b510              PUSH     {r4,lr}
;;;111      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
0000be  2101              MOVS     r1,#1
0000c0  4608              MOV      r0,r1
0000c2  f7fff7ff          BL       RCC_APB2PeriphResetCmd
;;;112      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000c6  2100              MOVS     r1,#0
0000c8  e8bde8bd          POP      {r4,lr}
0000cc  2001              MOVS     r0,#1
0000ce  f7fff7ff          B.W      RCC_APB2PeriphResetCmd
;;;113    }
;;;114    
                          ENDP

                  GPIO_Init PROC
;;;126    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
;;;127    {
0000d2  b5f0              PUSH     {r4-r7,lr}
;;;128      u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
0000d4  2200              MOVS     r2,#0
;;;129      u32 tmpreg = 0x00, pinmask = 0x00;
;;;130    
;;;131      /* Check the parameters */
;;;132      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;133      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;134      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;135      
;;;136    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;137      currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
0000d6  78cc              LDRB     r4,[r1,#3]
0000d8  f004f004          AND      r3,r4,#0xf
;;;138    
;;;139      if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
0000dc  06e4              LSLS     r4,r4,#27
0000de  d501              BPL      |L1.228|
;;;140      { 
;;;141        /* Check the parameters */
;;;142        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;143        /* Output mode */
;;;144        currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
0000e0  788c              LDRB     r4,[r1,#2]
0000e2  4323              ORRS     r3,r3,r4
                  |L1.228|
;;;145      }
;;;146    
;;;147    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;148      /* Configure the eight low port pins */
;;;149      if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
0000e4  880c              LDRH     r4,[r1,#0]
0000e6  f04ff04f          MOV      r7,#0xf
0000ea  f014f014          TST      r4,#0xff
0000ee  f04ff04f          MOV      r12,#1
0000f2  d01b              BEQ      |L1.300|
;;;150      {
;;;151        tmpreg = GPIOx->CRL;
0000f4  6805              LDR      r5,[r0,#0]
                  |L1.246|
;;;152    
;;;153        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;154        {
;;;155          pos = ((u32)0x01) << pinpos;
0000f6  fa0cfa0c          LSL      r4,r12,r2
;;;156          /* Get the port pins position */
;;;157          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
0000fa  880e              LDRH     r6,[r1,#0]
0000fc  4026              ANDS     r6,r6,r4
;;;158    
;;;159          if (currentpin == pos)
0000fe  42a6              CMP      r6,r4
000100  d110              BNE      |L1.292|
;;;160          {
;;;161            pos = pinpos << 2;
000102  0096              LSLS     r6,r2,#2
;;;162            /* Clear the corresponding low control register bits */
;;;163            pinmask = ((u32)0x0F) << pos;
000104  fa07fa07          LSL      lr,r7,r6
;;;164            tmpreg &= ~pinmask;
000108  ea25ea25          BIC      lr,r5,lr
;;;165    
;;;166            /* Write the mode configuration in the corresponding bits */
;;;167            tmpreg |= (currentmode << pos);
00010c  fa03fa03          LSL      r5,r3,r6
000110  ea45ea45          ORR      r5,r5,lr
;;;168    
;;;169            /* Reset the corresponding ODR bit */
;;;170            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000114  78ce              LDRB     r6,[r1,#3]
000116  2e28              CMP      r6,#0x28
000118  d100              BNE      |L1.284|
;;;171            {
;;;172              GPIOx->BRR = (((u32)0x01) << pinpos);
00011a  6144              STR      r4,[r0,#0x14]
                  |L1.284|
;;;173            }
;;;174            /* Set the corresponding ODR bit */
;;;175            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00011c  78ce              LDRB     r6,[r1,#3]
00011e  2e48              CMP      r6,#0x48
000120  d100              BNE      |L1.292|
;;;176            {
;;;177              GPIOx->BSRR = (((u32)0x01) << pinpos);
000122  6104              STR      r4,[r0,#0x10]
                  |L1.292|
000124  1c52              ADDS     r2,r2,#1              ;153
000126  2a08              CMP      r2,#8                 ;153
000128  d3e5              BCC      |L1.246|
;;;178            }
;;;179          }
;;;180        }
;;;181        GPIOx->CRL = tmpreg;
00012a  6005              STR      r5,[r0,#0]
                  |L1.300|
;;;182      }
;;;183    
;;;184    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;185      /* Configure the eight high port pins */
;;;186      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
00012c  880a              LDRH     r2,[r1,#0]
00012e  2aff              CMP      r2,#0xff
000130  d91e              BLS      |L1.368|
;;;187      {
;;;188        tmpreg = GPIOx->CRH;
000132  6845              LDR      r5,[r0,#4]
;;;189        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000134  2200              MOVS     r2,#0
                  |L1.310|
;;;190        {
;;;191          pos = (((u32)0x01) << (pinpos + 0x08));
000136  f102f102          ADD      r6,r2,#8
00013a  fa0cfa0c          LSL      r4,r12,r6
;;;192          /* Get the port pins position */
;;;193          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
00013e  880e              LDRH     r6,[r1,#0]
000140  4026              ANDS     r6,r6,r4
;;;194          if (currentpin == pos)
000142  42a6              CMP      r6,r4
000144  d110              BNE      |L1.360|
;;;195          {
;;;196            pos = pinpos << 2;
000146  0096              LSLS     r6,r2,#2
;;;197            /* Clear the corresponding high control register bits */
;;;198            pinmask = ((u32)0x0F) << pos;
000148  fa07fa07          LSL      lr,r7,r6
;;;199            tmpreg &= ~pinmask;
00014c  ea25ea25          BIC      lr,r5,lr
;;;200    
;;;201            /* Write the mode configuration in the corresponding bits */
;;;202            tmpreg |= (currentmode << pos);
000150  fa03fa03          LSL      r5,r3,r6
000154  ea45ea45          ORR      r5,r5,lr
;;;203    
;;;204            /* Reset the corresponding ODR bit */
;;;205            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000158  78ce              LDRB     r6,[r1,#3]
00015a  2e28              CMP      r6,#0x28
00015c  d100              BNE      |L1.352|
;;;206            {
;;;207              GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
00015e  6144              STR      r4,[r0,#0x14]
                  |L1.352|
;;;208            }
;;;209            /* Set the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000160  78ce              LDRB     r6,[r1,#3]
000162  2e48              CMP      r6,#0x48
000164  d100              BNE      |L1.360|
;;;211            {
;;;212              GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
000166  6104              STR      r4,[r0,#0x10]
                  |L1.360|
000168  1c52              ADDS     r2,r2,#1              ;189
00016a  2a08              CMP      r2,#8                 ;189
00016c  d3e3              BCC      |L1.310|
;;;213            }
;;;214          }
;;;215        }
;;;216        GPIOx->CRH = tmpreg;
00016e  6045              STR      r5,[r0,#4]
                  |L1.368|
;;;217      }
;;;218    }
000170  bdf0              POP      {r4-r7,pc}
;;;219    
                          ENDP

                  GPIO_StructInit PROC
;;;230      /* Reset GPIO init structure parameters values */
;;;231      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000172  f64ff64f          MOV      r1,#0xffff
000176  8001              STRH     r1,[r0,#0]
;;;232      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000178  2102              MOVS     r1,#2
00017a  7081              STRB     r1,[r0,#2]
;;;233      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00017c  2104              MOVS     r1,#4
00017e  70c1              STRB     r1,[r0,#3]
;;;234    }
000180  4770              BX       lr
;;;235    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;245    u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
;;;246    {
000182  4602              MOV      r2,r0
;;;247      u8 bitstatus = 0x00;
000184  2000              MOVS     r0,#0
;;;248      
;;;249      /* Check the parameters */
;;;250      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;251      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;252      
;;;253      if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
000186  6892              LDR      r2,[r2,#8]
000188  420a              TST      r2,r1
00018a  d000              BEQ      |L1.398|
;;;254      {
;;;255        bitstatus = (u8)Bit_SET;
00018c  2001              MOVS     r0,#1
                  |L1.398|
;;;256      }
;;;257      else
;;;258      {
;;;259        bitstatus = (u8)Bit_RESET;
;;;260      }
;;;261      return bitstatus;
;;;262    }
00018e  4770              BX       lr
;;;263    
                          ENDP

                  GPIO_ReadInputData PROC
;;;275      
;;;276      return ((u16)GPIOx->IDR);
000190  6880              LDR      r0,[r0,#8]
000192  b280              UXTH     r0,r0
;;;277    }
000194  4770              BX       lr
;;;278    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;288    u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
;;;289    {
000196  4602              MOV      r2,r0
;;;290      u8 bitstatus = 0x00;
000198  2000              MOVS     r0,#0
;;;291    
;;;292      /* Check the parameters */
;;;293      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;294      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;295      
;;;296      if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
00019a  68d2              LDR      r2,[r2,#0xc]
00019c  420a              TST      r2,r1
00019e  d000              BEQ      |L1.418|
;;;297      {
;;;298        bitstatus = (u8)Bit_SET;
0001a0  2001              MOVS     r0,#1
                  |L1.418|
;;;299      }
;;;300      else
;;;301      {
;;;302        bitstatus = (u8)Bit_RESET;
;;;303      }
;;;304      return bitstatus;
;;;305    }
0001a2  4770              BX       lr
;;;306    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;318        
;;;319      return ((u16)GPIOx->ODR);
0001a4  68c0              LDR      r0,[r0,#0xc]
0001a6  b280              UXTH     r0,r0
;;;320    }
0001a8  4770              BX       lr
;;;321    
                          ENDP

                  GPIO_SetBits PROC
;;;337      
;;;338      GPIOx->BSRR = GPIO_Pin;
0001aa  6101              STR      r1,[r0,#0x10]
;;;339    }
0001ac  4770              BX       lr
;;;340    
                          ENDP

                  GPIO_ResetBits PROC
;;;356      
;;;357      GPIOx->BRR = GPIO_Pin;
0001ae  6141              STR      r1,[r0,#0x14]
;;;358    }
0001b0  4770              BX       lr
;;;359    
                          ENDP

                  GPIO_WriteBit PROC
;;;379      
;;;380      if (BitVal != Bit_RESET)
0001b2  b10a              CBZ      r2,|L1.440|
;;;381      {
;;;382        GPIOx->BSRR = GPIO_Pin;
0001b4  6101              STR      r1,[r0,#0x10]
;;;383      }
;;;384      else
;;;385      {
;;;386        GPIOx->BRR = GPIO_Pin;
;;;387      }
;;;388    }
0001b6  4770              BX       lr
                  |L1.440|
0001b8  6141              STR      r1,[r0,#0x14]         ;386
0001ba  4770              BX       lr
;;;389    
                          ENDP

                  GPIO_Write PROC
;;;403      
;;;404      GPIOx->ODR = PortVal;
0001bc  60c1              STR      r1,[r0,#0xc]
;;;405    }
0001be  4770              BX       lr
;;;406    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;424      
;;;425      tmp |= GPIO_Pin;
0001c0  f441f441          ORR      r2,r1,#0x10000
;;;426      /* Set LCKK bit */
;;;427      GPIOx->LCKR = tmp;
0001c4  6182              STR      r2,[r0,#0x18]
;;;428      /* Reset LCKK bit */
;;;429      GPIOx->LCKR =  GPIO_Pin;
0001c6  6181              STR      r1,[r0,#0x18]
;;;430      /* Set LCKK bit */
;;;431      GPIOx->LCKR = tmp;
0001c8  6182              STR      r2,[r0,#0x18]
;;;432      /* Read LCKK bit*/
;;;433      tmp = GPIOx->LCKR;
0001ca  6981              LDR      r1,[r0,#0x18]
;;;434      /* Read LCKK bit*/
;;;435      tmp = GPIOx->LCKR;
0001cc  6980              LDR      r0,[r0,#0x18]
;;;436    }
0001ce  4770              BX       lr
;;;437    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;450    void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
;;;451    {
0001d0  b510              PUSH     {r4,lr}
;;;452      u32 tmpreg = 0x00;
;;;453    
;;;454      /* Check the parameters */
;;;455      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;456      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;457        
;;;458      tmpreg = AFIO->EVCR;
0001d2  4b22              LDR      r3,|L1.604|
0001d4  681a              LDR      r2,[r3,#0]
;;;459      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;460      tmpreg &= EVCR_PORTPINCONFIG_MASK;
0001d6  f64ff64f          MOV      r4,#0xff80
0001da  4022              ANDS     r2,r2,r4
;;;461      tmpreg |= (u32)GPIO_PortSource << 0x04;
0001dc  ea42ea42          ORR      r0,r2,r0,LSL #4
;;;462      tmpreg |= GPIO_PinSource;
0001e0  4308              ORRS     r0,r0,r1
;;;463    
;;;464      AFIO->EVCR = tmpreg;
0001e2  6018              STR      r0,[r3,#0]
;;;465    }
0001e4  bd10              POP      {r4,pc}
;;;466    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;479      
;;;480      *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
0001e6  491e              LDR      r1,|L1.608|
0001e8  61c8              STR      r0,[r1,#0x1c]
;;;481    }
0001ea  4770              BX       lr
;;;482    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;518    void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
;;;519    {
0001ec  b5f0              PUSH     {r4-r7,lr}
;;;520      u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;521    
;;;522      /* Check the parameters */
;;;523      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;524      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;525      
;;;526      tmpreg = AFIO->MAPR;
0001ee  4d1b              LDR      r5,|L1.604|
0001f0  686b              LDR      r3,[r5,#4]
;;;527    
;;;528      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
0001f2  f3c0f3c0          UBFX     r6,r0,#16,#4
;;;529      tmp = GPIO_Remap & LSB_MASK;
;;;530    
;;;531      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
0001f6  0d42              LSRS     r2,r0,#21
0001f8  0112              LSLS     r2,r2,#4
0001fa  b284              UXTH     r4,r0
0001fc  f3c0f3c0          UBFX     r7,r0,#20,#2
000200  4094              LSLS     r4,r4,r2
000202  2f03              CMP      r7,#3
000204  d106              BNE      |L1.532|
;;;532      {
;;;533        tmpreg &= DBGAFR_SWJCFG_MASK;
000206  f023f023          BIC      r2,r3,#0xf000000
;;;534        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
00020a  6868              LDR      r0,[r5,#4]
00020c  f020f020          BIC      r0,r0,#0xf000000
000210  6068              STR      r0,[r5,#4]
000212  e00a              B        |L1.554|
                  |L1.532|
;;;535      }
;;;536      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000214  02c0              LSLS     r0,r0,#11
000216  d505              BPL      |L1.548|
;;;537      {
;;;538        tmp1 = ((u32)0x03) << tmpmask;
000218  2003              MOVS     r0,#3
00021a  40b0              LSLS     r0,r0,r6
;;;539        tmpreg &= ~tmp1;
00021c  4383              BICS     r3,r3,r0
;;;540        tmpreg |= ~DBGAFR_SWJCFG_MASK;
00021e  f043f043          ORR      r2,r3,#0xf000000
000222  e002              B        |L1.554|
                  |L1.548|
;;;541      }
;;;542      else
;;;543      {
;;;544        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
000224  43a3              BICS     r3,r3,r4
;;;545        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000226  f043f043          ORR      r2,r3,#0xf000000
                  |L1.554|
;;;546      }
;;;547    
;;;548      if (NewState != DISABLE)
00022a  b101              CBZ      r1,|L1.558|
;;;549      {
;;;550        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00022c  4322              ORRS     r2,r2,r4
                  |L1.558|
;;;551      }
;;;552    
;;;553      AFIO->MAPR = tmpreg;
00022e  606a              STR      r2,[r5,#4]
;;;554    }
000230  bdf0              POP      {r4-r7,pc}
;;;555    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;568    void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
;;;569    {
000232  b510              PUSH     {r4,lr}
;;;570      u32 tmp = 0x00;
;;;571    
;;;572      /* Check the parameters */
;;;573      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;574      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;575      
;;;576      tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
000234  078a              LSLS     r2,r1,#30
000236  0f12              LSRS     r2,r2,#28
000238  230f              MOVS     r3,#0xf
00023a  4093              LSLS     r3,r3,r2
;;;577    
;;;578      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00023c  f021f021          BIC      r4,r1,#3
000240  4906              LDR      r1,|L1.604|
000242  4421              ADD      r1,r1,r4
000244  688c              LDR      r4,[r1,#8]
000246  439c              BICS     r4,r4,r3
000248  608c              STR      r4,[r1,#8]
;;;579      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
00024a  688b              LDR      r3,[r1,#8]
00024c  4090              LSLS     r0,r0,r2
00024e  4303              ORRS     r3,r3,r0
000250  608b              STR      r3,[r1,#8]
;;;580    }
000252  bd10              POP      {r4,pc}
;;;581    
                          ENDP

                  |L1.596|
000254  40011400          DCD      0x40011400
                  |L1.600|
000258  bffef800          DCD      0xbffef800
                  |L1.604|
00025c  40010000          DCD      0x40010000
                  |L1.608|
000260  42200000          DCD      0x42200000
